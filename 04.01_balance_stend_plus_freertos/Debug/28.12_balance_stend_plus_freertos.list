
28.12_balance_stend_plus_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08009508  08009508  00019508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009964  08009964  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800996c  0800996c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800996c  0800996c  0001996c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004198  200001f4  08009b68  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000438c  08009b68  0002438c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e38  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd2  00000000  00000000  0003305c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00036e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198a8  00000000  00000000  00037e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014938  00000000  00000000  00051728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a67  00000000  00000000  00066060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000feac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005908  00000000  00000000  000feb18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094f0 	.word	0x080094f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	080094f0 	.word	0x080094f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_I2C1_Init+0x54>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <MX_I2C1_Init+0x58>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_I2C1_Init+0x50>)
 8001006:	f001 fb83 	bl	8002710 <HAL_I2C_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001010:	f000 fe74 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000210 	.word	0x20000210
 800101c:	40005400 	.word	0x40005400
 8001020:	00061a80 	.word	0x00061a80

08001024 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C2_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C2_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C2_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C2_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C2_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C2_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C2_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C2_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C2_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C2_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C2_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C2_Init+0x50>)
 8001062:	f001 fb55 	bl	8002710 <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 fe46 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000264 	.word	0x20000264
 8001078:	40005800 	.word	0x40005800
 800107c:	00061a80 	.word	0x00061a80

08001080 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <HAL_I2C_MspInit+0x108>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12c      	bne.n	80010fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a38      	ldr	r2, [pc, #224]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	482d      	ldr	r0, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0x110>)
 80010da:	f001 f995 	bl	8002408 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010fa:	e041      	b.n	8001180 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <HAL_I2C_MspInit+0x114>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d13c      	bne.n	8001180 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_I2C_MspInit+0x10c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_I2C_MspInit+0x10c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_I2C_MspInit+0x10c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001134:	2304      	movs	r3, #4
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <HAL_I2C_MspInit+0x110>)
 8001140:	f001 f962 	bl	8002408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001144:	2308      	movs	r3, #8
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001154:	2309      	movs	r3, #9
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <HAL_I2C_MspInit+0x110>)
 8001160:	f001 f952 	bl	8002408 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_I2C_MspInit+0x10c>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_I2C_MspInit+0x10c>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_I2C_MspInit+0x10c>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40005400 	.word	0x40005400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020400 	.word	0x40020400
 8001194:	40005800 	.word	0x40005800

08001198 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80011a2:	4a38      	ldr	r2, [pc, #224]	; (8001284 <HD44780_Init+0xec>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <HD44780_Init+0xf0>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <HD44780_Init+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HD44780_Init+0xec>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d907      	bls.n	80011cc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <HD44780_Init+0xf4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <HD44780_Init+0xf4>)
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e006      	b.n	80011da <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HD44780_Init+0xf4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HD44780_Init+0xf4>)
 80011d8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80011da:	f000 f985 	bl	80014e8 <DelayInit>
  HAL_Delay(50);
 80011de:	2032      	movs	r0, #50	; 0x32
 80011e0:	f001 f80c 	bl	80021fc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HD44780_Init+0xf0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f943 	bl	8001474 <ExpanderWrite>
  HAL_Delay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f001 f803 	bl	80021fc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80011f6:	2030      	movs	r0, #48	; 0x30
 80011f8:	f000 f92b 	bl	8001452 <Write4Bits>
  DelayUS(4500);
 80011fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8001200:	f000 f99c 	bl	800153c <DelayUS>

  Write4Bits(0x03 << 4);
 8001204:	2030      	movs	r0, #48	; 0x30
 8001206:	f000 f924 	bl	8001452 <Write4Bits>
  DelayUS(4500);
 800120a:	f241 1094 	movw	r0, #4500	; 0x1194
 800120e:	f000 f995 	bl	800153c <DelayUS>

  Write4Bits(0x03 << 4);
 8001212:	2030      	movs	r0, #48	; 0x30
 8001214:	f000 f91d 	bl	8001452 <Write4Bits>
  DelayUS(4500);
 8001218:	f241 1094 	movw	r0, #4500	; 0x1194
 800121c:	f000 f98e 	bl	800153c <DelayUS>

  Write4Bits(0x02 << 4);
 8001220:	2020      	movs	r0, #32
 8001222:	f000 f916 	bl	8001452 <Write4Bits>
  DelayUS(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f000 f988 	bl	800153c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HD44780_Init+0xf4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f8ce 	bl	80013d8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HD44780_Init+0xf8>)
 800123e:	2204      	movs	r2, #4
 8001240:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001242:	f000 f875 	bl	8001330 <HD44780_Display>
  HD44780_Clear();
 8001246:	f000 f82b 	bl	80012a0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HD44780_Init+0xfc>)
 800124c:	2202      	movs	r2, #2
 800124e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HD44780_Init+0xfc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f8bc 	bl	80013d8 <SendCommand>
  DelayUS(4500);
 8001260:	f241 1094 	movw	r0, #4500	; 0x1194
 8001264:	f000 f96a 	bl	800153c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001268:	490b      	ldr	r1, [pc, #44]	; (8001298 <HD44780_Init+0x100>)
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f876 	bl	800135c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <HD44780_Init+0x104>)
 8001272:	2001      	movs	r0, #1
 8001274:	f000 f872 	bl	800135c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001278:	f000 f81d 	bl	80012b6 <HD44780_Home>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002bb 	.word	0x200002bb
 8001288:	200002bc 	.word	0x200002bc
 800128c:	200002b8 	.word	0x200002b8
 8001290:	200002b9 	.word	0x200002b9
 8001294:	200002ba 	.word	0x200002ba
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008

080012a0 <HD44780_Clear>:

void HD44780_Clear()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 f897 	bl	80013d8 <SendCommand>
  DelayUS(2000);
 80012aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012ae:	f000 f945 	bl	800153c <DelayUS>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HD44780_Home>:

void HD44780_Home()
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 f88c 	bl	80013d8 <SendCommand>
  DelayUS(2000);
 80012c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012c4:	f000 f93a 	bl	800153c <DelayUS>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HD44780_SetCursor+0x5c>)
 80012de:	f107 0408 	add.w	r4, r7, #8
 80012e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HD44780_SetCursor+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	79ba      	ldrb	r2, [r7, #6]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d303      	bcc.n	80012fa <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HD44780_SetCursor+0x60>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	3318      	adds	r3, #24
 8001300:	443b      	add	r3, r7
 8001302:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4413      	add	r3, r2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f85d 	bl	80013d8 <SendCommand>
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	08009508 	.word	0x08009508
 800132c:	200002bb 	.word	0x200002bb

08001330 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HD44780_Display+0x28>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HD44780_Display+0x28>)
 8001340:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HD44780_Display+0x28>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f843 	bl	80013d8 <SendCommand>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002b9 	.word	0x200002b9

0800135c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	b25b      	sxtb	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f82a 	bl	80013d8 <SendCommand>
  for (int i=0; i<8; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e009      	b.n	800139e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f82e 	bl	80013f4 <SendChar>
  for (int i=0; i<8; i++)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	ddf2      	ble.n	800138a <HD44780_CreateSpecialChar+0x2e>
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80013b6:	e006      	b.n	80013c6 <HD44780_PrintStr+0x18>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f817 	bl	80013f4 <SendChar>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f4      	bne.n	80013b8 <HD44780_PrintStr+0xa>
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f812 	bl	8001410 <Send>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f804 	bl	8001410 <Send>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f023 030f 	bic.w	r3, r3, #15
 8001426:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	4313      	orrs	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f80b 	bl	8001452 <Write4Bits>
  Write4Bits((lownib)|mode);
 800143c:	7bba      	ldrb	r2, [r7, #14]
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	4313      	orrs	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f804 	bl	8001452 <Write4Bits>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f808 	bl	8001474 <ExpanderWrite>
  PulseEnable(value);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f820 	bl	80014ac <PulseEnable>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <ExpanderWrite+0x30>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800148a:	f107 020f 	add.w	r2, r7, #15
 800148e:	230a      	movs	r3, #10
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	214e      	movs	r1, #78	; 0x4e
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <ExpanderWrite+0x34>)
 8001498:	f001 fa7e 	bl	8002998 <HAL_I2C_Master_Transmit>
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200002bc 	.word	0x200002bc
 80014a8:	20000264 	.word	0x20000264

080014ac <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffd8 	bl	8001474 <ExpanderWrite>
  DelayUS(20);
 80014c4:	2014      	movs	r0, #20
 80014c6:	f000 f839 	bl	800153c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffce 	bl	8001474 <ExpanderWrite>
  DelayUS(20);
 80014d8:	2014      	movs	r0, #20
 80014da:	f000 f82f 	bl	800153c <DelayUS>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <DelayInit>:

static void DelayInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <DelayInit+0x4c>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a10      	ldr	r2, [pc, #64]	; (8001534 <DelayInit+0x4c>)
 80014f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <DelayInit+0x4c>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <DelayInit+0x4c>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <DelayInit+0x50>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <DelayInit+0x50>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <DelayInit+0x50>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <DelayInit+0x50>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <DelayInit+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001522:	bf00      	nop
  __ASM volatile ("NOP");
 8001524:	bf00      	nop
  __ASM volatile ("NOP");
 8001526:	bf00      	nop
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000edf0 	.word	0xe000edf0
 8001538:	e0001000 	.word	0xe0001000

0800153c <DelayUS>:

static void DelayUS(uint32_t us) {
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <DelayUS+0x44>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <DelayUS+0x48>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9a      	lsrs	r2, r3, #18
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <DelayUS+0x4c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <DelayUS+0x4c>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f6      	bhi.n	800155e <DelayUS+0x22>
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000010 	.word	0x20000010
 8001584:	431bde83 	.word	0x431bde83
 8001588:	e0001000 	.word	0xe0001000

0800158c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800159c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <vApplicationGetIdleTaskMemory+0x30>)
 80015a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200002e0 	.word	0x200002e0
 80015bc:	20000394 	.word	0x20000394

080015c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7f1b      	ldrb	r3, [r3, #28]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d154      	bne.n	800167a <HAL_TIM_IC_CaptureCallback+0xba>
	{
		driver_off_flag = 0;
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80015de:	2100      	movs	r1, #0
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f003 fadf 	bl	8004ba4 <HAL_TIM_ReadCapturedValue>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a28      	ldr	r2, [pc, #160]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015ea:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

			GLBL_frequency_counter++;
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80015fa:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false

			GLBL_frequency_counter++;
		}
	}
}
 80015fc:	e03d      	b.n	800167a <HAL_TIM_IC_CaptureCallback+0xba>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80015fe:	2100      	movs	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f003 facf 	bl	8004ba4 <HAL_TIM_ReadCapturedValue>
 8001606:	4603      	mov	r3, r0
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800160a:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d907      	bls.n	8001628 <HAL_TIM_IC_CaptureCallback+0x68>
				Difference = IC_Val2-IC_Val1;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00d      	b.n	8001644 <HAL_TIM_IC_CaptureCallback+0x84>
			else if (IC_Val1 > IC_Val2)
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d907      	bls.n	8001644 <HAL_TIM_IC_CaptureCallback+0x84>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	3b01      	subs	r3, #1
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001642:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001646:	60fb      	str	r3, [r7, #12]
			GLBL_frequency = refClock/Difference;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001654:	edd7 6a03 	vldr	s13, [r7, #12]
 8001658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
			GLBL_frequency_counter++;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001678:	6013      	str	r3, [r2, #0]
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002dc 	.word	0x200002dc
 8001688:	200002cc 	.word	0x200002cc
 800168c:	200002c0 	.word	0x200002c0
 8001690:	200002d8 	.word	0x200002d8
 8001694:	200002c4 	.word	0x200002c4
 8001698:	200002c8 	.word	0x200002c8
 800169c:	49771500 	.word	0x49771500
 80016a0:	200002d0 	.word	0x200002d0

080016a4 <MPU6050_Init>:

void MPU6050_Init (void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2275      	movs	r2, #117	; 0x75
 80016bc:	21d0      	movs	r1, #208	; 0xd0
 80016be:	482a      	ldr	r0, [pc, #168]	; (8001768 <MPU6050_Init+0xc4>)
 80016c0:	f001 fb62 	bl	8002d88 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b68      	cmp	r3, #104	; 0x68
 80016c8:	d14a      	bne.n	8001760 <MPU6050_Init+0xbc>
	{
		// internal accelerometr delay to zero
		Data = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, DLPF_CFG_REG, 1, &Data, 1, 1000);
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	221a      	movs	r2, #26
 80016e0:	21d0      	movs	r1, #208	; 0xd0
 80016e2:	4821      	ldr	r0, [pc, #132]	; (8001768 <MPU6050_Init+0xc4>)
 80016e4:	f001 fa56 	bl	8002b94 <HAL_I2C_Mem_Write>

		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80016ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2301      	movs	r3, #1
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	226b      	movs	r2, #107	; 0x6b
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	4819      	ldr	r0, [pc, #100]	; (8001768 <MPU6050_Init+0xc4>)
 8001702:	f001 fa47 	bl	8002b94 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001706:	2307      	movs	r3, #7
 8001708:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	1dbb      	adds	r3, r7, #6
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	2219      	movs	r2, #25
 800171c:	21d0      	movs	r1, #208	; 0xd0
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <MPU6050_Init+0xc4>)
 8001720:	f001 fa38 	bl	8002b94 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8001724:	2300      	movs	r3, #0
 8001726:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2301      	movs	r3, #1
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	1dbb      	adds	r3, r7, #6
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	221c      	movs	r2, #28
 800173a:	21d0      	movs	r1, #208	; 0xd0
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <MPU6050_Init+0xc4>)
 800173e:	f001 fa29 	bl	8002b94 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8001742:	2300      	movs	r3, #0
 8001744:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2301      	movs	r3, #1
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	221b      	movs	r2, #27
 8001758:	21d0      	movs	r1, #208	; 0xd0
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MPU6050_Init+0xc4>)
 800175c:	f001 fa1a 	bl	8002b94 <HAL_I2C_Mem_Write>
	}
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000210 	.word	0x20000210

0800176c <mpu6050_read_accel>:

void mpu6050_read_accel(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af04      	add	r7, sp, #16
	// RA_ - READ ACCELEROMETR

	// accelerometrs values
	int16_t RA_Accel_X_RAW = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	81fb      	strh	r3, [r7, #14]
	float RA_Ax;
	uint8_t RA_Rec_Data[2];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RA_Rec_Data, 2, 1000);
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	2302      	movs	r3, #2
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	223b      	movs	r2, #59	; 0x3b
 8001788:	21d0      	movs	r1, #208	; 0xd0
 800178a:	4816      	ldr	r0, [pc, #88]	; (80017e4 <mpu6050_read_accel+0x78>)
 800178c:	f001 fafc 	bl	8002d88 <HAL_I2C_Mem_Read>

	RA_Accel_X_RAW = (int16_t)(RA_Rec_Data[0] << 8 | RA_Rec_Data [1]);
 8001790:	793b      	ldrb	r3, [r7, #4]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21a      	sxth	r2, r3
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	b21b      	sxth	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	81fb      	strh	r3, [r7, #14]

	RA_Ax = RA_Accel_X_RAW/16384.0;
 800179e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fec6 	bl	8000534 <__aeabi_i2d>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <mpu6050_read_accel+0x7c>)
 80017ae:	f7ff f855 	bl	800085c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f9fd 	bl	8000bb8 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	60bb      	str	r3, [r7, #8]

	GLBL_act_acc_value = RA_Ax*1000;
 80017c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80017ec <mpu6050_read_accel+0x80>
 80017ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <mpu6050_read_accel+0x84>)
 80017da:	801a      	strh	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000210 	.word	0x20000210
 80017e8:	40d00000 	.word	0x40d00000
 80017ec:	447a0000 	.word	0x447a0000
 80017f0:	200002d4 	.word	0x200002d4

080017f4 <lcd1602_print>:

void lcd1602_print(STRCT_lcd_process* obj_lcd_process)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	// LCDPR_ - LCD PRINT

	driver_off_flag++;
 80017fc:	4bb5      	ldr	r3, [pc, #724]	; (8001ad4 <lcd1602_print+0x2e0>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	4bb3      	ldr	r3, [pc, #716]	; (8001ad4 <lcd1602_print+0x2e0>)
 8001806:	801a      	strh	r2, [r3, #0]
	if(driver_off_flag > 200)
 8001808:	4bb2      	ldr	r3, [pc, #712]	; (8001ad4 <lcd1602_print+0x2e0>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2bc8      	cmp	r3, #200	; 0xc8
 800180e:	d906      	bls.n	800181e <lcd1602_print+0x2a>
	{
		GLBL_frequency = 0;
 8001810:	4bb1      	ldr	r3, [pc, #708]	; (8001ad8 <lcd1602_print+0x2e4>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
		GLBL_frequency_counter = 0;
 8001818:	4bb0      	ldr	r3, [pc, #704]	; (8001adc <lcd1602_print+0x2e8>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
	}

	obj_lcd_process->LCDPR_act_acc_value = GLBL_act_acc_value;
 800181e:	4bb0      	ldr	r3, [pc, #704]	; (8001ae0 <lcd1602_print+0x2ec>)
 8001820:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	801a      	strh	r2, [r3, #0]
	obj_lcd_process->LCDPR_frequency_counter = GLBL_frequency_counter;
 8001828:	4bac      	ldr	r3, [pc, #688]	; (8001adc <lcd1602_print+0x2e8>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
	obj_lcd_process->LCDPR_frequency = GLBL_frequency;
 8001830:	4ba9      	ldr	r3, [pc, #676]	; (8001ad8 <lcd1602_print+0x2e4>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]

	// there were a hard fault because here can be dividing of 360*phase_crockodil to period, and
	// period shouldn't be a zero
	if(obj_lcd_process->LCDPR_prev_acc_value > 0 && obj_lcd_process->LCDPR_act_acc_value <= 0 &&
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f340 8090 	ble.w	8001964 <lcd1602_print+0x170>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f300 808a 	bgt.w	8001964 <lcd1602_print+0x170>
			obj_lcd_process->LCDPR_frequency_counter_from_imu_values > 30)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
	if(obj_lcd_process->LCDPR_prev_acc_value > 0 && obj_lcd_process->LCDPR_act_acc_value <= 0 &&
 8001854:	2b1e      	cmp	r3, #30
 8001856:	f240 8085 	bls.w	8001964 <lcd1602_print+0x170>
	{
		obj_lcd_process->LCDPR_period_from_imu_values = obj_lcd_process->LCDPR_frequency_counter_from_imu_values;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
		obj_lcd_process->LCDPR_frequency_counter_from_imu_values = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
		obj_lcd_process->LCDPR_frequency_from_imu_values = (1.0/(obj_lcd_process->LCDPR_period_from_imu_values))*1000 * 10;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe51 	bl	8000514 <__aeabi_ui2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	499a      	ldr	r1, [pc, #616]	; (8001ae4 <lcd1602_print+0x2f0>)
 800187c:	f7fe ffee 	bl	800085c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <lcd1602_print+0x2f4>)
 800188e:	f7fe febb 	bl	8000608 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b93      	ldr	r3, [pc, #588]	; (8001aec <lcd1602_print+0x2f8>)
 80018a0:	f7fe feb2 	bl	8000608 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f984 	bl	8000bb8 <__aeabi_d2f>
 80018b0:	4602      	mov	r2, r0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28

		obj_lcd_process->LCDPR_phase_crockodil = obj_lcd_process->LCDPR_frequency_counter;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		obj_lcd_process->LCDPR_phase = 360*(obj_lcd_process->LCDPR_phase_crockodil)*(obj_lcd_process->LCDPR_frequency);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80018ce:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001af0 <lcd1602_print+0x2fc>
 80018d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80018dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		obj_lcd_process->LCDPR_frequency_counter = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]

		(obj_lcd_process->LCDPR_phase_flag)++;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f2:	3301      	adds	r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if(obj_lcd_process->LCDPR_phase_flag > 6)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001902:	2b06      	cmp	r3, #6
 8001904:	d929      	bls.n	800195a <lcd1602_print+0x166>
		{
			// phase
			HD44780_SetCursor(6, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	2006      	movs	r0, #6
 800190a:	f7ff fcdf 	bl	80012cc <HD44780_SetCursor>
			memset(obj_lcd_process->LCDPR_print_buff, ' ', sizeof(obj_lcd_process->LCDPR_print_buff));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3341      	adds	r3, #65	; 0x41
 8001912:	220a      	movs	r2, #10
 8001914:	2120      	movs	r1, #32
 8001916:	4618      	mov	r0, r3
 8001918:	f004 ff8d 	bl	8006836 <memset>
			HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3341      	adds	r3, #65	; 0x41
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd44 	bl	80013ae <HD44780_PrintStr>
			HD44780_SetCursor(6, 0);
 8001926:	2100      	movs	r1, #0
 8001928:	2006      	movs	r0, #6
 800192a:	f7ff fccf 	bl	80012cc <HD44780_SetCursor>
			sprintf(obj_lcd_process->LCDPR_print_buff,"Ph = %u", (unsigned int)obj_lcd_process->LCDPR_phase);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800193a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193e:	ee17 2a90 	vmov	r2, s15
 8001942:	496c      	ldr	r1, [pc, #432]	; (8001af4 <lcd1602_print+0x300>)
 8001944:	f005 fcf8 	bl	8007338 <siprintf>
			HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3341      	adds	r3, #65	; 0x41
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fd2e 	bl	80013ae <HD44780_PrintStr>

			obj_lcd_process->LCDPR_phase_flag = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}

		obj_lcd_process->LCDPR_prev_phase_value = obj_lcd_process->LCDPR_phase;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
 8001962:	e004      	b.n	800196e <lcd1602_print+0x17a>
	}
	else{
		obj_lcd_process->LCDPR_frequency_counter_from_imu_values++;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	621a      	str	r2, [r3, #32]
	}

	obj_lcd_process->LCDPR_freq_flag++;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001974:	3301      	adds	r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if(obj_lcd_process->LCDPR_freq_flag > 200)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001984:	2bc8      	cmp	r3, #200	; 0xc8
 8001986:	d929      	bls.n	80019dc <lcd1602_print+0x1e8>
	{
		HD44780_SetCursor(0, 0);
 8001988:	2100      	movs	r1, #0
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fc9e 	bl	80012cc <HD44780_SetCursor>
		memset(obj_lcd_process->LCDPR_print_buff, ' ', sizeof(obj_lcd_process->LCDPR_print_buff));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3341      	adds	r3, #65	; 0x41
 8001994:	220a      	movs	r2, #10
 8001996:	2120      	movs	r1, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f004 ff4c 	bl	8006836 <memset>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3341      	adds	r3, #65	; 0x41
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fd03 	bl	80013ae <HD44780_PrintStr>
		HD44780_SetCursor(0, 0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fc8e 	bl	80012cc <HD44780_SetCursor>
		sprintf(obj_lcd_process->LCDPR_print_buff,"F = %u", (unsigned int)obj_lcd_process->LCDPR_frequency);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	ee17 2a90 	vmov	r2, s15
 80019c4:	494c      	ldr	r1, [pc, #304]	; (8001af8 <lcd1602_print+0x304>)
 80019c6:	f005 fcb7 	bl	8007338 <siprintf>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3341      	adds	r3, #65	; 0x41
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fced 	bl	80013ae <HD44780_PrintStr>

		obj_lcd_process->LCDPR_freq_flag = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	obj_lcd_process->LCDPR_prev_freqency_value = obj_lcd_process->LCDPR_frequency;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	61da      	str	r2, [r3, #28]

	obj_lcd_process->LCDPR_ampl_flag++;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	85da      	strh	r2, [r3, #46]	; 0x2e
	if(obj_lcd_process->LCDPR_ampl_flag < 200)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80019fc:	2bc7      	cmp	r3, #199	; 0xc7
 80019fe:	dc1a      	bgt.n	8001a36 <lcd1602_print+0x242>
	{
		if(obj_lcd_process->LCDPR_act_acc_value >= obj_lcd_process->LCDPR_acc_max_value)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	db04      	blt.n	8001a1a <lcd1602_print+0x226>
			obj_lcd_process->LCDPR_acc_max_value = obj_lcd_process->LCDPR_act_acc_value;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	809a      	strh	r2, [r3, #4]
		if(obj_lcd_process->LCDPR_act_acc_value < obj_lcd_process->LCDPR_acc_min_value)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	da4b      	bge.n	8001ac2 <lcd1602_print+0x2ce>
			obj_lcd_process->LCDPR_acc_min_value = obj_lcd_process->LCDPR_act_acc_value;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	80da      	strh	r2, [r3, #6]
 8001a34:	e045      	b.n	8001ac2 <lcd1602_print+0x2ce>
	}
	else
	{
		obj_lcd_process->LCDPR_acc_amplitude = obj_lcd_process->LCDPR_acc_max_value - obj_lcd_process->LCDPR_acc_min_value;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edc3 7a02 	vstr	s15, [r3, #8]

		HD44780_SetCursor(0, 1);
 8001a54:	2101      	movs	r1, #1
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fc38 	bl	80012cc <HD44780_SetCursor>
		memset(obj_lcd_process->LCDPR_print_buff, ' ', sizeof(obj_lcd_process->LCDPR_print_buff));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3341      	adds	r3, #65	; 0x41
 8001a60:	220a      	movs	r2, #10
 8001a62:	2120      	movs	r1, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 fee6 	bl	8006836 <memset>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3341      	adds	r3, #65	; 0x41
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc9d 	bl	80013ae <HD44780_PrintStr>
		HD44780_SetCursor(0, 1);
 8001a74:	2101      	movs	r1, #1
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff fc28 	bl	80012cc <HD44780_SetCursor>
		sprintf(obj_lcd_process->LCDPR_print_buff,"A = %u", (unsigned int)obj_lcd_process->LCDPR_acc_amplitude);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8c:	ee17 2a90 	vmov	r2, s15
 8001a90:	491a      	ldr	r1, [pc, #104]	; (8001afc <lcd1602_print+0x308>)
 8001a92:	f005 fc51 	bl	8007338 <siprintf>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3341      	adds	r3, #65	; 0x41
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc87 	bl	80013ae <HD44780_PrintStr>

		obj_lcd_process->LCDPR_prev_acc_amplitude = obj_lcd_process->LCDPR_acc_amplitude;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]

		obj_lcd_process->LCDPR_ampl_flag = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	85da      	strh	r2, [r3, #46]	; 0x2e
		obj_lcd_process->LCDPR_acc_max_value = obj_lcd_process->LCDPR_act_acc_value;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	809a      	strh	r2, [r3, #4]
		obj_lcd_process->LCDPR_acc_min_value = obj_lcd_process->LCDPR_act_acc_value;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	80da      	strh	r2, [r3, #6]
	}

	obj_lcd_process->LCDPR_prev_acc_value = obj_lcd_process->LCDPR_act_acc_value;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	805a      	strh	r2, [r3, #2]

}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200002dc 	.word	0x200002dc
 8001ad8:	200002d0 	.word	0x200002d0
 8001adc:	200002d8 	.word	0x200002d8
 8001ae0:	200002d4 	.word	0x200002d4
 8001ae4:	3ff00000 	.word	0x3ff00000
 8001ae8:	408f4000 	.word	0x408f4000
 8001aec:	40240000 	.word	0x40240000
 8001af0:	43b40000 	.word	0x43b40000
 8001af4:	08009518 	.word	0x08009518
 8001af8:	08009520 	.word	0x08009520
 8001afc:	08009528 	.word	0x08009528

08001b00 <FRRTS_IMU_PROCESS>:

void FRRTS_IMU_PROCESS( void *pvParameters )
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul; /* volatile to ensure ul is not optimized away. */
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		mpu6050_read_accel();
 8001b08:	f7ff fe30 	bl	800176c <mpu6050_read_accel>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e002      	b.n	8001b18 <FRRTS_IMU_PROCESS+0x18>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b1e:	d3f8      	bcc.n	8001b12 <FRRTS_IMU_PROCESS+0x12>
		mpu6050_read_accel();
 8001b20:	e7f2      	b.n	8001b08 <FRRTS_IMU_PROCESS+0x8>

08001b22 <FRRTS_LCD_PRINT>:
		}
	}
}

void FRRTS_LCD_PRINT( void *pvParameters )
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b09a      	sub	sp, #104	; 0x68
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul; /* volatile to ensure ul is not optimized away. */
	/* As per most tasks, this task is implemented in an infinite loop. */

	STRCT_lcd_process obj_lcd_process = {0};
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2258      	movs	r2, #88	; 0x58
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fe7f 	bl	8006836 <memset>

	for( ;; )
	{
		lcd1602_print(&obj_lcd_process);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fe59 	bl	80017f4 <lcd1602_print>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 8001b42:	2300      	movs	r3, #0
 8001b44:	667b      	str	r3, [r7, #100]	; 0x64
 8001b46:	e002      	b.n	8001b4e <FRRTS_LCD_PRINT+0x2c>
 8001b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8001b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b54:	d3f8      	bcc.n	8001b48 <FRRTS_LCD_PRINT+0x26>
		lcd1602_print(&obj_lcd_process);
 8001b56:	e7ef      	b.n	8001b38 <FRRTS_LCD_PRINT+0x16>

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f000 fb0b 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f84f 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f7ff f9f9 	bl	8000f5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b6a:	f7ff fa2d 	bl	8000fc8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b6e:	f7ff fa59 	bl	8001024 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001b72:	f000 fa19 	bl	8001fa8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	MPU6050_Init();
 8001b76:	f7ff fd95 	bl	80016a4 <MPU6050_Init>
	// Функция инициализации дисплея
	HD44780_Init(2);
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7ff fb0c 	bl	8001198 <HD44780_Init>
	HD44780_Clear();
 8001b80:	f7ff fb8e 	bl	80012a0 <HD44780_Clear>
	HD44780_SetCursor(3,0);
 8001b84:	2100      	movs	r1, #0
 8001b86:	2003      	movs	r0, #3
 8001b88:	f7ff fba0 	bl	80012cc <HD44780_SetCursor>
	HD44780_PrintStr("WELCOME TO");
 8001b8c:	4816      	ldr	r0, [pc, #88]	; (8001be8 <main+0x90>)
 8001b8e:	f7ff fc0e 	bl	80013ae <HD44780_PrintStr>
	HD44780_SetCursor(3,1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	2003      	movs	r0, #3
 8001b96:	f7ff fb99 	bl	80012cc <HD44780_SetCursor>
	HD44780_PrintStr("BALANCING");
 8001b9a:	4814      	ldr	r0, [pc, #80]	; (8001bec <main+0x94>)
 8001b9c:	f7ff fc07 	bl	80013ae <HD44780_PrintStr>
	HAL_Delay(2000);
 8001ba0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ba4:	f000 fb2a 	bl	80021fc <HAL_Delay>

	HD44780_Clear();
 8001ba8:	f7ff fb7a 	bl	80012a0 <HD44780_Clear>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001bac:	2100      	movs	r1, #0
 8001bae:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <main+0x98>)
 8001bb0:	f002 fc84 	bl	80044bc <HAL_TIM_IC_Start_IT>

  /* Create one of the two tasks. Note that a real application should check
   the return value of the xTaskCreate() call to ensure the task was created
   successfully. */

   xTaskCreate(FRRTS_IMU_PROCESS, /* Pointer to the function that implements the task. */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc2:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <main+0x9c>)
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <main+0xa0>)
 8001bc6:	f003 fbe8 	bl	800539a <xTaskCreate>
   NULL, /* This example does not use the task parameter. */
   1, /* This task will run at priority 1. */
   NULL ); /* This example does not use the task handle. */

   /* Create the other task in exactly the same way and at the same priority. */
   xTaskCreate(FRRTS_LCD_PRINT, "FRRTS_LCD_PRINT", 1000, NULL, 1, NULL );
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bd8:	4908      	ldr	r1, [pc, #32]	; (8001bfc <main+0xa4>)
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <main+0xa8>)
 8001bdc:	f003 fbdd 	bl	800539a <xTaskCreate>
   /* Start the scheduler so the tasks start executing. */
   vTaskStartScheduler();
 8001be0:	f003 fd54 	bl	800568c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <main+0x8c>
 8001be6:	bf00      	nop
 8001be8:	08009530 	.word	0x08009530
 8001bec:	0800953c 	.word	0x0800953c
 8001bf0:	200005dc 	.word	0x200005dc
 8001bf4:	08009548 	.word	0x08009548
 8001bf8:	08001b01 	.word	0x08001b01
 8001bfc:	0800955c 	.word	0x0800955c
 8001c00:	08001b23 	.word	0x08001b23

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b094      	sub	sp, #80	; 0x50
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2230      	movs	r2, #48	; 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fe0f 	bl	8006836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <SystemClock_Config+0xcc>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <SystemClock_Config+0xcc>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <SystemClock_Config+0xcc>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <SystemClock_Config+0xd0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c50:	4a20      	ldr	r2, [pc, #128]	; (8001cd4 <SystemClock_Config+0xd0>)
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <SystemClock_Config+0xd0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c78:	2319      	movs	r3, #25
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c7c:	23a8      	movs	r3, #168	; 0xa8
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c84:	2304      	movs	r3, #4
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 fe7f 	bl	8003990 <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c98:	f000 f830 	bl	8001cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 f8e1 	bl	8003e80 <HAL_RCC_ClockConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cc4:	f000 f81a 	bl	8001cfc <Error_Handler>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3750      	adds	r7, #80	; 0x50
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cea:	f000 fa67 	bl	80021bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_MspInit+0x54>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_MspInit+0x54>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_MspInit+0x54>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_MspInit+0x54>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	f06f 0001 	mvn.w	r0, #1
 8001d4e:	f000 fb31 	bl	80023b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	2019      	movs	r0, #25
 8001d76:	f000 fb1d 	bl	80023b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f000 fb36 	bl	80023ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_InitTick+0xa0>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_InitTick+0xa0>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_InitTick+0xa0>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d9c:	f107 0210 	add.w	r2, r7, #16
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fa4a 	bl	8004240 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dac:	f002 fa34 	bl	8004218 <HAL_RCC_GetPCLK2Freq>
 8001db0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <HAL_InitTick+0xa4>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9b      	lsrs	r3, r3, #18
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_InitTick+0xa8>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_InitTick+0xac>)
 8001dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_InitTick+0xa8>)
 8001dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dcc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_InitTick+0xa8>)
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_InitTick+0xa8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_InitTick+0xa8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <HAL_InitTick+0xa8>)
 8001de2:	f002 fa5f 	bl	80042a4 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d104      	bne.n	8001df6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001dec:	4806      	ldr	r0, [pc, #24]	; (8001e08 <HAL_InitTick+0xa8>)
 8001dee:	f002 faa9 	bl	8004344 <HAL_TIM_Base_Start_IT>
 8001df2:	4603      	mov	r3, r0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3730      	adds	r7, #48	; 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	20000594 	.word	0x20000594
 8001e0c:	40010000 	.word	0x40010000

08001e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <NMI_Handler+0x4>

08001e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <MemManage_Handler+0x4>

08001e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e42:	f002 fc4f 	bl	80046e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000594 	.word	0x20000594

08001e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM2_IRQHandler+0x10>)
 8001e56:	f002 fc45 	bl	80046e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200005dc 	.word	0x200005dc

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_kill>:

int _kill(int pid, int sig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7e:	f004 fba9 	bl	80065d4 <__errno>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe7 	bl	8001e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea6:	e7fe      	b.n	8001ea6 <_exit+0x12>

08001ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf1      	blt.n	8001ef4 <_write+0x12>
	}
	return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <SystemInit+0x20>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <SystemInit+0x20>)
 8001f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0318 	add.w	r3, r7, #24
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001fdc:	2253      	movs	r2, #83	; 0x53
 8001fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <MX_TIM2_Init+0xdc>)
 8001ffc:	f002 f952 	bl	80042a4 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002006:	f7ff fe79 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002010:	f107 0318 	add.w	r3, r7, #24
 8002014:	4619      	mov	r1, r3
 8002016:	481b      	ldr	r0, [pc, #108]	; (8002084 <MX_TIM2_Init+0xdc>)
 8002018:	f002 fd00 	bl	8004a1c <HAL_TIM_ConfigClockSource>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002022:	f7ff fe6b 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002026:	4817      	ldr	r0, [pc, #92]	; (8002084 <MX_TIM2_Init+0xdc>)
 8002028:	f002 f9ee 	bl	8004408 <HAL_TIM_IC_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002032:	f7ff fe63 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	480f      	ldr	r0, [pc, #60]	; (8002084 <MX_TIM2_Init+0xdc>)
 8002046:	f003 f86d 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002050:	f7ff fe54 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002058:	2301      	movs	r3, #1
 800205a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_TIM2_Init+0xdc>)
 800206c:	f002 fc42 	bl	80048f4 <HAL_TIM_IC_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002076:	f7ff fe41 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200005dc 	.word	0x200005dc

08002088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d133      	bne.n	8002112 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e2:	2301      	movs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f2:	2301      	movs	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4808      	ldr	r0, [pc, #32]	; (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020fe:	f000 f983 	bl	8002408 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	201c      	movs	r0, #28
 8002108:	f000 f954 	bl	80023b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800210c:	201c      	movs	r0, #28
 800210e:	f000 f96d 	bl	80023ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000

08002124 <Reset_Handler>:
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0x12>
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <LoopFillZerobss+0x16>)
 800212a:	490e      	ldr	r1, [pc, #56]	; (8002164 <LoopFillZerobss+0x1a>)
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <LoopFillZerobss+0x1e>)
 800212e:	2300      	movs	r3, #0
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:
 8002132:	58d4      	ldr	r4, [r2, r3]
 8002134:	50c4      	str	r4, [r0, r3]
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:
 8002138:	18c4      	adds	r4, r0, r3
 800213a:	428c      	cmp	r4, r1
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopFillZerobss+0x22>)
 8002140:	4c0b      	ldr	r4, [pc, #44]	; (8002170 <LoopFillZerobss+0x26>)
 8002142:	2300      	movs	r3, #0
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:
 800214a:	42a2      	cmp	r2, r4
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>
 800214e:	f7ff ff19 	bl	8001f84 <SystemInit>
 8002152:	f004 fb3b 	bl	80067cc <__libc_init_array>
 8002156:	f7ff fcff 	bl	8001b58 <main>
 800215a:	4770      	bx	lr
 800215c:	20010000 	.word	0x20010000
 8002160:	20000000 	.word	0x20000000
 8002164:	200001f4 	.word	0x200001f4
 8002168:	08009974 	.word	0x08009974
 800216c:	200001f4 	.word	0x200001f4
 8002170:	2000438c 	.word	0x2000438c

08002174 <ADC_IRQHandler>:
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f8fc 	bl	800239e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff fdda 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fdac 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000018 	.word	0x20000018
 80021e0:	20000624 	.word	0x20000624

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000624 	.word	0x20000624

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000018 	.word	0x20000018

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff4c 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c6:	f7ff ff61 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7ff ffb1 	bl	8002338 <NVIC_EncodePriority>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff80 	bl	80022e4 <__NVIC_SetPriority>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff54 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e159      	b.n	80026d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8148 	bne.w	80026d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a2 	beq.w	80026d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x2ec>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <HAL_GPIO_Init+0x2f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x202>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_GPIO_Init+0x2f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x1fe>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_GPIO_Init+0x2f8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x1fa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_GPIO_Init+0x2fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x1f6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a45      	ldr	r2, [pc, #276]	; (8002708 <HAL_GPIO_Init+0x300>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1f2>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x204>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_GPIO_Init+0x2ec>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_GPIO_Init+0x304>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_GPIO_Init+0x304>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002654:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_GPIO_Init+0x304>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002678:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_GPIO_Init+0x304>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_GPIO_Init+0x304>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_GPIO_Init+0x304>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_GPIO_Init+0x304>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_GPIO_Init+0x304>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f aea2 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e12b      	b.n	800297a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fca2 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	; 0x24
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002762:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002774:	f001 fd3c 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8002778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a81      	ldr	r2, [pc, #516]	; (8002984 <HAL_I2C_Init+0x274>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d807      	bhi.n	8002794 <HAL_I2C_Init+0x84>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a80      	ldr	r2, [pc, #512]	; (8002988 <HAL_I2C_Init+0x278>)
 8002788:	4293      	cmp	r3, r2
 800278a:	bf94      	ite	ls
 800278c:	2301      	movls	r3, #1
 800278e:	2300      	movhi	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e006      	b.n	80027a2 <HAL_I2C_Init+0x92>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a7d      	ldr	r2, [pc, #500]	; (800298c <HAL_I2C_Init+0x27c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0e7      	b.n	800297a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a78      	ldr	r2, [pc, #480]	; (8002990 <HAL_I2C_Init+0x280>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0c9b      	lsrs	r3, r3, #18
 80027b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <HAL_I2C_Init+0x274>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d802      	bhi.n	80027e4 <HAL_I2C_Init+0xd4>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3301      	adds	r3, #1
 80027e2:	e009      	b.n	80027f8 <HAL_I2C_Init+0xe8>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	4a69      	ldr	r2, [pc, #420]	; (8002994 <HAL_I2C_Init+0x284>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	3301      	adds	r3, #1
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800280a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	495c      	ldr	r1, [pc, #368]	; (8002984 <HAL_I2C_Init+0x274>)
 8002814:	428b      	cmp	r3, r1
 8002816:	d819      	bhi.n	800284c <HAL_I2C_Init+0x13c>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e59      	subs	r1, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fbb1 f3f3 	udiv	r3, r1, r3
 8002826:	1c59      	adds	r1, r3, #1
 8002828:	f640 73fc 	movw	r3, #4092	; 0xffc
 800282c:	400b      	ands	r3, r1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_I2C_Init+0x138>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e59      	subs	r1, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	e051      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 8002848:	2304      	movs	r3, #4
 800284a:	e04f      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d111      	bne.n	8002878 <HAL_I2C_Init+0x168>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	440b      	add	r3, r1
 8002862:	fbb0 f3f3 	udiv	r3, r0, r3
 8002866:	3301      	adds	r3, #1
 8002868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e012      	b.n	800289e <HAL_I2C_Init+0x18e>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e58      	subs	r0, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	0099      	lsls	r1, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	fbb0 f3f3 	udiv	r3, r0, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Init+0x196>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e022      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10e      	bne.n	80028cc <HAL_I2C_Init+0x1bc>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1e58      	subs	r0, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ca:	e00f      	b.n	80028ec <HAL_I2C_Init+0x1dc>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6809      	ldr	r1, [r1, #0]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800291a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6911      	ldr	r1, [r2, #16]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68d2      	ldr	r2, [r2, #12]
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	000186a0 	.word	0x000186a0
 8002988:	001e847f 	.word	0x001e847f
 800298c:	003d08ff 	.word	0x003d08ff
 8002990:	431bde83 	.word	0x431bde83
 8002994:	10624dd3 	.word	0x10624dd3

08002998 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	460b      	mov	r3, r1
 80029a6:	817b      	strh	r3, [r7, #10]
 80029a8:	4613      	mov	r3, r2
 80029aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fc1a 	bl	80021e4 <HAL_GetTick>
 80029b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f040 80e0 	bne.w	8002b80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	4970      	ldr	r1, [pc, #448]	; (8002b8c <HAL_I2C_Master_Transmit+0x1f4>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fe02 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0d3      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x50>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0cc      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x1ea>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2221      	movs	r2, #33	; 0x21
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fbbc 	bl	80031d4 <I2C_MasterRequestWrite>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e08d      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a7c:	e066      	b.n	8002b4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6a39      	ldr	r1, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fe7c 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_I2C_Master_Transmit+0x188>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	6a39      	ldr	r1, [r7, #32]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fe6c 	bl	8003802 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d107      	bne.n	8002b48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e01a      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d194      	bne.n	8002a7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	00100002 	.word	0x00100002
 8002b90:	ffff0000 	.word	0xffff0000

08002b94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff fb19 	bl	80021e4 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 80d9 	bne.w	8002d74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	496d      	ldr	r1, [pc, #436]	; (8002d80 <HAL_I2C_Mem_Write+0x1ec>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fd01 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Write+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0c5      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2221      	movs	r2, #33	; 0x21
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_I2C_Mem_Write+0x1f0>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fb38 	bl	80032d8 <I2C_RequestMemoryWrite>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d052      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e081      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fd82 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Mem_Write+0x180>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1aa      	bne.n	8002c72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fd6e 	bl	8003802 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e016      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da2:	f7ff fa1f 	bl	80021e4 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 8208 	bne.w	80031c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2319      	movs	r3, #25
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	497b      	ldr	r1, [pc, #492]	; (8002fac <HAL_I2C_Mem_Read+0x224>)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fc07 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e1fb      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Mem_Read+0x56>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e1f4      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d007      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2222      	movs	r2, #34	; 0x22
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a5b      	ldr	r2, [pc, #364]	; (8002fb0 <HAL_I2C_Mem_Read+0x228>)
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e46:	88f8      	ldrh	r0, [r7, #6]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fad4 	bl	8003404 <I2C_RequestMemoryRead>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1b0      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d113      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e184      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d11b      	bne.n	8002ed6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e164      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11b      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	e144      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f2c:	e138      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	f200 80f1 	bhi.w	800311a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d123      	bne.n	8002f88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fc9d 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e139      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f86:	e10b      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d14e      	bne.n	800302e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	2200      	movs	r2, #0
 8002f98:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_I2C_Mem_Read+0x22c>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fb1a 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e10e      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
 8002faa:	bf00      	nop
 8002fac:	00100002 	.word	0x00100002
 8002fb0:	ffff0000 	.word	0xffff0000
 8002fb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302c:	e0b8      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2200      	movs	r2, #0
 8003036:	4966      	ldr	r1, [pc, #408]	; (80031d0 <HAL_I2C_Mem_Read+0x448>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 facb 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0bf      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2200      	movs	r2, #0
 8003092:	494f      	ldr	r1, [pc, #316]	; (80031d0 <HAL_I2C_Mem_Read+0x448>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fa9d 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e091      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003118:	e042      	b.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fbb0 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e04c      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d118      	bne.n	80031a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f aec2 	bne.w	8002f2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	00010004 	.word	0x00010004

080031d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	460b      	mov	r3, r1
 80031e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d006      	beq.n	80031fe <I2C_MasterRequestWrite+0x2a>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d003      	beq.n	80031fe <I2C_MasterRequestWrite+0x2a>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fc:	d108      	bne.n	8003210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00b      	b.n	8003228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b12      	cmp	r3, #18
 8003216:	d107      	bne.n	8003228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f9cd 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d103      	bne.n	8003258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e035      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003264:	d108      	bne.n	8003278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e01b      	b.n	80032b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	11db      	asrs	r3, r3, #7
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 0306 	and.w	r3, r3, #6
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f063 030f 	orn	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <I2C_MasterRequestWrite+0xfc>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f9f3 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e010      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <I2C_MasterRequestWrite+0x100>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f9e3 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010008 	.word	0x00010008
 80032d4:	00010002 	.word	0x00010002

080032d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	2200      	movs	r2, #0
 800330a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f960 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003328:	d103      	bne.n	8003332 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e05f      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003344:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	492d      	ldr	r1, [pc, #180]	; (8003400 <I2C_RequestMemoryWrite+0x128>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f998 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e04c      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fa02 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b04      	cmp	r3, #4
 8003388:	d107      	bne.n	800339a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e02b      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	e021      	b.n	80033f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033b0:	893b      	ldrh	r3, [r7, #8]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	6a39      	ldr	r1, [r7, #32]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f9dc 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d107      	bne.n	80033e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e005      	b.n	80033f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00010002 	.word	0x00010002

08003404 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	461a      	mov	r2, r3
 8003412:	4603      	mov	r3, r0
 8003414:	817b      	strh	r3, [r7, #10]
 8003416:	460b      	mov	r3, r1
 8003418:	813b      	strh	r3, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800342c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800343c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2200      	movs	r2, #0
 8003446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8c2 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	d103      	bne.n	800346e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0aa      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	4952      	ldr	r1, [pc, #328]	; (80035d0 <I2C_RequestMemoryRead+0x1cc>)
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f8fa 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e097      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	6a39      	ldr	r1, [r7, #32]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f964 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d107      	bne.n	80034d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e076      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	611a      	str	r2, [r3, #16]
 80034ea:	e021      	b.n	8003530 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034ec:	893b      	ldrh	r3, [r7, #8]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fc:	6a39      	ldr	r1, [r7, #32]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f93e 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b04      	cmp	r3, #4
 8003510:	d107      	bne.n	8003522 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e050      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003526:	893b      	ldrh	r3, [r7, #8]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	6a39      	ldr	r1, [r7, #32]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f923 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b04      	cmp	r3, #4
 8003546:	d107      	bne.n	8003558 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e035      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2200      	movs	r2, #0
 8003574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f82b 	bl	80035d4 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003592:	d103      	bne.n	800359c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e013      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	4906      	ldr	r1, [pc, #24]	; (80035d0 <I2C_RequestMemoryRead+0x1cc>)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f863 	bl	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	00010002 	.word	0x00010002

080035d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	e025      	b.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d021      	beq.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fe fdf9 	bl	80021e4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e023      	b.n	800367a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10d      	bne.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x84>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	e00c      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d0b6      	beq.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	e051      	b.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a0:	d123      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e046      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d021      	beq.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fe fd77 	bl	80021e4 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d116      	bne.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e020      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10c      	bne.n	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e00b      	b.n	8003772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	43da      	mvns	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d18d      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378c:	e02d      	b.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f8ce 	bl	8003930 <I2C_IsAcknowledgeFailed>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e02d      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d021      	beq.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fe fd1d 	bl	80021e4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e007      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d1ca      	bne.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800380e:	e02d      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f88d 	bl	8003930 <I2C_IsAcknowledgeFailed>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e02d      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d021      	beq.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7fe fcdc 	bl	80021e4 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d1ca      	bne.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003890:	e042      	b.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d119      	bne.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e029      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fe fc86 	bl	80021e4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d1b5      	bne.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003946:	d11b      	bne.n	8003980 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003950:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f043 0204 	orr.w	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e267      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d075      	beq.n	8003a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ae:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d00c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ba:	4b85      	ldr	r3, [pc, #532]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d112      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b82      	ldr	r3, [pc, #520]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d2:	d10b      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d05b      	beq.n	8003a98 <HAL_RCC_OscConfig+0x108>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d157      	bne.n	8003a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e242      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_OscConfig+0x74>
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0xb0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x98>
 8003a0e:	4b70      	ldr	r3, [pc, #448]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6f      	ldr	r2, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6c      	ldr	r2, [pc, #432]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0xb0>
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a65      	ldr	r2, [pc, #404]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fbcc 	bl	80021e4 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fbc8 	bl	80021e4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e207      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0xc0>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe fbb8 	bl	80021e4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fbb4 	bl	80021e4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1f3      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0xe8>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d063      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d11c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x152>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1c7      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4937      	ldr	r1, [pc, #220]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	e03a      	b.n	8003b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d020      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_RCC_OscConfig+0x244>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fe fb6d 	bl	80021e4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fe fb69 	bl	80021e4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1a8      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4925      	ldr	r1, [pc, #148]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_OscConfig+0x244>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fb4c 	bl	80021e4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b50:	f7fe fb48 	bl	80021e4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e187      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_RCC_OscConfig+0x248>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fe fb2c 	bl	80021e4 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b90:	f7fe fb28 	bl	80021e4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e167      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x200>
 8003bae:	e01b      	b.n	8003be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_OscConfig+0x248>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fb15 	bl	80021e4 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fe fb11 	bl	80021e4 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d907      	bls.n	8003bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e150      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	42470000 	.word	0x42470000
 8003bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ea      	bne.n	8003bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8097 	beq.w	8003d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b7d      	ldr	r3, [pc, #500]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a7c      	ldr	r2, [pc, #496]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b77      	ldr	r3, [pc, #476]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d118      	bne.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c32:	4b74      	ldr	r3, [pc, #464]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fad1 	bl	80021e4 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7fe facd 	bl	80021e4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e10c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2ea>
 8003c6c:	4b64      	ldr	r3, [pc, #400]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a63      	ldr	r2, [pc, #396]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	e01c      	b.n	8003cb4 <HAL_RCC_OscConfig+0x324>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x30c>
 8003c82:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a5e      	ldr	r2, [pc, #376]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a5b      	ldr	r2, [pc, #364]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0x324>
 8003c9c:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	4b55      	ldr	r3, [pc, #340]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a54      	ldr	r2, [pc, #336]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0304 	bic.w	r3, r3, #4
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe fa92 	bl	80021e4 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fa8e 	bl	80021e4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0cb      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ee      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x334>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce8:	f7fe fa7c 	bl	80021e4 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fe fa78 	bl	80021e4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0b5      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d06:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ee      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a1 	beq.w	8003e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2e:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d05c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d141      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fa4c 	bl	80021e4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fe fa48 	bl	80021e4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e087      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	019b      	lsls	r3, r3, #6
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	3b01      	subs	r3, #1
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	491b      	ldr	r1, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fa21 	bl	80021e4 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe fa1d 	bl	80021e4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e05c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x416>
 8003dc4:	e054      	b.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fa0a 	bl	80021e4 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fe fa06 	bl	80021e4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e045      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x444>
 8003df2:	e03d      	b.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e038      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x4ec>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d028      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d121      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d11a      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800

08003e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0cc      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b68      	ldr	r3, [pc, #416]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90c      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d044      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d119      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e067      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4934      	ldr	r1, [pc, #208]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f70:	f7fe f938 	bl	80021e4 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fe f934 	bl	80021e4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d20c      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f821 	bl	800404c <HAL_RCC_GetSysClockFreq>
 800400a:	4602      	mov	r2, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	5ccb      	ldrb	r3, [r1, r3]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fe9a 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023c00 	.word	0x40023c00
 800403c:	40023800 	.word	0x40023800
 8004040:	08009574 	.word	0x08009574
 8004044:	20000010 	.word	0x20000010
 8004048:	20000014 	.word	0x20000014

0800404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b090      	sub	sp, #64	; 0x40
 8004052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
 8004058:	2300      	movs	r3, #0
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405c:	2300      	movs	r3, #0
 800405e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d00d      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x40>
 8004070:	2b08      	cmp	r3, #8
 8004072:	f200 80a1 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x34>
 800407a:	2b04      	cmp	r3, #4
 800407c:	d003      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x3a>
 800407e:	e09b      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004084:	e09b      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004086:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800408a:	e098      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800408c:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004096:	4b4d      	ldr	r3, [pc, #308]	; (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d028      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a2:	4b4a      	ldr	r3, [pc, #296]	; (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	2200      	movs	r2, #0
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	627a      	str	r2, [r7, #36]	; 0x24
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040b4:	2100      	movs	r1, #0
 80040b6:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b8:	fb03 f201 	mul.w	r2, r3, r1
 80040bc:	2300      	movs	r3, #0
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	4a43      	ldr	r2, [pc, #268]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c6:	fba0 1202 	umull	r1, r2, r0, r2
 80040ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040cc:	460a      	mov	r2, r1
 80040ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80040d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d2:	4413      	add	r3, r2
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d8:	2200      	movs	r2, #0
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040e6:	f7fc fdb7 	bl	8000c58 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4613      	mov	r3, r2
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f2:	e053      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f4:	4b35      	ldr	r3, [pc, #212]	; (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	099b      	lsrs	r3, r3, #6
 80040fa:	2200      	movs	r2, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	617a      	str	r2, [r7, #20]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004106:	f04f 0b00 	mov.w	fp, #0
 800410a:	4652      	mov	r2, sl
 800410c:	465b      	mov	r3, fp
 800410e:	f04f 0000 	mov.w	r0, #0
 8004112:	f04f 0100 	mov.w	r1, #0
 8004116:	0159      	lsls	r1, r3, #5
 8004118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800411c:	0150      	lsls	r0, r2, #5
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	ebb2 080a 	subs.w	r8, r2, sl
 8004126:	eb63 090b 	sbc.w	r9, r3, fp
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800413a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800413e:	ebb2 0408 	subs.w	r4, r2, r8
 8004142:	eb63 0509 	sbc.w	r5, r3, r9
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	00eb      	lsls	r3, r5, #3
 8004150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004154:	00e2      	lsls	r2, r4, #3
 8004156:	4614      	mov	r4, r2
 8004158:	461d      	mov	r5, r3
 800415a:	eb14 030a 	adds.w	r3, r4, sl
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	eb45 030b 	adc.w	r3, r5, fp
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	2200      	movs	r2, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	60fa      	str	r2, [r7, #12]
 800418c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004190:	f7fc fd62 	bl	8000c58 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3740      	adds	r7, #64	; 0x40
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	017d7840 	.word	0x017d7840

080041d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <HAL_RCC_GetHCLKFreq+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000010 	.word	0x20000010

080041f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f4:	f7ff fff0 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	08009584 	.word	0x08009584

08004218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800421c:	f7ff ffdc 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0b5b      	lsrs	r3, r3, #13
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	; (800423c <HAL_RCC_GetPCLK2Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	08009584 	.word	0x08009584

08004240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	220f      	movs	r2, #15
 800424e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_RCC_GetClockConfig+0x60>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40023c00 	.word	0x40023c00

080042a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e041      	b.n	800433a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fedc 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fcc0 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d001      	beq.n	800435c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e044      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x6c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d013      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_TIM_Base_Start_IT+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x6c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_TIM_Base_Start_IT+0xbc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x6c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_TIM_Base_Start_IT+0xc0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d111      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d010      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e007      	b.n	80043e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40014000 	.word	0x40014000

08004408 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e041      	b.n	800449e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f839 	bl	80044a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fc0e 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_IC_Start_IT+0x1a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e013      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x42>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_IC_Start_IT+0x2a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x42>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_IC_Start_IT+0x3a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e003      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x42>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d104      	bne.n	8004510 <HAL_TIM_IC_Start_IT+0x54>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e013      	b.n	8004538 <HAL_TIM_IC_Start_IT+0x7c>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d104      	bne.n	8004520 <HAL_TIM_IC_Start_IT+0x64>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e00b      	b.n	8004538 <HAL_TIM_IC_Start_IT+0x7c>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b08      	cmp	r3, #8
 8004524:	d104      	bne.n	8004530 <HAL_TIM_IC_Start_IT+0x74>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e003      	b.n	8004538 <HAL_TIM_IC_Start_IT+0x7c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004536:	b2db      	uxtb	r3, r3
 8004538:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004540:	7bbb      	ldrb	r3, [r7, #14]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d001      	beq.n	800454a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0bd      	b.n	80046c6 <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d104      	bne.n	800455a <HAL_TIM_IC_Start_IT+0x9e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004558:	e013      	b.n	8004582 <HAL_TIM_IC_Start_IT+0xc6>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d104      	bne.n	800456a <HAL_TIM_IC_Start_IT+0xae>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	e00b      	b.n	8004582 <HAL_TIM_IC_Start_IT+0xc6>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d104      	bne.n	800457a <HAL_TIM_IC_Start_IT+0xbe>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004578:	e003      	b.n	8004582 <HAL_TIM_IC_Start_IT+0xc6>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_TIM_IC_Start_IT+0xd6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004590:	e013      	b.n	80045ba <HAL_TIM_IC_Start_IT+0xfe>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0xe6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_IC_Start_IT+0xfe>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_IC_Start_IT+0xf6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	e003      	b.n	80045ba <HAL_TIM_IC_Start_IT+0xfe>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d841      	bhi.n	8004644 <HAL_TIM_IC_Start_IT+0x188>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_TIM_IC_Start_IT+0x10c>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	08004645 	.word	0x08004645
 80045d0:	08004645 	.word	0x08004645
 80045d4:	08004645 	.word	0x08004645
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	08004645 	.word	0x08004645
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004645 	.word	0x08004645
 80045e8:	08004621 	.word	0x08004621
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004645 	.word	0x08004645
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004633 	.word	0x08004633
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0202 	orr.w	r2, r2, #2
 800460a:	60da      	str	r2, [r3, #12]
      break;
 800460c:	e01b      	b.n	8004646 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0204 	orr.w	r2, r2, #4
 800461c:	60da      	str	r2, [r3, #12]
      break;
 800461e:	e012      	b.n	8004646 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	60da      	str	r2, [r3, #12]
      break;
 8004630:	e009      	b.n	8004646 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0210 	orr.w	r2, r2, #16
 8004640:	60da      	str	r2, [r3, #12]
      break;
 8004642:	e000      	b.n	8004646 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004644:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2201      	movs	r2, #1
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fd42 	bl	80050d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1d      	ldr	r2, [pc, #116]	; (80046d0 <HAL_TIM_IC_Start_IT+0x214>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_TIM_IC_Start_IT+0x1d4>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d013      	beq.n	8004690 <HAL_TIM_IC_Start_IT+0x1d4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <HAL_TIM_IC_Start_IT+0x218>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_TIM_IC_Start_IT+0x1d4>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIM_IC_Start_IT+0x21c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_TIM_IC_Start_IT+0x1d4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_TIM_IC_Start_IT+0x220>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_IC_Start_IT+0x1d4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_TIM_IC_Start_IT+0x224>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d010      	beq.n	80046c4 <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	e007      	b.n	80046c4 <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d122      	bne.n	8004740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d11b      	bne.n	8004740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0202 	mvn.w	r2, #2
 8004710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fc ff4a 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 800472c:	e005      	b.n	800473a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa7c 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fa83 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b04      	cmp	r3, #4
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0204 	mvn.w	r2, #4
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc ff20 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa52 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa59 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d122      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d11b      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0208 	mvn.w	r2, #8
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2204      	movs	r2, #4
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fef6 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa28 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa2f 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b10      	cmp	r3, #16
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0210 	mvn.w	r2, #16
 800480c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2208      	movs	r2, #8
 8004812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fecc 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9fe 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa05 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d10e      	bne.n	8004868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0201 	mvn.w	r2, #1
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fa38 	bl	8001cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d10e      	bne.n	8004894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d107      	bne.n	8004894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800488c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fcc0 	bl	8005214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d10e      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d107      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9ca 	bl	8004c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0220 	mvn.w	r2, #32
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fc8a 	bl	8005200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_TIM_IC_ConfigChannel+0x1a>
 800490a:	2302      	movs	r3, #2
 800490c:	e082      	b.n	8004a14 <HAL_TIM_IC_ConfigChannel+0x120>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f000 fa1c 	bl	8004d68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 020c 	bic.w	r2, r2, #12
 800493e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6999      	ldr	r1, [r3, #24]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	619a      	str	r2, [r3, #24]
 8004952:	e05a      	b.n	8004a0a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b04      	cmp	r3, #4
 8004958:	d11c      	bne.n	8004994 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f000 fa94 	bl	8004e96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800497c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6999      	ldr	r1, [r3, #24]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	021a      	lsls	r2, r3, #8
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	619a      	str	r2, [r3, #24]
 8004992:	e03a      	b.n	8004a0a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11b      	bne.n	80049d2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f000 fae1 	bl	8004f70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 020c 	bic.w	r2, r2, #12
 80049bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69d9      	ldr	r1, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	61da      	str	r2, [r3, #28]
 80049d0:	e01b      	b.n	8004a0a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f000 fb01 	bl	8004fe8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	021a      	lsls	r2, r3, #8
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIM_ConfigClockSource+0x18>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0b3      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x180>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6c:	d03e      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0xd0>
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	f200 8087 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	f000 8085 	beq.w	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	d87f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a84:	2b70      	cmp	r3, #112	; 0x70
 8004a86:	d01a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0xa2>
 8004a88:	2b70      	cmp	r3, #112	; 0x70
 8004a8a:	d87b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d050      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0x116>
 8004a90:	2b60      	cmp	r3, #96	; 0x60
 8004a92:	d877      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a94:	2b50      	cmp	r3, #80	; 0x50
 8004a96:	d03c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0xf6>
 8004a98:	2b50      	cmp	r3, #80	; 0x50
 8004a9a:	d873      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a9c:	2b40      	cmp	r3, #64	; 0x40
 8004a9e:	d058      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x136>
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d86f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004aa4:	2b30      	cmp	r3, #48	; 0x30
 8004aa6:	d064      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d86b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d060      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d867      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05c      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d05a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004abc:	e062      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f000 fae3 	bl	8005098 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	609a      	str	r2, [r3, #8]
      break;
 8004aea:	e04e      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f000 facc 	bl	8005098 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b0e:	609a      	str	r2, [r3, #8]
      break;
 8004b10:	e03b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f000 f98a 	bl	8004e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2150      	movs	r1, #80	; 0x50
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa99 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004b30:	e02b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 f9e6 	bl	8004f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2160      	movs	r1, #96	; 0x60
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fa89 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e01b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 f96a 	bl	8004e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2140      	movs	r1, #64	; 0x40
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fa79 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004b70:	e00b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 fa70 	bl	8005062 <TIM_ITRx_SetConfig>
        break;
 8004b82:	e002      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d831      	bhi.n	8004c1c <HAL_TIM_ReadCapturedValue+0x78>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c1d 	.word	0x08004c1d
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004c1d 	.word	0x08004c1d
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004c1d 	.word	0x08004c1d
 8004bd8:	08004c1d 	.word	0x08004c1d
 8004bdc:	08004c1d 	.word	0x08004c1d
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c1d 	.word	0x08004c1d
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c13 	.word	0x08004c13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	60fb      	str	r3, [r7, #12]

      break;
 8004bfc:	e00f      	b.n	8004c1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	60fb      	str	r3, [r7, #12]

      break;
 8004c06:	e00a      	b.n	8004c1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	60fb      	str	r3, [r7, #12]

      break;
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	60fb      	str	r3, [r7, #12]

      break;
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c1c:	bf00      	nop
  }

  return tmpreg;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <TIM_Base_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <TIM_Base_SetConfig+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <TIM_Base_SetConfig+0xf0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_Base_SetConfig+0xe8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_Base_SetConfig+0xec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <TIM_Base_SetConfig+0xf0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <TIM_Base_SetConfig+0xf4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <TIM_Base_SetConfig+0xf8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <TIM_Base_SetConfig+0xfc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d103      	bne.n	8004d38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f023 0201 	bic.w	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <TIM_TI1_SetConfig+0xbc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_TI1_SetConfig+0x56>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d00f      	beq.n	8004dbe <TIM_TI1_SetConfig+0x56>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <TIM_TI1_SetConfig+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_TI1_SetConfig+0x56>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <TIM_TI1_SetConfig+0xc4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_TI1_SetConfig+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <TIM_TI1_SetConfig+0xc8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_TI1_SetConfig+0x56>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <TIM_TI1_SetConfig+0xcc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d101      	bne.n	8004dc2 <TIM_TI1_SetConfig+0x5a>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <TIM_TI1_SetConfig+0x5c>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e003      	b.n	8004de2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f023 030a 	bic.w	r3, r3, #10
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 030a 	and.w	r3, r3, #10
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40014000 	.word	0x40014000

08004e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 030a 	bic.w	r3, r3, #10
 8004e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0210 	bic.w	r2, r3, #16
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	621a      	str	r2, [r3, #32]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f023 0210 	bic.w	r2, r3, #16
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	031b      	lsls	r3, r3, #12
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f023 0303 	bic.w	r3, r3, #3
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005026:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	031b      	lsls	r3, r3, #12
 800502c:	b29b      	uxth	r3, r3
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800503a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	031b      	lsls	r3, r3, #12
 8005040:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	43db      	mvns	r3, r3
 80050fa:	401a      	ands	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005138:	2302      	movs	r3, #2
 800513a:	e050      	b.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d018      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d013      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10c      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40014000 	.word	0x40014000

08005200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f103 0208 	add.w	r2, r3, #8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6852      	ldr	r2, [r2, #4]
 80052a2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d103      	bne.n	80052b6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1e5a      	subs	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b08e      	sub	sp, #56	; 0x38
 80052da:	af04      	add	r7, sp, #16
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <xTaskCreateStatic+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <xTaskCreateStatic+0x46>
        __asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	61fb      	str	r3, [r7, #28]
    }
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800531c:	23b4      	movs	r3, #180	; 0xb4
 800531e:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2bb4      	cmp	r3, #180	; 0xb4
 8005324:	d00a      	beq.n	800533c <xTaskCreateStatic+0x66>
        __asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	61bb      	str	r3, [r7, #24]
    }
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800533c:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d023      	beq.n	800538c <xTaskCreateStatic+0xb6>
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	2b00      	cmp	r3, #0
 8005348:	d020      	beq.n	800538c <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800534e:	22b4      	movs	r2, #180	; 0xb4
 8005350:	2100      	movs	r1, #0
 8005352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005354:	f001 fa6f 	bl	8006836 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800535c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2202      	movs	r2, #2
 8005362:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005366:	2300      	movs	r3, #0
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	f107 0314 	add.w	r3, r7, #20
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f856 	bl	8005430 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005386:	f000 f8ef 	bl	8005568 <prvAddNewTaskToReadyList>
 800538a:	e001      	b.n	8005390 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8005390:	697b      	ldr	r3, [r7, #20]
    }
 8005392:	4618      	mov	r0, r3
 8005394:	3728      	adds	r7, #40	; 0x28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800539a:	b580      	push	{r7, lr}
 800539c:	b08c      	sub	sp, #48	; 0x30
 800539e:	af04      	add	r7, sp, #16
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ff44 	bl	800623c <pvPortMalloc>
 80053b4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d013      	beq.n	80053e4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053bc:	20b4      	movs	r0, #180	; 0xb4
 80053be:	f000 ff3d 	bl	800623c <pvPortMalloc>
 80053c2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80053ca:	22b4      	movs	r2, #180	; 0xb4
 80053cc:	2100      	movs	r1, #0
 80053ce:	69f8      	ldr	r0, [r7, #28]
 80053d0:	f001 fa31 	bl	8006836 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
 80053da:	e005      	b.n	80053e8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80053dc:	6978      	ldr	r0, [r7, #20]
 80053de:	f000 ffe7 	bl	80063b0 <vPortFree>
 80053e2:	e001      	b.n	80053e8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d017      	beq.n	800541e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	2300      	movs	r3, #0
 80053fa:	9303      	str	r3, [sp, #12]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f80f 	bl	8005430 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005412:	69f8      	ldr	r0, [r7, #28]
 8005414:	f000 f8a8 	bl	8005568 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	e002      	b.n	8005424 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005424:	69bb      	ldr	r3, [r7, #24]
    }
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005448:	3b01      	subs	r3, #1
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <prvInitialiseNewTask+0x48>
        __asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
    }
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01e      	beq.n	80054bc <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	e012      	b.n	80054aa <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	7819      	ldrb	r1, [r3, #0]
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	3334      	adds	r3, #52	; 0x34
 8005494:	460a      	mov	r2, r1
 8005496:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d006      	beq.n	80054b2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3301      	adds	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b0f      	cmp	r3, #15
 80054ae:	d9e9      	bls.n	8005484 <prvInitialiseNewTask+0x54>
 80054b0:	e000      	b.n	80054b4 <prvInitialiseNewTask+0x84>
            {
                break;
 80054b2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d90a      	bls.n	80054d8 <prvInitialiseNewTask+0xa8>
        __asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	613b      	str	r3, [r7, #16]
    }
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d901      	bls.n	80054e2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054de:	2306      	movs	r3, #6
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	3304      	adds	r3, #4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff feb8 	bl	8005268 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	3318      	adds	r3, #24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff feb3 	bl	8005268 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005506:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	f1c3 0207 	rsb	r2, r3, #7
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	334c      	adds	r3, #76	; 0x4c
 800551c:	2260      	movs	r2, #96	; 0x60
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f001 f988 	bl	8006836 <memset>
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	4a0c      	ldr	r2, [pc, #48]	; (800555c <prvInitialiseNewTask+0x12c>)
 800552a:	651a      	str	r2, [r3, #80]	; 0x50
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	4a0c      	ldr	r2, [pc, #48]	; (8005560 <prvInitialiseNewTask+0x130>)
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	4a0b      	ldr	r2, [pc, #44]	; (8005564 <prvInitialiseNewTask+0x134>)
 8005536:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	69b8      	ldr	r0, [r7, #24]
 800553e:	f000 fc6f 	bl	8005e20 <pxPortInitialiseStack>
 8005542:	4602      	mov	r2, r0
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005554:	bf00      	nop
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	080095ac 	.word	0x080095ac
 8005560:	080095cc 	.word	0x080095cc
 8005564:	0800958c 	.word	0x0800958c

08005568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005570:	f000 fd82 	bl	8006078 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005574:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <prvAddNewTaskToReadyList+0x108>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a3d      	ldr	r2, [pc, #244]	; (8005670 <prvAddNewTaskToReadyList+0x108>)
 800557c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800557e:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <prvAddNewTaskToReadyList+0x10c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005586:	4a3b      	ldr	r2, [pc, #236]	; (8005674 <prvAddNewTaskToReadyList+0x10c>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800558c:	4b38      	ldr	r3, [pc, #224]	; (8005670 <prvAddNewTaskToReadyList+0x108>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d110      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005594:	f000 fb82 	bl	8005c9c <prvInitialiseTaskLists>
 8005598:	e00d      	b.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <prvAddNewTaskToReadyList+0x110>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055a2:	4b34      	ldr	r3, [pc, #208]	; (8005674 <prvAddNewTaskToReadyList+0x10c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d802      	bhi.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80055b0:	4a30      	ldr	r2, [pc, #192]	; (8005674 <prvAddNewTaskToReadyList+0x10c>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <prvAddNewTaskToReadyList+0x114>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	4a2f      	ldr	r2, [pc, #188]	; (800567c <prvAddNewTaskToReadyList+0x114>)
 80055be:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	2201      	movs	r2, #1
 80055c6:	409a      	lsls	r2, r3
 80055c8:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <prvAddNewTaskToReadyList+0x118>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <prvAddNewTaskToReadyList+0x118>)
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	492b      	ldr	r1, [pc, #172]	; (8005684 <prvAddNewTaskToReadyList+0x11c>)
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3304      	adds	r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	609a      	str	r2, [r3, #8]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	3204      	adds	r2, #4
 80055fe:	605a      	str	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <prvAddNewTaskToReadyList+0x11c>)
 8005616:	441a      	add	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	615a      	str	r2, [r3, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4918      	ldr	r1, [pc, #96]	; (8005684 <prvAddNewTaskToReadyList+0x11c>)
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	4814      	ldr	r0, [pc, #80]	; (8005684 <prvAddNewTaskToReadyList+0x11c>)
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4403      	add	r3, r0
 800563c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800563e:	f000 fd4b 	bl	80060d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <prvAddNewTaskToReadyList+0x110>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00e      	beq.n	8005668 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvAddNewTaskToReadyList+0x10c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d207      	bcs.n	8005668 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <prvAddNewTaskToReadyList+0x120>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000728 	.word	0x20000728
 8005674:	20000628 	.word	0x20000628
 8005678:	20000734 	.word	0x20000734
 800567c:	20000744 	.word	0x20000744
 8005680:	20000730 	.word	0x20000730
 8005684:	2000062c 	.word	0x2000062c
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800569a:	463a      	mov	r2, r7
 800569c:	1d39      	adds	r1, r7, #4
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb ff72 	bl	800158c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	9202      	str	r2, [sp, #8]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	460a      	mov	r2, r1
 80056ba:	4922      	ldr	r1, [pc, #136]	; (8005744 <vTaskStartScheduler+0xb8>)
 80056bc:	4822      	ldr	r0, [pc, #136]	; (8005748 <vTaskStartScheduler+0xbc>)
 80056be:	f7ff fe0a 	bl	80052d6 <xTaskCreateStatic>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <vTaskStartScheduler+0xc0>)
 80056c6:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 80056c8:	4b20      	ldr	r3, [pc, #128]	; (800574c <vTaskStartScheduler+0xc0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e001      	b.n	80056da <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d11b      	bne.n	8005718 <vTaskStartScheduler+0x8c>
        __asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	613b      	str	r3, [r7, #16]
    }
 80056f2:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <vTaskStartScheduler+0xc4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	334c      	adds	r3, #76	; 0x4c
 80056fa:	4a16      	ldr	r2, [pc, #88]	; (8005754 <vTaskStartScheduler+0xc8>)
 80056fc:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80056fe:	4b16      	ldr	r3, [pc, #88]	; (8005758 <vTaskStartScheduler+0xcc>)
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <vTaskStartScheduler+0xd0>)
 8005708:	2201      	movs	r2, #1
 800570a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800570c:	4b14      	ldr	r3, [pc, #80]	; (8005760 <vTaskStartScheduler+0xd4>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005712:	f000 fc0f 	bl	8005f34 <xPortStartScheduler>
 8005716:	e00e      	b.n	8005736 <vTaskStartScheduler+0xaa>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d10a      	bne.n	8005736 <vTaskStartScheduler+0xaa>
        __asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60fb      	str	r3, [r7, #12]
    }
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <vTaskStartScheduler+0xa8>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <vTaskStartScheduler+0xd8>)
 8005738:	681b      	ldr	r3, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	0800956c 	.word	0x0800956c
 8005748:	08005c6d 	.word	0x08005c6d
 800574c:	2000074c 	.word	0x2000074c
 8005750:	20000628 	.word	0x20000628
 8005754:	20000024 	.word	0x20000024
 8005758:	20000748 	.word	0x20000748
 800575c:	20000734 	.word	0x20000734
 8005760:	2000072c 	.word	0x2000072c
 8005764:	2000001c 	.word	0x2000001c

08005768 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <vTaskSuspendAll+0x18>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	4a03      	ldr	r2, [pc, #12]	; (8005780 <vTaskSuspendAll+0x18>)
 8005774:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000750 	.word	0x20000750

08005784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005792:	4b71      	ldr	r3, [pc, #452]	; (8005958 <xTaskResumeAll+0x1d4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <xTaskResumeAll+0x2c>
        __asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	607b      	str	r3, [r7, #4]
    }
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80057b0:	f000 fc62 	bl	8006078 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80057b4:	4b68      	ldr	r3, [pc, #416]	; (8005958 <xTaskResumeAll+0x1d4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	4a67      	ldr	r2, [pc, #412]	; (8005958 <xTaskResumeAll+0x1d4>)
 80057bc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <xTaskResumeAll+0x1d4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 80c0 	bne.w	8005948 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057c8:	4b64      	ldr	r3, [pc, #400]	; (800595c <xTaskResumeAll+0x1d8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80bb 	beq.w	8005948 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d2:	e08a      	b.n	80058ea <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b62      	ldr	r3, [pc, #392]	; (8005960 <xTaskResumeAll+0x1dc>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	6a12      	ldr	r2, [r2, #32]
 80057ea:	609a      	str	r2, [r3, #8]
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	69d2      	ldr	r2, [r2, #28]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3318      	adds	r3, #24
 80057fe:	429a      	cmp	r2, r3
 8005800:	d103      	bne.n	800580a <xTaskResumeAll+0x86>
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2200      	movs	r2, #0
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	68d2      	ldr	r2, [r2, #12]
 8005828:	609a      	str	r2, [r3, #8]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3304      	adds	r3, #4
 800583c:	429a      	cmp	r2, r3
 800583e:	d103      	bne.n	8005848 <xTaskResumeAll+0xc4>
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	605a      	str	r2, [r3, #4]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2200      	movs	r2, #0
 800584c:	615a      	str	r2, [r3, #20]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	2201      	movs	r2, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	4b40      	ldr	r3, [pc, #256]	; (8005964 <xTaskResumeAll+0x1e0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	4a3f      	ldr	r2, [pc, #252]	; (8005964 <xTaskResumeAll+0x1e0>)
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	493e      	ldr	r1, [pc, #248]	; (8005968 <xTaskResumeAll+0x1e4>)
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3304      	adds	r3, #4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	3204      	adds	r2, #4
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <xTaskResumeAll+0x1e4>)
 80058ae:	441a      	add	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	492b      	ldr	r1, [pc, #172]	; (8005968 <xTaskResumeAll+0x1e4>)
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	4827      	ldr	r0, [pc, #156]	; (8005968 <xTaskResumeAll+0x1e4>)
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4403      	add	r3, r0
 80058d4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <xTaskResumeAll+0x1e8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d302      	bcc.n	80058ea <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80058e4:	4b22      	ldr	r3, [pc, #136]	; (8005970 <xTaskResumeAll+0x1ec>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <xTaskResumeAll+0x1dc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f47f af70 	bne.w	80057d4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80058fa:	f000 fa75 	bl	8005de8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <xTaskResumeAll+0x1f0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800590a:	f000 f837 	bl	800597c <xTaskIncrementTick>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <xTaskResumeAll+0x1ec>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3b01      	subs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f1      	bne.n	800590a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <xTaskResumeAll+0x1f0>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <xTaskResumeAll+0x1ec>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <xTaskResumeAll+0x1f4>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005948:	f000 fbc6 	bl	80060d8 <vPortExitCritical>

    return xAlreadyYielded;
 800594c:	69bb      	ldr	r3, [r7, #24]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000750 	.word	0x20000750
 800595c:	20000728 	.word	0x20000728
 8005960:	200006e8 	.word	0x200006e8
 8005964:	20000730 	.word	0x20000730
 8005968:	2000062c 	.word	0x2000062c
 800596c:	20000628 	.word	0x20000628
 8005970:	2000073c 	.word	0x2000073c
 8005974:	20000738 	.word	0x20000738
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	; 0x28
 8005980:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005986:	4b7d      	ldr	r3, [pc, #500]	; (8005b7c <xTaskIncrementTick+0x200>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 80ec 	bne.w	8005b68 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005990:	4b7b      	ldr	r3, [pc, #492]	; (8005b80 <xTaskIncrementTick+0x204>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005998:	4a79      	ldr	r2, [pc, #484]	; (8005b80 <xTaskIncrementTick+0x204>)
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d120      	bne.n	80059e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80059a4:	4b77      	ldr	r3, [pc, #476]	; (8005b84 <xTaskIncrementTick+0x208>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
    }
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xTaskIncrementTick+0x46>
 80059c4:	4b6f      	ldr	r3, [pc, #444]	; (8005b84 <xTaskIncrementTick+0x208>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	4b6f      	ldr	r3, [pc, #444]	; (8005b88 <xTaskIncrementTick+0x20c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a6d      	ldr	r2, [pc, #436]	; (8005b84 <xTaskIncrementTick+0x208>)
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4a6d      	ldr	r2, [pc, #436]	; (8005b88 <xTaskIncrementTick+0x20c>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4b6c      	ldr	r3, [pc, #432]	; (8005b8c <xTaskIncrementTick+0x210>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	4a6b      	ldr	r2, [pc, #428]	; (8005b8c <xTaskIncrementTick+0x210>)
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	f000 fa01 	bl	8005de8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059e6:	4b6a      	ldr	r3, [pc, #424]	; (8005b90 <xTaskIncrementTick+0x214>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a3a      	ldr	r2, [r7, #32]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	f0c0 80a6 	bcc.w	8005b3e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f2:	4b64      	ldr	r3, [pc, #400]	; (8005b84 <xTaskIncrementTick+0x208>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fc:	4b64      	ldr	r3, [pc, #400]	; (8005b90 <xTaskIncrementTick+0x214>)
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005a02:	601a      	str	r2, [r3, #0]
                    break;
 8005a04:	e09b      	b.n	8005b3e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b5f      	ldr	r3, [pc, #380]	; (8005b84 <xTaskIncrementTick+0x208>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d203      	bcs.n	8005a26 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	; (8005b90 <xTaskIncrementTick+0x214>)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005a24:	e08b      	b.n	8005b3e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	68d2      	ldr	r2, [r2, #12]
 8005a34:	609a      	str	r2, [r3, #8]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	6892      	ldr	r2, [r2, #8]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3304      	adds	r3, #4
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d103      	bne.n	8005a54 <xTaskIncrementTick+0xd8>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2200      	movs	r2, #0
 8005a58:	615a      	str	r2, [r3, #20]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1e5a      	subs	r2, r3, #1
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01e      	beq.n	8005aaa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	6a12      	ldr	r2, [r2, #32]
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	69d2      	ldr	r2, [r2, #28]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d103      	bne.n	8005a9a <xTaskIncrementTick+0x11e>
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	2201      	movs	r2, #1
 8005ab0:	409a      	lsls	r2, r3
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <xTaskIncrementTick+0x218>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	4a36      	ldr	r2, [pc, #216]	; (8005b94 <xTaskIncrementTick+0x218>)
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4935      	ldr	r1, [pc, #212]	; (8005b98 <xTaskIncrementTick+0x21c>)
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	3304      	adds	r3, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	60da      	str	r2, [r3, #12]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	3204      	adds	r2, #4
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1d1a      	adds	r2, r3, #4
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <xTaskIncrementTick+0x21c>)
 8005b00:	441a      	add	r2, r3
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	615a      	str	r2, [r3, #20]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	4923      	ldr	r1, [pc, #140]	; (8005b98 <xTaskIncrementTick+0x21c>)
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1c59      	adds	r1, r3, #1
 8005b1a:	481f      	ldr	r0, [pc, #124]	; (8005b98 <xTaskIncrementTick+0x21c>)
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4403      	add	r3, r0
 8005b26:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <xTaskIncrementTick+0x220>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	f67f af5d 	bls.w	80059f2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b3c:	e759      	b.n	80059f2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <xTaskIncrementTick+0x220>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	4914      	ldr	r1, [pc, #80]	; (8005b98 <xTaskIncrementTick+0x21c>)
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d901      	bls.n	8005b5a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005b56:	2301      	movs	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005b5a:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <xTaskIncrementTick+0x224>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
 8005b66:	e004      	b.n	8005b72 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <xTaskIncrementTick+0x228>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <xTaskIncrementTick+0x228>)
 8005b70:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3728      	adds	r7, #40	; 0x28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000750 	.word	0x20000750
 8005b80:	2000072c 	.word	0x2000072c
 8005b84:	200006e0 	.word	0x200006e0
 8005b88:	200006e4 	.word	0x200006e4
 8005b8c:	20000740 	.word	0x20000740
 8005b90:	20000748 	.word	0x20000748
 8005b94:	20000730 	.word	0x20000730
 8005b98:	2000062c 	.word	0x2000062c
 8005b9c:	20000628 	.word	0x20000628
 8005ba0:	2000073c 	.word	0x2000073c
 8005ba4:	20000738 	.word	0x20000738

08005ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bae:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <vTaskSwitchContext+0xac>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005bb6:	4b28      	ldr	r3, [pc, #160]	; (8005c58 <vTaskSwitchContext+0xb0>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005bbc:	e044      	b.n	8005c48 <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 8005bbe:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <vTaskSwitchContext+0xb0>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <vTaskSwitchContext+0xb4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	fab3 f383 	clz	r3, r3
 8005bd0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	f1c3 031f 	rsb	r3, r3, #31
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	4921      	ldr	r1, [pc, #132]	; (8005c60 <vTaskSwitchContext+0xb8>)
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
    }
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vTaskSwitchContext+0x5a>
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4a14      	ldr	r2, [pc, #80]	; (8005c60 <vTaskSwitchContext+0xb8>)
 8005c10:	4413      	add	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3308      	adds	r3, #8
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d104      	bne.n	8005c34 <vTaskSwitchContext+0x8c>
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <vTaskSwitchContext+0xbc>)
 8005c3c:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <vTaskSwitchContext+0xbc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	334c      	adds	r3, #76	; 0x4c
 8005c44:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <vTaskSwitchContext+0xc0>)
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000750 	.word	0x20000750
 8005c58:	2000073c 	.word	0x2000073c
 8005c5c:	20000730 	.word	0x20000730
 8005c60:	2000062c 	.word	0x2000062c
 8005c64:	20000628 	.word	0x20000628
 8005c68:	20000024 	.word	0x20000024

08005c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005c74:	f000 f852 	bl	8005d1c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <prvIdleTask+0x28>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d9f9      	bls.n	8005c74 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <prvIdleTask+0x2c>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005c90:	e7f0      	b.n	8005c74 <prvIdleTask+0x8>
 8005c92:	bf00      	nop
 8005c94:	2000062c 	.word	0x2000062c
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	e00c      	b.n	8005cc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <prvInitialiseTaskLists+0x60>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fab6 	bl	8005228 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b06      	cmp	r3, #6
 8005cc6:	d9ef      	bls.n	8005ca8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005cc8:	480d      	ldr	r0, [pc, #52]	; (8005d00 <prvInitialiseTaskLists+0x64>)
 8005cca:	f7ff faad 	bl	8005228 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005cce:	480d      	ldr	r0, [pc, #52]	; (8005d04 <prvInitialiseTaskLists+0x68>)
 8005cd0:	f7ff faaa 	bl	8005228 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005cd4:	480c      	ldr	r0, [pc, #48]	; (8005d08 <prvInitialiseTaskLists+0x6c>)
 8005cd6:	f7ff faa7 	bl	8005228 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005cda:	480c      	ldr	r0, [pc, #48]	; (8005d0c <prvInitialiseTaskLists+0x70>)
 8005cdc:	f7ff faa4 	bl	8005228 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005ce0:	480b      	ldr	r0, [pc, #44]	; (8005d10 <prvInitialiseTaskLists+0x74>)
 8005ce2:	f7ff faa1 	bl	8005228 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <prvInitialiseTaskLists+0x78>)
 8005ce8:	4a05      	ldr	r2, [pc, #20]	; (8005d00 <prvInitialiseTaskLists+0x64>)
 8005cea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <prvInitialiseTaskLists+0x7c>)
 8005cee:	4a05      	ldr	r2, [pc, #20]	; (8005d04 <prvInitialiseTaskLists+0x68>)
 8005cf0:	601a      	str	r2, [r3, #0]
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	2000062c 	.word	0x2000062c
 8005d00:	200006b8 	.word	0x200006b8
 8005d04:	200006cc 	.word	0x200006cc
 8005d08:	200006e8 	.word	0x200006e8
 8005d0c:	200006fc 	.word	0x200006fc
 8005d10:	20000714 	.word	0x20000714
 8005d14:	200006e0 	.word	0x200006e0
 8005d18:	200006e4 	.word	0x200006e4

08005d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d22:	e019      	b.n	8005d58 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005d24:	f000 f9a8 	bl	8006078 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <prvCheckTasksWaitingTermination+0x50>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff faa4 	bl	8005282 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <prvCheckTasksWaitingTermination+0x54>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <prvCheckTasksWaitingTermination+0x54>)
 8005d42:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <prvCheckTasksWaitingTermination+0x58>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <prvCheckTasksWaitingTermination+0x58>)
 8005d4c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005d4e:	f000 f9c3 	bl	80060d8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f810 	bl	8005d78 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <prvCheckTasksWaitingTermination+0x58>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e1      	bne.n	8005d24 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	200006fc 	.word	0x200006fc
 8005d70:	20000728 	.word	0x20000728
 8005d74:	20000710 	.word	0x20000710

08005d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <prvDeleteTCB+0x6c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	334c      	adds	r3, #76	; 0x4c
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fa6a 	bl	8007260 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d108      	bne.n	8005da8 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fb08 	bl	80063b0 <vPortFree>
                vPortFree( pxTCB );
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fb05 	bl	80063b0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005da6:	e018      	b.n	8005dda <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d103      	bne.n	8005dba <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fafc 	bl	80063b0 <vPortFree>
    }
 8005db8:	e00f      	b.n	8005dda <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d00a      	beq.n	8005dda <prvDeleteTCB+0x62>
        __asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60fb      	str	r3, [r7, #12]
    }
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <prvDeleteTCB+0x60>
    }
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000628 	.word	0x20000628

08005de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <prvResetNextTaskUnblockTime+0x30>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <prvResetNextTaskUnblockTime+0x34>)
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005dfe:	e005      	b.n	8005e0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <prvResetNextTaskUnblockTime+0x30>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <prvResetNextTaskUnblockTime+0x34>)
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	200006e0 	.word	0x200006e0
 8005e1c:	20000748 	.word	0x20000748

08005e20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3b04      	subs	r3, #4
 8005e3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005e50:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <pxPortInitialiseStack+0x64>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b14      	subs	r3, #20
 8005e5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b04      	subs	r3, #4
 8005e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f06f 0202 	mvn.w	r2, #2
 8005e6e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3b20      	subs	r3, #32
 8005e74:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	08005e89 	.word	0x08005e89

08005e88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <prvTaskExitError+0x54>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d00a      	beq.n	8005eb2 <prvTaskExitError+0x2a>
        __asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
    }
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <prvTaskExitError+0x28>
        __asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60bb      	str	r3, [r7, #8]
    }
 8005ec4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005ec6:	bf00      	nop
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0fc      	beq.n	8005ec8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20000020 	.word	0x20000020

08005ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <pxCurrentTCBConst2>)
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	6808      	ldr	r0, [r1, #0]
 8005ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eea:	f380 8809 	msr	PSP, r0
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8811 	msr	BASEPRI, r0
 8005efa:	4770      	bx	lr
 8005efc:	f3af 8000 	nop.w

08005f00 <pxCurrentTCBConst2>:
 8005f00:	20000628 	.word	0x20000628
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005f08:	4808      	ldr	r0, [pc, #32]	; (8005f2c <prvPortStartFirstTask+0x24>)
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	f380 8808 	msr	MSP, r0
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8814 	msr	CONTROL, r0
 8005f1a:	b662      	cpsie	i
 8005f1c:	b661      	cpsie	f
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	df00      	svc	0
 8005f28:	bf00      	nop
 8005f2a:	0000      	.short	0x0000
 8005f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop

08005f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f3a:	4b46      	ldr	r3, [pc, #280]	; (8006054 <xPortStartScheduler+0x120>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a46      	ldr	r2, [pc, #280]	; (8006058 <xPortStartScheduler+0x124>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d10a      	bne.n	8005f5a <xPortStartScheduler+0x26>
        __asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	613b      	str	r3, [r7, #16]
    }
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f5a:	4b3e      	ldr	r3, [pc, #248]	; (8006054 <xPortStartScheduler+0x120>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a3f      	ldr	r2, [pc, #252]	; (800605c <xPortStartScheduler+0x128>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10a      	bne.n	8005f7a <xPortStartScheduler+0x46>
        __asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	60fb      	str	r3, [r7, #12]
    }
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <xPortStartScheduler+0x12c>)
 8005f7c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	22ff      	movs	r2, #255	; 0xff
 8005f8a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	4b31      	ldr	r3, [pc, #196]	; (8006064 <xPortStartScheduler+0x130>)
 8005fa0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fa2:	4b31      	ldr	r3, [pc, #196]	; (8006068 <xPortStartScheduler+0x134>)
 8005fa4:	2207      	movs	r2, #7
 8005fa6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fa8:	e009      	b.n	8005fbe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <xPortStartScheduler+0x134>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	; (8006068 <xPortStartScheduler+0x134>)
 8005fb2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fbe:	78fb      	ldrb	r3, [r7, #3]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d0ef      	beq.n	8005faa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fca:	4b27      	ldr	r3, [pc, #156]	; (8006068 <xPortStartScheduler+0x134>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1c3 0307 	rsb	r3, r3, #7
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d00a      	beq.n	8005fec <xPortStartScheduler+0xb8>
        __asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60bb      	str	r3, [r7, #8]
    }
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <xPortStartScheduler+0x134>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <xPortStartScheduler+0x134>)
 8005ff4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <xPortStartScheduler+0x134>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ffe:	4a1a      	ldr	r2, [pc, #104]	; (8006068 <xPortStartScheduler+0x134>)
 8006000:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <xPortStartScheduler+0x138>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a17      	ldr	r2, [pc, #92]	; (800606c <xPortStartScheduler+0x138>)
 8006010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006014:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006016:	4b15      	ldr	r3, [pc, #84]	; (800606c <xPortStartScheduler+0x138>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a14      	ldr	r2, [pc, #80]	; (800606c <xPortStartScheduler+0x138>)
 800601c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006020:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006022:	f000 f8db 	bl	80061dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006026:	4b12      	ldr	r3, [pc, #72]	; (8006070 <xPortStartScheduler+0x13c>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800602c:	f000 f8fa 	bl	8006224 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <xPortStartScheduler+0x140>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <xPortStartScheduler+0x140>)
 8006036:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800603a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800603c:	f7ff ff64 	bl	8005f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006040:	f7ff fdb2 	bl	8005ba8 <vTaskSwitchContext>
    prvTaskExitError();
 8006044:	f7ff ff20 	bl	8005e88 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	e000ed00 	.word	0xe000ed00
 8006058:	410fc271 	.word	0x410fc271
 800605c:	410fc270 	.word	0x410fc270
 8006060:	e000e400 	.word	0xe000e400
 8006064:	20000754 	.word	0x20000754
 8006068:	20000758 	.word	0x20000758
 800606c:	e000ed20 	.word	0xe000ed20
 8006070:	20000020 	.word	0x20000020
 8006074:	e000ef34 	.word	0xe000ef34

08006078 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
        __asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	607b      	str	r3, [r7, #4]
    }
 8006090:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <vPortEnterCritical+0x58>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <vPortEnterCritical+0x58>)
 800609a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <vPortEnterCritical+0x58>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d10f      	bne.n	80060c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060a4:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <vPortEnterCritical+0x5c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	603b      	str	r3, [r7, #0]
    }
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <vPortEnterCritical+0x4a>
    }
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000020 	.word	0x20000020
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <vPortExitCritical+0x50>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <vPortExitCritical+0x24>
        __asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	607b      	str	r3, [r7, #4]
    }
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <vPortExitCritical+0x50>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3b01      	subs	r3, #1
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <vPortExitCritical+0x50>)
 8006104:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006106:	4b08      	ldr	r3, [pc, #32]	; (8006128 <vPortExitCritical+0x50>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d105      	bne.n	800611a <vPortExitCritical+0x42>
 800610e:	2300      	movs	r3, #0
 8006110:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006118:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000020 	.word	0x20000020
 800612c:	00000000 	.word	0x00000000

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f01e 0f10 	tst.w	lr, #16
 8006140:	bf08      	it	eq
 8006142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	6010      	str	r0, [r2, #0]
 800614c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006154:	f380 8811 	msr	BASEPRI, r0
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f7ff fd22 	bl	8005ba8 <vTaskSwitchContext>
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f380 8811 	msr	BASEPRI, r0
 800616c:	bc09      	pop	{r0, r3}
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	6808      	ldr	r0, [r1, #0]
 8006172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006176:	f01e 0f10 	tst.w	lr, #16
 800617a:	bf08      	it	eq
 800617c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006180:	f380 8809 	msr	PSP, r0
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst>:
 8006190:	20000628 	.word	0x20000628
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
        __asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
    }
 80061b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80061b2:	f7ff fbe3 	bl	800597c <xTaskIncrementTick>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <SysTick_Handler+0x40>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	2300      	movs	r3, #0
 80061c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f383 8811 	msr	BASEPRI, r3
    }
 80061ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <vPortSetupTimerInterrupt+0x34>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <vPortSetupTimerInterrupt+0x38>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <vPortSetupTimerInterrupt+0x3c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <vPortSetupTimerInterrupt+0x40>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <vPortSetupTimerInterrupt+0x44>)
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061fe:	4b04      	ldr	r3, [pc, #16]	; (8006210 <vPortSetupTimerInterrupt+0x34>)
 8006200:	2207      	movs	r2, #7
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e010 	.word	0xe000e010
 8006214:	e000e018 	.word	0xe000e018
 8006218:	20000010 	.word	0x20000010
 800621c:	10624dd3 	.word	0x10624dd3
 8006220:	e000e014 	.word	0xe000e014

08006224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006234 <vPortEnableVFP+0x10>
 8006228:	6801      	ldr	r1, [r0, #0]
 800622a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800622e:	6001      	str	r1, [r0, #0]
 8006230:	4770      	bx	lr
 8006232:	0000      	.short	0x0000
 8006234:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop

0800623c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	; 0x28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006248:	f7ff fa8e 	bl	8005768 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800624c:	4b53      	ldr	r3, [pc, #332]	; (800639c <pvPortMalloc+0x160>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006254:	f000 f908 	bl	8006468 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d012      	beq.n	8006284 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800625e:	2208      	movs	r2, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	3308      	adds	r3, #8
 800626a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	43db      	mvns	r3, r3
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d804      	bhi.n	8006280 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	4413      	add	r3, r2
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e001      	b.n	8006284 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	db70      	blt.n	800636c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d06d      	beq.n	800636c <pvPortMalloc+0x130>
 8006290:	4b43      	ldr	r3, [pc, #268]	; (80063a0 <pvPortMalloc+0x164>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d868      	bhi.n	800636c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800629a:	4b42      	ldr	r3, [pc, #264]	; (80063a4 <pvPortMalloc+0x168>)
 800629c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800629e:	4b41      	ldr	r3, [pc, #260]	; (80063a4 <pvPortMalloc+0x168>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062a4:	e004      	b.n	80062b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d903      	bls.n	80062c2 <pvPortMalloc+0x86>
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f1      	bne.n	80062a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80062c2:	4b36      	ldr	r3, [pc, #216]	; (800639c <pvPortMalloc+0x160>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d04f      	beq.n	800636c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2208      	movs	r2, #8
 80062d2:	4413      	add	r3, r2
 80062d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	1ad2      	subs	r2, r2, r3
 80062e6:	2308      	movs	r3, #8
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d91f      	bls.n	800632e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <pvPortMalloc+0xda>
        __asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
    }
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	1ad2      	subs	r2, r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	f000 f8f9 	bl	8006520 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800632e:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <pvPortMalloc+0x164>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <pvPortMalloc+0x164>)
 800633a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800633c:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <pvPortMalloc+0x164>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <pvPortMalloc+0x16c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d203      	bcs.n	8006350 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006348:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <pvPortMalloc+0x164>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <pvPortMalloc+0x16c>)
 800634e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006362:	4b12      	ldr	r3, [pc, #72]	; (80063ac <pvPortMalloc+0x170>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	4a10      	ldr	r2, [pc, #64]	; (80063ac <pvPortMalloc+0x170>)
 800636a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800636c:	f7ff fa0a 	bl	8005784 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <pvPortMalloc+0x154>
        __asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60fb      	str	r3, [r7, #12]
    }
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <pvPortMalloc+0x152>
    return pvReturn;
 8006390:	69fb      	ldr	r3, [r7, #28]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3728      	adds	r7, #40	; 0x28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20004364 	.word	0x20004364
 80063a0:	20004368 	.word	0x20004368
 80063a4:	2000435c 	.word	0x2000435c
 80063a8:	2000436c 	.word	0x2000436c
 80063ac:	20004370 	.word	0x20004370

080063b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d049      	beq.n	8006456 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80063c2:	2308      	movs	r3, #8
 80063c4:	425b      	negs	r3, r3
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4413      	add	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db0a      	blt.n	80063ee <vPortFree+0x3e>
        __asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60fb      	str	r3, [r7, #12]
    }
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <vPortFree+0x5c>
        __asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60bb      	str	r3, [r7, #8]
    }
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	0fdb      	lsrs	r3, r3, #31
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01c      	beq.n	8006456 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d118      	bne.n	8006456 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006430:	f7ff f99a 	bl	8005768 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <vPortFree+0xb0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4413      	add	r3, r2
 800643e:	4a08      	ldr	r2, [pc, #32]	; (8006460 <vPortFree+0xb0>)
 8006440:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006442:	6938      	ldr	r0, [r7, #16]
 8006444:	f000 f86c 	bl	8006520 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <vPortFree+0xb4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	4a05      	ldr	r2, [pc, #20]	; (8006464 <vPortFree+0xb4>)
 8006450:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006452:	f7ff f997 	bl	8005784 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006456:	bf00      	nop
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20004368 	.word	0x20004368
 8006464:	20004374 	.word	0x20004374

08006468 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800646e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006472:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006474:	4b25      	ldr	r3, [pc, #148]	; (800650c <prvHeapInit+0xa4>)
 8006476:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3307      	adds	r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <prvHeapInit+0xa4>)
 8006498:	4413      	add	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064a0:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <prvHeapInit+0xa8>)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <prvHeapInit+0xa8>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80064b4:	2208      	movs	r2, #8
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0307 	bic.w	r3, r3, #7
 80064c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <prvHeapInit+0xac>)
 80064c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <prvHeapInit+0xac>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <prvHeapInit+0xac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	1ad2      	subs	r2, r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvHeapInit+0xac>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a08      	ldr	r2, [pc, #32]	; (8006518 <prvHeapInit+0xb0>)
 80064f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	4a07      	ldr	r2, [pc, #28]	; (800651c <prvHeapInit+0xb4>)
 80064fe:	6013      	str	r3, [r2, #0]
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	2000075c 	.word	0x2000075c
 8006510:	2000435c 	.word	0x2000435c
 8006514:	20004364 	.word	0x20004364
 8006518:	2000436c 	.word	0x2000436c
 800651c:	20004368 	.word	0x20004368

08006520 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006528:	4b28      	ldr	r3, [pc, #160]	; (80065cc <prvInsertBlockIntoFreeList+0xac>)
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e002      	b.n	8006534 <prvInsertBlockIntoFreeList+0x14>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d8f7      	bhi.n	800652e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4413      	add	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d108      	bne.n	8006562 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	441a      	add	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d118      	bne.n	80065a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <prvInsertBlockIntoFreeList+0xb0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d00d      	beq.n	800659e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	441a      	add	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e008      	b.n	80065b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <prvInsertBlockIntoFreeList+0xb0>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e003      	b.n	80065b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d002      	beq.n	80065be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000435c 	.word	0x2000435c
 80065d0:	20004364 	.word	0x20004364

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000024 	.word	0x20000024

080065e0 <std>:
 80065e0:	2300      	movs	r3, #0
 80065e2:	b510      	push	{r4, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ee:	6083      	str	r3, [r0, #8]
 80065f0:	8181      	strh	r1, [r0, #12]
 80065f2:	6643      	str	r3, [r0, #100]	; 0x64
 80065f4:	81c2      	strh	r2, [r0, #14]
 80065f6:	6183      	str	r3, [r0, #24]
 80065f8:	4619      	mov	r1, r3
 80065fa:	2208      	movs	r2, #8
 80065fc:	305c      	adds	r0, #92	; 0x5c
 80065fe:	f000 f91a 	bl	8006836 <memset>
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <std+0x38>)
 8006604:	6263      	str	r3, [r4, #36]	; 0x24
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <std+0x3c>)
 8006608:	62a3      	str	r3, [r4, #40]	; 0x28
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <std+0x40>)
 800660c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <std+0x44>)
 8006610:	6224      	str	r4, [r4, #32]
 8006612:	6323      	str	r3, [r4, #48]	; 0x30
 8006614:	bd10      	pop	{r4, pc}
 8006616:	bf00      	nop
 8006618:	08007379 	.word	0x08007379
 800661c:	0800739b 	.word	0x0800739b
 8006620:	080073d3 	.word	0x080073d3
 8006624:	080073f7 	.word	0x080073f7

08006628 <_cleanup_r>:
 8006628:	4901      	ldr	r1, [pc, #4]	; (8006630 <_cleanup_r+0x8>)
 800662a:	f000 b8af 	b.w	800678c <_fwalk_reent>
 800662e:	bf00      	nop
 8006630:	08008249 	.word	0x08008249

08006634 <__sfmoreglue>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	2268      	movs	r2, #104	; 0x68
 8006638:	1e4d      	subs	r5, r1, #1
 800663a:	4355      	muls	r5, r2
 800663c:	460e      	mov	r6, r1
 800663e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006642:	f000 f921 	bl	8006888 <_malloc_r>
 8006646:	4604      	mov	r4, r0
 8006648:	b140      	cbz	r0, 800665c <__sfmoreglue+0x28>
 800664a:	2100      	movs	r1, #0
 800664c:	e9c0 1600 	strd	r1, r6, [r0]
 8006650:	300c      	adds	r0, #12
 8006652:	60a0      	str	r0, [r4, #8]
 8006654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006658:	f000 f8ed 	bl	8006836 <memset>
 800665c:	4620      	mov	r0, r4
 800665e:	bd70      	pop	{r4, r5, r6, pc}

08006660 <__sfp_lock_acquire>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__sfp_lock_acquire+0x8>)
 8006662:	f000 b8d8 	b.w	8006816 <__retarget_lock_acquire_recursive>
 8006666:	bf00      	nop
 8006668:	20004379 	.word	0x20004379

0800666c <__sfp_lock_release>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__sfp_lock_release+0x8>)
 800666e:	f000 b8d3 	b.w	8006818 <__retarget_lock_release_recursive>
 8006672:	bf00      	nop
 8006674:	20004379 	.word	0x20004379

08006678 <__sinit_lock_acquire>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__sinit_lock_acquire+0x8>)
 800667a:	f000 b8cc 	b.w	8006816 <__retarget_lock_acquire_recursive>
 800667e:	bf00      	nop
 8006680:	2000437a 	.word	0x2000437a

08006684 <__sinit_lock_release>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__sinit_lock_release+0x8>)
 8006686:	f000 b8c7 	b.w	8006818 <__retarget_lock_release_recursive>
 800668a:	bf00      	nop
 800668c:	2000437a 	.word	0x2000437a

08006690 <__sinit>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	f7ff fff0 	bl	8006678 <__sinit_lock_acquire>
 8006698:	69a3      	ldr	r3, [r4, #24]
 800669a:	b11b      	cbz	r3, 80066a4 <__sinit+0x14>
 800669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a0:	f7ff bff0 	b.w	8006684 <__sinit_lock_release>
 80066a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066a8:	6523      	str	r3, [r4, #80]	; 0x50
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <__sinit+0x68>)
 80066ac:	4a13      	ldr	r2, [pc, #76]	; (80066fc <__sinit+0x6c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	bf04      	itt	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	61a3      	streq	r3, [r4, #24]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f820 	bl	8006700 <__sfp>
 80066c0:	6060      	str	r0, [r4, #4]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 f81c 	bl	8006700 <__sfp>
 80066c8:	60a0      	str	r0, [r4, #8]
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 f818 	bl	8006700 <__sfp>
 80066d0:	2200      	movs	r2, #0
 80066d2:	60e0      	str	r0, [r4, #12]
 80066d4:	2104      	movs	r1, #4
 80066d6:	6860      	ldr	r0, [r4, #4]
 80066d8:	f7ff ff82 	bl	80065e0 <std>
 80066dc:	68a0      	ldr	r0, [r4, #8]
 80066de:	2201      	movs	r2, #1
 80066e0:	2109      	movs	r1, #9
 80066e2:	f7ff ff7d 	bl	80065e0 <std>
 80066e6:	68e0      	ldr	r0, [r4, #12]
 80066e8:	2202      	movs	r2, #2
 80066ea:	2112      	movs	r1, #18
 80066ec:	f7ff ff78 	bl	80065e0 <std>
 80066f0:	2301      	movs	r3, #1
 80066f2:	61a3      	str	r3, [r4, #24]
 80066f4:	e7d2      	b.n	800669c <__sinit+0xc>
 80066f6:	bf00      	nop
 80066f8:	080095ec 	.word	0x080095ec
 80066fc:	08006629 	.word	0x08006629

08006700 <__sfp>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	4607      	mov	r7, r0
 8006704:	f7ff ffac 	bl	8006660 <__sfp_lock_acquire>
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <__sfp+0x84>)
 800670a:	681e      	ldr	r6, [r3, #0]
 800670c:	69b3      	ldr	r3, [r6, #24]
 800670e:	b913      	cbnz	r3, 8006716 <__sfp+0x16>
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff ffbd 	bl	8006690 <__sinit>
 8006716:	3648      	adds	r6, #72	; 0x48
 8006718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800671c:	3b01      	subs	r3, #1
 800671e:	d503      	bpl.n	8006728 <__sfp+0x28>
 8006720:	6833      	ldr	r3, [r6, #0]
 8006722:	b30b      	cbz	r3, 8006768 <__sfp+0x68>
 8006724:	6836      	ldr	r6, [r6, #0]
 8006726:	e7f7      	b.n	8006718 <__sfp+0x18>
 8006728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800672c:	b9d5      	cbnz	r5, 8006764 <__sfp+0x64>
 800672e:	4b16      	ldr	r3, [pc, #88]	; (8006788 <__sfp+0x88>)
 8006730:	60e3      	str	r3, [r4, #12]
 8006732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006736:	6665      	str	r5, [r4, #100]	; 0x64
 8006738:	f000 f86c 	bl	8006814 <__retarget_lock_init_recursive>
 800673c:	f7ff ff96 	bl	800666c <__sfp_lock_release>
 8006740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006748:	6025      	str	r5, [r4, #0]
 800674a:	61a5      	str	r5, [r4, #24]
 800674c:	2208      	movs	r2, #8
 800674e:	4629      	mov	r1, r5
 8006750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006754:	f000 f86f 	bl	8006836 <memset>
 8006758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800675c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006760:	4620      	mov	r0, r4
 8006762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006764:	3468      	adds	r4, #104	; 0x68
 8006766:	e7d9      	b.n	800671c <__sfp+0x1c>
 8006768:	2104      	movs	r1, #4
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff ff62 	bl	8006634 <__sfmoreglue>
 8006770:	4604      	mov	r4, r0
 8006772:	6030      	str	r0, [r6, #0]
 8006774:	2800      	cmp	r0, #0
 8006776:	d1d5      	bne.n	8006724 <__sfp+0x24>
 8006778:	f7ff ff78 	bl	800666c <__sfp_lock_release>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	e7ee      	b.n	8006760 <__sfp+0x60>
 8006782:	bf00      	nop
 8006784:	080095ec 	.word	0x080095ec
 8006788:	ffff0001 	.word	0xffff0001

0800678c <_fwalk_reent>:
 800678c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006790:	4606      	mov	r6, r0
 8006792:	4688      	mov	r8, r1
 8006794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006798:	2700      	movs	r7, #0
 800679a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800679e:	f1b9 0901 	subs.w	r9, r9, #1
 80067a2:	d505      	bpl.n	80067b0 <_fwalk_reent+0x24>
 80067a4:	6824      	ldr	r4, [r4, #0]
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d1f7      	bne.n	800679a <_fwalk_reent+0xe>
 80067aa:	4638      	mov	r0, r7
 80067ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067b0:	89ab      	ldrh	r3, [r5, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d907      	bls.n	80067c6 <_fwalk_reent+0x3a>
 80067b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ba:	3301      	adds	r3, #1
 80067bc:	d003      	beq.n	80067c6 <_fwalk_reent+0x3a>
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	47c0      	blx	r8
 80067c4:	4307      	orrs	r7, r0
 80067c6:	3568      	adds	r5, #104	; 0x68
 80067c8:	e7e9      	b.n	800679e <_fwalk_reent+0x12>
	...

080067cc <__libc_init_array>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4d0d      	ldr	r5, [pc, #52]	; (8006804 <__libc_init_array+0x38>)
 80067d0:	4c0d      	ldr	r4, [pc, #52]	; (8006808 <__libc_init_array+0x3c>)
 80067d2:	1b64      	subs	r4, r4, r5
 80067d4:	10a4      	asrs	r4, r4, #2
 80067d6:	2600      	movs	r6, #0
 80067d8:	42a6      	cmp	r6, r4
 80067da:	d109      	bne.n	80067f0 <__libc_init_array+0x24>
 80067dc:	4d0b      	ldr	r5, [pc, #44]	; (800680c <__libc_init_array+0x40>)
 80067de:	4c0c      	ldr	r4, [pc, #48]	; (8006810 <__libc_init_array+0x44>)
 80067e0:	f002 fe86 	bl	80094f0 <_init>
 80067e4:	1b64      	subs	r4, r4, r5
 80067e6:	10a4      	asrs	r4, r4, #2
 80067e8:	2600      	movs	r6, #0
 80067ea:	42a6      	cmp	r6, r4
 80067ec:	d105      	bne.n	80067fa <__libc_init_array+0x2e>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f4:	4798      	blx	r3
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7ee      	b.n	80067d8 <__libc_init_array+0xc>
 80067fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fe:	4798      	blx	r3
 8006800:	3601      	adds	r6, #1
 8006802:	e7f2      	b.n	80067ea <__libc_init_array+0x1e>
 8006804:	0800996c 	.word	0x0800996c
 8006808:	0800996c 	.word	0x0800996c
 800680c:	0800996c 	.word	0x0800996c
 8006810:	08009970 	.word	0x08009970

08006814 <__retarget_lock_init_recursive>:
 8006814:	4770      	bx	lr

08006816 <__retarget_lock_acquire_recursive>:
 8006816:	4770      	bx	lr

08006818 <__retarget_lock_release_recursive>:
 8006818:	4770      	bx	lr

0800681a <memcpy>:
 800681a:	440a      	add	r2, r1
 800681c:	4291      	cmp	r1, r2
 800681e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006822:	d100      	bne.n	8006826 <memcpy+0xc>
 8006824:	4770      	bx	lr
 8006826:	b510      	push	{r4, lr}
 8006828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800682c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006830:	4291      	cmp	r1, r2
 8006832:	d1f9      	bne.n	8006828 <memcpy+0xe>
 8006834:	bd10      	pop	{r4, pc}

08006836 <memset>:
 8006836:	4402      	add	r2, r0
 8006838:	4603      	mov	r3, r0
 800683a:	4293      	cmp	r3, r2
 800683c:	d100      	bne.n	8006840 <memset+0xa>
 800683e:	4770      	bx	lr
 8006840:	f803 1b01 	strb.w	r1, [r3], #1
 8006844:	e7f9      	b.n	800683a <memset+0x4>
	...

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 fd60 	bl	8007318 <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 fd5b 	bl	8007318 <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 fd50 	bl	8007318 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	20004380 	.word	0x20004380

08006888 <_malloc_r>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2600      	movs	r6, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4e2e      	ldr	r6, [pc, #184]	; (800696c <_malloc_r+0xe4>)
 80068b2:	f001 fd23 	bl	80082fc <__malloc_lock>
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	461c      	mov	r4, r3
 80068ba:	bb34      	cbnz	r4, 800690a <_malloc_r+0x82>
 80068bc:	4629      	mov	r1, r5
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ffc2 	bl	8006848 <sbrk_aligned>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	4604      	mov	r4, r0
 80068c8:	d14d      	bne.n	8006966 <_malloc_r+0xde>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	4626      	mov	r6, r4
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d140      	bne.n	8006954 <_malloc_r+0xcc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4638      	mov	r0, r7
 80068d8:	eb04 0803 	add.w	r8, r4, r3
 80068dc:	f000 fd1c 	bl	8007318 <_sbrk_r>
 80068e0:	4580      	cmp	r8, r0
 80068e2:	d13a      	bne.n	800695a <_malloc_r+0xd2>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	3503      	adds	r5, #3
 80068e8:	1a6d      	subs	r5, r5, r1
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	4629      	mov	r1, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ffa5 	bl	8006848 <sbrk_aligned>
 80068fe:	3001      	adds	r0, #1
 8006900:	d02b      	beq.n	800695a <_malloc_r+0xd2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	442b      	add	r3, r5
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e00e      	b.n	8006928 <_malloc_r+0xa0>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	d41e      	bmi.n	800694e <_malloc_r+0xc6>
 8006910:	2a0b      	cmp	r2, #11
 8006912:	d916      	bls.n	8006942 <_malloc_r+0xba>
 8006914:	1961      	adds	r1, r4, r5
 8006916:	42a3      	cmp	r3, r4
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	bf18      	it	ne
 800691c:	6059      	strne	r1, [r3, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	bf08      	it	eq
 8006922:	6031      	streq	r1, [r6, #0]
 8006924:	5162      	str	r2, [r4, r5]
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	4638      	mov	r0, r7
 800692a:	f104 060b 	add.w	r6, r4, #11
 800692e:	f001 fceb 	bl	8008308 <__malloc_unlock>
 8006932:	f026 0607 	bic.w	r6, r6, #7
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	1af2      	subs	r2, r6, r3
 800693a:	d0b6      	beq.n	80068aa <_malloc_r+0x22>
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	50a3      	str	r3, [r4, r2]
 8006940:	e7b3      	b.n	80068aa <_malloc_r+0x22>
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	42a3      	cmp	r3, r4
 8006946:	bf0c      	ite	eq
 8006948:	6032      	streq	r2, [r6, #0]
 800694a:	605a      	strne	r2, [r3, #4]
 800694c:	e7ec      	b.n	8006928 <_malloc_r+0xa0>
 800694e:	4623      	mov	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7b2      	b.n	80068ba <_malloc_r+0x32>
 8006954:	4634      	mov	r4, r6
 8006956:	6876      	ldr	r6, [r6, #4]
 8006958:	e7b9      	b.n	80068ce <_malloc_r+0x46>
 800695a:	230c      	movs	r3, #12
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4638      	mov	r0, r7
 8006960:	f001 fcd2 	bl	8008308 <__malloc_unlock>
 8006964:	e7a1      	b.n	80068aa <_malloc_r+0x22>
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	e7de      	b.n	8006928 <_malloc_r+0xa0>
 800696a:	bf00      	nop
 800696c:	2000437c 	.word	0x2000437c

08006970 <__cvt>:
 8006970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	ec55 4b10 	vmov	r4, r5, d0
 8006978:	2d00      	cmp	r5, #0
 800697a:	460e      	mov	r6, r1
 800697c:	4619      	mov	r1, r3
 800697e:	462b      	mov	r3, r5
 8006980:	bfbb      	ittet	lt
 8006982:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006986:	461d      	movlt	r5, r3
 8006988:	2300      	movge	r3, #0
 800698a:	232d      	movlt	r3, #45	; 0x2d
 800698c:	700b      	strb	r3, [r1, #0]
 800698e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006990:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006994:	4691      	mov	r9, r2
 8006996:	f023 0820 	bic.w	r8, r3, #32
 800699a:	bfbc      	itt	lt
 800699c:	4622      	movlt	r2, r4
 800699e:	4614      	movlt	r4, r2
 80069a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069a4:	d005      	beq.n	80069b2 <__cvt+0x42>
 80069a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069aa:	d100      	bne.n	80069ae <__cvt+0x3e>
 80069ac:	3601      	adds	r6, #1
 80069ae:	2102      	movs	r1, #2
 80069b0:	e000      	b.n	80069b4 <__cvt+0x44>
 80069b2:	2103      	movs	r1, #3
 80069b4:	ab03      	add	r3, sp, #12
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	ab02      	add	r3, sp, #8
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	ec45 4b10 	vmov	d0, r4, r5
 80069c0:	4653      	mov	r3, sl
 80069c2:	4632      	mov	r2, r6
 80069c4:	f000 fdcc 	bl	8007560 <_dtoa_r>
 80069c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069cc:	4607      	mov	r7, r0
 80069ce:	d102      	bne.n	80069d6 <__cvt+0x66>
 80069d0:	f019 0f01 	tst.w	r9, #1
 80069d4:	d022      	beq.n	8006a1c <__cvt+0xac>
 80069d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069da:	eb07 0906 	add.w	r9, r7, r6
 80069de:	d110      	bne.n	8006a02 <__cvt+0x92>
 80069e0:	783b      	ldrb	r3, [r7, #0]
 80069e2:	2b30      	cmp	r3, #48	; 0x30
 80069e4:	d10a      	bne.n	80069fc <__cvt+0x8c>
 80069e6:	2200      	movs	r2, #0
 80069e8:	2300      	movs	r3, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7fa f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80069f2:	b918      	cbnz	r0, 80069fc <__cvt+0x8c>
 80069f4:	f1c6 0601 	rsb	r6, r6, #1
 80069f8:	f8ca 6000 	str.w	r6, [sl]
 80069fc:	f8da 3000 	ldr.w	r3, [sl]
 8006a00:	4499      	add	r9, r3
 8006a02:	2200      	movs	r2, #0
 8006a04:	2300      	movs	r3, #0
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7fa f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a0e:	b108      	cbz	r0, 8006a14 <__cvt+0xa4>
 8006a10:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a14:	2230      	movs	r2, #48	; 0x30
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	454b      	cmp	r3, r9
 8006a1a:	d307      	bcc.n	8006a2c <__cvt+0xbc>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a20:	1bdb      	subs	r3, r3, r7
 8006a22:	4638      	mov	r0, r7
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	b004      	add	sp, #16
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	9103      	str	r1, [sp, #12]
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	e7f0      	b.n	8006a16 <__cvt+0xa6>

08006a34 <__exponent>:
 8006a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a36:	4603      	mov	r3, r0
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	bfb8      	it	lt
 8006a3c:	4249      	neglt	r1, r1
 8006a3e:	f803 2b02 	strb.w	r2, [r3], #2
 8006a42:	bfb4      	ite	lt
 8006a44:	222d      	movlt	r2, #45	; 0x2d
 8006a46:	222b      	movge	r2, #43	; 0x2b
 8006a48:	2909      	cmp	r1, #9
 8006a4a:	7042      	strb	r2, [r0, #1]
 8006a4c:	dd2a      	ble.n	8006aa4 <__exponent+0x70>
 8006a4e:	f10d 0407 	add.w	r4, sp, #7
 8006a52:	46a4      	mov	ip, r4
 8006a54:	270a      	movs	r7, #10
 8006a56:	46a6      	mov	lr, r4
 8006a58:	460a      	mov	r2, r1
 8006a5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a5e:	fb07 1516 	mls	r5, r7, r6, r1
 8006a62:	3530      	adds	r5, #48	; 0x30
 8006a64:	2a63      	cmp	r2, #99	; 0x63
 8006a66:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a6e:	4631      	mov	r1, r6
 8006a70:	dcf1      	bgt.n	8006a56 <__exponent+0x22>
 8006a72:	3130      	adds	r1, #48	; 0x30
 8006a74:	f1ae 0502 	sub.w	r5, lr, #2
 8006a78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a7c:	1c44      	adds	r4, r0, #1
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4561      	cmp	r1, ip
 8006a82:	d30a      	bcc.n	8006a9a <__exponent+0x66>
 8006a84:	f10d 0209 	add.w	r2, sp, #9
 8006a88:	eba2 020e 	sub.w	r2, r2, lr
 8006a8c:	4565      	cmp	r5, ip
 8006a8e:	bf88      	it	hi
 8006a90:	2200      	movhi	r2, #0
 8006a92:	4413      	add	r3, r2
 8006a94:	1a18      	subs	r0, r3, r0
 8006a96:	b003      	add	sp, #12
 8006a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006aa2:	e7ed      	b.n	8006a80 <__exponent+0x4c>
 8006aa4:	2330      	movs	r3, #48	; 0x30
 8006aa6:	3130      	adds	r1, #48	; 0x30
 8006aa8:	7083      	strb	r3, [r0, #2]
 8006aaa:	70c1      	strb	r1, [r0, #3]
 8006aac:	1d03      	adds	r3, r0, #4
 8006aae:	e7f1      	b.n	8006a94 <__exponent+0x60>

08006ab0 <_printf_float>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	ed2d 8b02 	vpush	{d8}
 8006ab8:	b08d      	sub	sp, #52	; 0x34
 8006aba:	460c      	mov	r4, r1
 8006abc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	f001 fbfb 	bl	80082c0 <_localeconv_r>
 8006aca:	f8d0 a000 	ldr.w	sl, [r0]
 8006ace:	4650      	mov	r0, sl
 8006ad0:	f7f9 fb86 	bl	80001e0 <strlen>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ae4:	3307      	adds	r3, #7
 8006ae6:	f023 0307 	bic.w	r3, r3, #7
 8006aea:	f103 0208 	add.w	r2, r3, #8
 8006aee:	f8c8 2000 	str.w	r2, [r8]
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006afa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006afe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b08:	ee08 0a10 	vmov	s16, r0
 8006b0c:	4b9f      	ldr	r3, [pc, #636]	; (8006d8c <_printf_float+0x2dc>)
 8006b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	f7fa f811 	bl	8000b3c <__aeabi_dcmpun>
 8006b1a:	bb88      	cbnz	r0, 8006b80 <_printf_float+0xd0>
 8006b1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b20:	4b9a      	ldr	r3, [pc, #616]	; (8006d8c <_printf_float+0x2dc>)
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295
 8006b26:	f7f9 ffeb 	bl	8000b00 <__aeabi_dcmple>
 8006b2a:	bb48      	cbnz	r0, 8006b80 <_printf_float+0xd0>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4640      	mov	r0, r8
 8006b32:	4649      	mov	r1, r9
 8006b34:	f7f9 ffda 	bl	8000aec <__aeabi_dcmplt>
 8006b38:	b110      	cbz	r0, 8006b40 <_printf_float+0x90>
 8006b3a:	232d      	movs	r3, #45	; 0x2d
 8006b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b40:	4b93      	ldr	r3, [pc, #588]	; (8006d90 <_printf_float+0x2e0>)
 8006b42:	4894      	ldr	r0, [pc, #592]	; (8006d94 <_printf_float+0x2e4>)
 8006b44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b48:	bf94      	ite	ls
 8006b4a:	4698      	movls	r8, r3
 8006b4c:	4680      	movhi	r8, r0
 8006b4e:	2303      	movs	r3, #3
 8006b50:	6123      	str	r3, [r4, #16]
 8006b52:	9b05      	ldr	r3, [sp, #20]
 8006b54:	f023 0204 	bic.w	r2, r3, #4
 8006b58:	6022      	str	r2, [r4, #0]
 8006b5a:	f04f 0900 	mov.w	r9, #0
 8006b5e:	9700      	str	r7, [sp, #0]
 8006b60:	4633      	mov	r3, r6
 8006b62:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b64:	4621      	mov	r1, r4
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f9d8 	bl	8006f1c <_printf_common>
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f040 8090 	bne.w	8006c92 <_printf_float+0x1e2>
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	b00d      	add	sp, #52	; 0x34
 8006b78:	ecbd 8b02 	vpop	{d8}
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	4649      	mov	r1, r9
 8006b88:	f7f9 ffd8 	bl	8000b3c <__aeabi_dcmpun>
 8006b8c:	b140      	cbz	r0, 8006ba0 <_printf_float+0xf0>
 8006b8e:	464b      	mov	r3, r9
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bfbc      	itt	lt
 8006b94:	232d      	movlt	r3, #45	; 0x2d
 8006b96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b9a:	487f      	ldr	r0, [pc, #508]	; (8006d98 <_printf_float+0x2e8>)
 8006b9c:	4b7f      	ldr	r3, [pc, #508]	; (8006d9c <_printf_float+0x2ec>)
 8006b9e:	e7d1      	b.n	8006b44 <_printf_float+0x94>
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ba6:	9206      	str	r2, [sp, #24]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	d13f      	bne.n	8006c2c <_printf_float+0x17c>
 8006bac:	2306      	movs	r3, #6
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	9b05      	ldr	r3, [sp, #20]
 8006bb2:	6861      	ldr	r1, [r4, #4]
 8006bb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	ab0a      	add	r3, sp, #40	; 0x28
 8006bbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bc2:	ab09      	add	r3, sp, #36	; 0x24
 8006bc4:	ec49 8b10 	vmov	d0, r8, r9
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f7ff fecd 	bl	8006970 <__cvt>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bda:	2b47      	cmp	r3, #71	; 0x47
 8006bdc:	4680      	mov	r8, r0
 8006bde:	d108      	bne.n	8006bf2 <_printf_float+0x142>
 8006be0:	1cc8      	adds	r0, r1, #3
 8006be2:	db02      	blt.n	8006bea <_printf_float+0x13a>
 8006be4:	6863      	ldr	r3, [r4, #4]
 8006be6:	4299      	cmp	r1, r3
 8006be8:	dd41      	ble.n	8006c6e <_printf_float+0x1be>
 8006bea:	f1ab 0b02 	sub.w	fp, fp, #2
 8006bee:	fa5f fb8b 	uxtb.w	fp, fp
 8006bf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bf6:	d820      	bhi.n	8006c3a <_printf_float+0x18a>
 8006bf8:	3901      	subs	r1, #1
 8006bfa:	465a      	mov	r2, fp
 8006bfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c00:	9109      	str	r1, [sp, #36]	; 0x24
 8006c02:	f7ff ff17 	bl	8006a34 <__exponent>
 8006c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c08:	1813      	adds	r3, r2, r0
 8006c0a:	2a01      	cmp	r2, #1
 8006c0c:	4681      	mov	r9, r0
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	dc02      	bgt.n	8006c18 <_printf_float+0x168>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	07d2      	lsls	r2, r2, #31
 8006c16:	d501      	bpl.n	8006c1c <_printf_float+0x16c>
 8006c18:	3301      	adds	r3, #1
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d09c      	beq.n	8006b5e <_printf_float+0xae>
 8006c24:	232d      	movs	r3, #45	; 0x2d
 8006c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c2a:	e798      	b.n	8006b5e <_printf_float+0xae>
 8006c2c:	9a06      	ldr	r2, [sp, #24]
 8006c2e:	2a47      	cmp	r2, #71	; 0x47
 8006c30:	d1be      	bne.n	8006bb0 <_printf_float+0x100>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1bc      	bne.n	8006bb0 <_printf_float+0x100>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e7b9      	b.n	8006bae <_printf_float+0xfe>
 8006c3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c3e:	d118      	bne.n	8006c72 <_printf_float+0x1c2>
 8006c40:	2900      	cmp	r1, #0
 8006c42:	6863      	ldr	r3, [r4, #4]
 8006c44:	dd0b      	ble.n	8006c5e <_printf_float+0x1ae>
 8006c46:	6121      	str	r1, [r4, #16]
 8006c48:	b913      	cbnz	r3, 8006c50 <_printf_float+0x1a0>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	07d0      	lsls	r0, r2, #31
 8006c4e:	d502      	bpl.n	8006c56 <_printf_float+0x1a6>
 8006c50:	3301      	adds	r3, #1
 8006c52:	440b      	add	r3, r1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c58:	f04f 0900 	mov.w	r9, #0
 8006c5c:	e7de      	b.n	8006c1c <_printf_float+0x16c>
 8006c5e:	b913      	cbnz	r3, 8006c66 <_printf_float+0x1b6>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	07d2      	lsls	r2, r2, #31
 8006c64:	d501      	bpl.n	8006c6a <_printf_float+0x1ba>
 8006c66:	3302      	adds	r3, #2
 8006c68:	e7f4      	b.n	8006c54 <_printf_float+0x1a4>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e7f2      	b.n	8006c54 <_printf_float+0x1a4>
 8006c6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c74:	4299      	cmp	r1, r3
 8006c76:	db05      	blt.n	8006c84 <_printf_float+0x1d4>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	6121      	str	r1, [r4, #16]
 8006c7c:	07d8      	lsls	r0, r3, #31
 8006c7e:	d5ea      	bpl.n	8006c56 <_printf_float+0x1a6>
 8006c80:	1c4b      	adds	r3, r1, #1
 8006c82:	e7e7      	b.n	8006c54 <_printf_float+0x1a4>
 8006c84:	2900      	cmp	r1, #0
 8006c86:	bfd4      	ite	le
 8006c88:	f1c1 0202 	rsble	r2, r1, #2
 8006c8c:	2201      	movgt	r2, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	e7e0      	b.n	8006c54 <_printf_float+0x1a4>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	055a      	lsls	r2, r3, #21
 8006c96:	d407      	bmi.n	8006ca8 <_printf_float+0x1f8>
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d12c      	bne.n	8006d00 <_printf_float+0x250>
 8006ca6:	e764      	b.n	8006b72 <_printf_float+0xc2>
 8006ca8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cac:	f240 80e0 	bls.w	8006e70 <_printf_float+0x3c0>
 8006cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f7f9 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d034      	beq.n	8006d2a <_printf_float+0x27a>
 8006cc0:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <_printf_float+0x2f0>)
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f43f af51 	beq.w	8006b72 <_printf_float+0xc2>
 8006cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	db02      	blt.n	8006cde <_printf_float+0x22e>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	07d8      	lsls	r0, r3, #31
 8006cdc:	d510      	bpl.n	8006d00 <_printf_float+0x250>
 8006cde:	ee18 3a10 	vmov	r3, s16
 8006ce2:	4652      	mov	r2, sl
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	f43f af41 	beq.w	8006b72 <_printf_float+0xc2>
 8006cf0:	f04f 0800 	mov.w	r8, #0
 8006cf4:	f104 091a 	add.w	r9, r4, #26
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	4543      	cmp	r3, r8
 8006cfe:	dc09      	bgt.n	8006d14 <_printf_float+0x264>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	079b      	lsls	r3, r3, #30
 8006d04:	f100 8105 	bmi.w	8006f12 <_printf_float+0x462>
 8006d08:	68e0      	ldr	r0, [r4, #12]
 8006d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0c:	4298      	cmp	r0, r3
 8006d0e:	bfb8      	it	lt
 8006d10:	4618      	movlt	r0, r3
 8006d12:	e730      	b.n	8006b76 <_printf_float+0xc6>
 8006d14:	2301      	movs	r3, #1
 8006d16:	464a      	mov	r2, r9
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af27 	beq.w	8006b72 <_printf_float+0xc2>
 8006d24:	f108 0801 	add.w	r8, r8, #1
 8006d28:	e7e6      	b.n	8006cf8 <_printf_float+0x248>
 8006d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dc39      	bgt.n	8006da4 <_printf_float+0x2f4>
 8006d30:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <_printf_float+0x2f0>)
 8006d32:	2301      	movs	r3, #1
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af19 	beq.w	8006b72 <_printf_float+0xc2>
 8006d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d102      	bne.n	8006d4e <_printf_float+0x29e>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d5d8      	bpl.n	8006d00 <_printf_float+0x250>
 8006d4e:	ee18 3a10 	vmov	r3, s16
 8006d52:	4652      	mov	r2, sl
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af09 	beq.w	8006b72 <_printf_float+0xc2>
 8006d60:	f04f 0900 	mov.w	r9, #0
 8006d64:	f104 0a1a 	add.w	sl, r4, #26
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	425b      	negs	r3, r3
 8006d6c:	454b      	cmp	r3, r9
 8006d6e:	dc01      	bgt.n	8006d74 <_printf_float+0x2c4>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	e792      	b.n	8006c9a <_printf_float+0x1ea>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4652      	mov	r2, sl
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f aef7 	beq.w	8006b72 <_printf_float+0xc2>
 8006d84:	f109 0901 	add.w	r9, r9, #1
 8006d88:	e7ee      	b.n	8006d68 <_printf_float+0x2b8>
 8006d8a:	bf00      	nop
 8006d8c:	7fefffff 	.word	0x7fefffff
 8006d90:	080095f0 	.word	0x080095f0
 8006d94:	080095f4 	.word	0x080095f4
 8006d98:	080095fc 	.word	0x080095fc
 8006d9c:	080095f8 	.word	0x080095f8
 8006da0:	08009600 	.word	0x08009600
 8006da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da8:	429a      	cmp	r2, r3
 8006daa:	bfa8      	it	ge
 8006dac:	461a      	movge	r2, r3
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	4691      	mov	r9, r2
 8006db2:	dc37      	bgt.n	8006e24 <_printf_float+0x374>
 8006db4:	f04f 0b00 	mov.w	fp, #0
 8006db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dbc:	f104 021a 	add.w	r2, r4, #26
 8006dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	eba3 0309 	sub.w	r3, r3, r9
 8006dc8:	455b      	cmp	r3, fp
 8006dca:	dc33      	bgt.n	8006e34 <_printf_float+0x384>
 8006dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	db3b      	blt.n	8006e4c <_printf_float+0x39c>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	07da      	lsls	r2, r3, #31
 8006dd8:	d438      	bmi.n	8006e4c <_printf_float+0x39c>
 8006dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ddc:	9a05      	ldr	r2, [sp, #20]
 8006dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006de0:	1a9a      	subs	r2, r3, r2
 8006de2:	eba3 0901 	sub.w	r9, r3, r1
 8006de6:	4591      	cmp	r9, r2
 8006de8:	bfa8      	it	ge
 8006dea:	4691      	movge	r9, r2
 8006dec:	f1b9 0f00 	cmp.w	r9, #0
 8006df0:	dc35      	bgt.n	8006e5e <_printf_float+0x3ae>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dfa:	f104 0a1a 	add.w	sl, r4, #26
 8006dfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e02:	1a9b      	subs	r3, r3, r2
 8006e04:	eba3 0309 	sub.w	r3, r3, r9
 8006e08:	4543      	cmp	r3, r8
 8006e0a:	f77f af79 	ble.w	8006d00 <_printf_float+0x250>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4652      	mov	r2, sl
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f aeaa 	beq.w	8006b72 <_printf_float+0xc2>
 8006e1e:	f108 0801 	add.w	r8, r8, #1
 8006e22:	e7ec      	b.n	8006dfe <_printf_float+0x34e>
 8006e24:	4613      	mov	r3, r2
 8006e26:	4631      	mov	r1, r6
 8006e28:	4642      	mov	r2, r8
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d1c0      	bne.n	8006db4 <_printf_float+0x304>
 8006e32:	e69e      	b.n	8006b72 <_printf_float+0xc2>
 8006e34:	2301      	movs	r3, #1
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	9205      	str	r2, [sp, #20]
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f ae97 	beq.w	8006b72 <_printf_float+0xc2>
 8006e44:	9a05      	ldr	r2, [sp, #20]
 8006e46:	f10b 0b01 	add.w	fp, fp, #1
 8006e4a:	e7b9      	b.n	8006dc0 <_printf_float+0x310>
 8006e4c:	ee18 3a10 	vmov	r3, s16
 8006e50:	4652      	mov	r2, sl
 8006e52:	4631      	mov	r1, r6
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d1be      	bne.n	8006dda <_printf_float+0x32a>
 8006e5c:	e689      	b.n	8006b72 <_printf_float+0xc2>
 8006e5e:	9a05      	ldr	r2, [sp, #20]
 8006e60:	464b      	mov	r3, r9
 8006e62:	4442      	add	r2, r8
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d1c1      	bne.n	8006df2 <_printf_float+0x342>
 8006e6e:	e680      	b.n	8006b72 <_printf_float+0xc2>
 8006e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e72:	2a01      	cmp	r2, #1
 8006e74:	dc01      	bgt.n	8006e7a <_printf_float+0x3ca>
 8006e76:	07db      	lsls	r3, r3, #31
 8006e78:	d538      	bpl.n	8006eec <_printf_float+0x43c>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae74 	beq.w	8006b72 <_printf_float+0xc2>
 8006e8a:	ee18 3a10 	vmov	r3, s16
 8006e8e:	4652      	mov	r2, sl
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f ae6b 	beq.w	8006b72 <_printf_float+0xc2>
 8006e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f7f9 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ea8:	b9d8      	cbnz	r0, 8006ee2 <_printf_float+0x432>
 8006eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eac:	f108 0201 	add.w	r2, r8, #1
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d10e      	bne.n	8006eda <_printf_float+0x42a>
 8006ebc:	e659      	b.n	8006b72 <_printf_float+0xc2>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4652      	mov	r2, sl
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	f43f ae52 	beq.w	8006b72 <_printf_float+0xc2>
 8006ece:	f108 0801 	add.w	r8, r8, #1
 8006ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4543      	cmp	r3, r8
 8006ed8:	dcf1      	bgt.n	8006ebe <_printf_float+0x40e>
 8006eda:	464b      	mov	r3, r9
 8006edc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ee0:	e6dc      	b.n	8006c9c <_printf_float+0x1ec>
 8006ee2:	f04f 0800 	mov.w	r8, #0
 8006ee6:	f104 0a1a 	add.w	sl, r4, #26
 8006eea:	e7f2      	b.n	8006ed2 <_printf_float+0x422>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4642      	mov	r2, r8
 8006ef0:	e7df      	b.n	8006eb2 <_printf_float+0x402>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	464a      	mov	r2, r9
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f ae38 	beq.w	8006b72 <_printf_float+0xc2>
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f0a:	1a5b      	subs	r3, r3, r1
 8006f0c:	4543      	cmp	r3, r8
 8006f0e:	dcf0      	bgt.n	8006ef2 <_printf_float+0x442>
 8006f10:	e6fa      	b.n	8006d08 <_printf_float+0x258>
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	f104 0919 	add.w	r9, r4, #25
 8006f1a:	e7f4      	b.n	8006f06 <_printf_float+0x456>

08006f1c <_printf_common>:
 8006f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	4616      	mov	r6, r2
 8006f22:	4699      	mov	r9, r3
 8006f24:	688a      	ldr	r2, [r1, #8]
 8006f26:	690b      	ldr	r3, [r1, #16]
 8006f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bfb8      	it	lt
 8006f30:	4613      	movlt	r3, r2
 8006f32:	6033      	str	r3, [r6, #0]
 8006f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f38:	4607      	mov	r7, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	b10a      	cbz	r2, 8006f42 <_printf_common+0x26>
 8006f3e:	3301      	adds	r3, #1
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	0699      	lsls	r1, r3, #26
 8006f46:	bf42      	ittt	mi
 8006f48:	6833      	ldrmi	r3, [r6, #0]
 8006f4a:	3302      	addmi	r3, #2
 8006f4c:	6033      	strmi	r3, [r6, #0]
 8006f4e:	6825      	ldr	r5, [r4, #0]
 8006f50:	f015 0506 	ands.w	r5, r5, #6
 8006f54:	d106      	bne.n	8006f64 <_printf_common+0x48>
 8006f56:	f104 0a19 	add.w	sl, r4, #25
 8006f5a:	68e3      	ldr	r3, [r4, #12]
 8006f5c:	6832      	ldr	r2, [r6, #0]
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	dc26      	bgt.n	8006fb2 <_printf_common+0x96>
 8006f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f68:	1e13      	subs	r3, r2, #0
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	bf18      	it	ne
 8006f6e:	2301      	movne	r3, #1
 8006f70:	0692      	lsls	r2, r2, #26
 8006f72:	d42b      	bmi.n	8006fcc <_printf_common+0xb0>
 8006f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	47c0      	blx	r8
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d01e      	beq.n	8006fc0 <_printf_common+0xa4>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	68e5      	ldr	r5, [r4, #12]
 8006f86:	6832      	ldr	r2, [r6, #0]
 8006f88:	f003 0306 	and.w	r3, r3, #6
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	bf08      	it	eq
 8006f90:	1aad      	subeq	r5, r5, r2
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	bf0c      	ite	eq
 8006f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f9c:	2500      	movne	r5, #0
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	bfc4      	itt	gt
 8006fa2:	1a9b      	subgt	r3, r3, r2
 8006fa4:	18ed      	addgt	r5, r5, r3
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	341a      	adds	r4, #26
 8006faa:	42b5      	cmp	r5, r6
 8006fac:	d11a      	bne.n	8006fe4 <_printf_common+0xc8>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e008      	b.n	8006fc4 <_printf_common+0xa8>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4638      	mov	r0, r7
 8006fba:	47c0      	blx	r8
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d103      	bne.n	8006fc8 <_printf_common+0xac>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc8:	3501      	adds	r5, #1
 8006fca:	e7c6      	b.n	8006f5a <_printf_common+0x3e>
 8006fcc:	18e1      	adds	r1, r4, r3
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	2030      	movs	r0, #48	; 0x30
 8006fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fd6:	4422      	add	r2, r4
 8006fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	e7c7      	b.n	8006f74 <_printf_common+0x58>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4638      	mov	r0, r7
 8006fec:	47c0      	blx	r8
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d0e6      	beq.n	8006fc0 <_printf_common+0xa4>
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7d9      	b.n	8006faa <_printf_common+0x8e>
	...

08006ff8 <_printf_i>:
 8006ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	7e0f      	ldrb	r7, [r1, #24]
 8006ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007000:	2f78      	cmp	r7, #120	; 0x78
 8007002:	4691      	mov	r9, r2
 8007004:	4680      	mov	r8, r0
 8007006:	460c      	mov	r4, r1
 8007008:	469a      	mov	sl, r3
 800700a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800700e:	d807      	bhi.n	8007020 <_printf_i+0x28>
 8007010:	2f62      	cmp	r7, #98	; 0x62
 8007012:	d80a      	bhi.n	800702a <_printf_i+0x32>
 8007014:	2f00      	cmp	r7, #0
 8007016:	f000 80d8 	beq.w	80071ca <_printf_i+0x1d2>
 800701a:	2f58      	cmp	r7, #88	; 0x58
 800701c:	f000 80a3 	beq.w	8007166 <_printf_i+0x16e>
 8007020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007028:	e03a      	b.n	80070a0 <_printf_i+0xa8>
 800702a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800702e:	2b15      	cmp	r3, #21
 8007030:	d8f6      	bhi.n	8007020 <_printf_i+0x28>
 8007032:	a101      	add	r1, pc, #4	; (adr r1, 8007038 <_printf_i+0x40>)
 8007034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007038:	08007091 	.word	0x08007091
 800703c:	080070a5 	.word	0x080070a5
 8007040:	08007021 	.word	0x08007021
 8007044:	08007021 	.word	0x08007021
 8007048:	08007021 	.word	0x08007021
 800704c:	08007021 	.word	0x08007021
 8007050:	080070a5 	.word	0x080070a5
 8007054:	08007021 	.word	0x08007021
 8007058:	08007021 	.word	0x08007021
 800705c:	08007021 	.word	0x08007021
 8007060:	08007021 	.word	0x08007021
 8007064:	080071b1 	.word	0x080071b1
 8007068:	080070d5 	.word	0x080070d5
 800706c:	08007193 	.word	0x08007193
 8007070:	08007021 	.word	0x08007021
 8007074:	08007021 	.word	0x08007021
 8007078:	080071d3 	.word	0x080071d3
 800707c:	08007021 	.word	0x08007021
 8007080:	080070d5 	.word	0x080070d5
 8007084:	08007021 	.word	0x08007021
 8007088:	08007021 	.word	0x08007021
 800708c:	0800719b 	.word	0x0800719b
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	1d1a      	adds	r2, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	602a      	str	r2, [r5, #0]
 8007098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800709c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0a3      	b.n	80071ec <_printf_i+0x1f4>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	6829      	ldr	r1, [r5, #0]
 80070a8:	0606      	lsls	r6, r0, #24
 80070aa:	f101 0304 	add.w	r3, r1, #4
 80070ae:	d50a      	bpl.n	80070c6 <_printf_i+0xce>
 80070b0:	680e      	ldr	r6, [r1, #0]
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	da03      	bge.n	80070c0 <_printf_i+0xc8>
 80070b8:	232d      	movs	r3, #45	; 0x2d
 80070ba:	4276      	negs	r6, r6
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c0:	485e      	ldr	r0, [pc, #376]	; (800723c <_printf_i+0x244>)
 80070c2:	230a      	movs	r3, #10
 80070c4:	e019      	b.n	80070fa <_printf_i+0x102>
 80070c6:	680e      	ldr	r6, [r1, #0]
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ce:	bf18      	it	ne
 80070d0:	b236      	sxthne	r6, r6
 80070d2:	e7ef      	b.n	80070b4 <_printf_i+0xbc>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	1d19      	adds	r1, r3, #4
 80070da:	6029      	str	r1, [r5, #0]
 80070dc:	0601      	lsls	r1, r0, #24
 80070de:	d501      	bpl.n	80070e4 <_printf_i+0xec>
 80070e0:	681e      	ldr	r6, [r3, #0]
 80070e2:	e002      	b.n	80070ea <_printf_i+0xf2>
 80070e4:	0646      	lsls	r6, r0, #25
 80070e6:	d5fb      	bpl.n	80070e0 <_printf_i+0xe8>
 80070e8:	881e      	ldrh	r6, [r3, #0]
 80070ea:	4854      	ldr	r0, [pc, #336]	; (800723c <_printf_i+0x244>)
 80070ec:	2f6f      	cmp	r7, #111	; 0x6f
 80070ee:	bf0c      	ite	eq
 80070f0:	2308      	moveq	r3, #8
 80070f2:	230a      	movne	r3, #10
 80070f4:	2100      	movs	r1, #0
 80070f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070fa:	6865      	ldr	r5, [r4, #4]
 80070fc:	60a5      	str	r5, [r4, #8]
 80070fe:	2d00      	cmp	r5, #0
 8007100:	bfa2      	ittt	ge
 8007102:	6821      	ldrge	r1, [r4, #0]
 8007104:	f021 0104 	bicge.w	r1, r1, #4
 8007108:	6021      	strge	r1, [r4, #0]
 800710a:	b90e      	cbnz	r6, 8007110 <_printf_i+0x118>
 800710c:	2d00      	cmp	r5, #0
 800710e:	d04d      	beq.n	80071ac <_printf_i+0x1b4>
 8007110:	4615      	mov	r5, r2
 8007112:	fbb6 f1f3 	udiv	r1, r6, r3
 8007116:	fb03 6711 	mls	r7, r3, r1, r6
 800711a:	5dc7      	ldrb	r7, [r0, r7]
 800711c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007120:	4637      	mov	r7, r6
 8007122:	42bb      	cmp	r3, r7
 8007124:	460e      	mov	r6, r1
 8007126:	d9f4      	bls.n	8007112 <_printf_i+0x11a>
 8007128:	2b08      	cmp	r3, #8
 800712a:	d10b      	bne.n	8007144 <_printf_i+0x14c>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	07de      	lsls	r6, r3, #31
 8007130:	d508      	bpl.n	8007144 <_printf_i+0x14c>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	6861      	ldr	r1, [r4, #4]
 8007136:	4299      	cmp	r1, r3
 8007138:	bfde      	ittt	le
 800713a:	2330      	movle	r3, #48	; 0x30
 800713c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007144:	1b52      	subs	r2, r2, r5
 8007146:	6122      	str	r2, [r4, #16]
 8007148:	f8cd a000 	str.w	sl, [sp]
 800714c:	464b      	mov	r3, r9
 800714e:	aa03      	add	r2, sp, #12
 8007150:	4621      	mov	r1, r4
 8007152:	4640      	mov	r0, r8
 8007154:	f7ff fee2 	bl	8006f1c <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	d14c      	bne.n	80071f6 <_printf_i+0x1fe>
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	b004      	add	sp, #16
 8007162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007166:	4835      	ldr	r0, [pc, #212]	; (800723c <_printf_i+0x244>)
 8007168:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800716c:	6829      	ldr	r1, [r5, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f851 6b04 	ldr.w	r6, [r1], #4
 8007174:	6029      	str	r1, [r5, #0]
 8007176:	061d      	lsls	r5, r3, #24
 8007178:	d514      	bpl.n	80071a4 <_printf_i+0x1ac>
 800717a:	07df      	lsls	r7, r3, #31
 800717c:	bf44      	itt	mi
 800717e:	f043 0320 	orrmi.w	r3, r3, #32
 8007182:	6023      	strmi	r3, [r4, #0]
 8007184:	b91e      	cbnz	r6, 800718e <_printf_i+0x196>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	f023 0320 	bic.w	r3, r3, #32
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	2310      	movs	r3, #16
 8007190:	e7b0      	b.n	80070f4 <_printf_i+0xfc>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	2378      	movs	r3, #120	; 0x78
 800719c:	4828      	ldr	r0, [pc, #160]	; (8007240 <_printf_i+0x248>)
 800719e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071a2:	e7e3      	b.n	800716c <_printf_i+0x174>
 80071a4:	0659      	lsls	r1, r3, #25
 80071a6:	bf48      	it	mi
 80071a8:	b2b6      	uxthmi	r6, r6
 80071aa:	e7e6      	b.n	800717a <_printf_i+0x182>
 80071ac:	4615      	mov	r5, r2
 80071ae:	e7bb      	b.n	8007128 <_printf_i+0x130>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	6826      	ldr	r6, [r4, #0]
 80071b4:	6961      	ldr	r1, [r4, #20]
 80071b6:	1d18      	adds	r0, r3, #4
 80071b8:	6028      	str	r0, [r5, #0]
 80071ba:	0635      	lsls	r5, r6, #24
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	d501      	bpl.n	80071c4 <_printf_i+0x1cc>
 80071c0:	6019      	str	r1, [r3, #0]
 80071c2:	e002      	b.n	80071ca <_printf_i+0x1d2>
 80071c4:	0670      	lsls	r0, r6, #25
 80071c6:	d5fb      	bpl.n	80071c0 <_printf_i+0x1c8>
 80071c8:	8019      	strh	r1, [r3, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	4615      	mov	r5, r2
 80071d0:	e7ba      	b.n	8007148 <_printf_i+0x150>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	1d1a      	adds	r2, r3, #4
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	681d      	ldr	r5, [r3, #0]
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	2100      	movs	r1, #0
 80071de:	4628      	mov	r0, r5
 80071e0:	f7f9 f806 	bl	80001f0 <memchr>
 80071e4:	b108      	cbz	r0, 80071ea <_printf_i+0x1f2>
 80071e6:	1b40      	subs	r0, r0, r5
 80071e8:	6060      	str	r0, [r4, #4]
 80071ea:	6863      	ldr	r3, [r4, #4]
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	2300      	movs	r3, #0
 80071f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f4:	e7a8      	b.n	8007148 <_printf_i+0x150>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4649      	mov	r1, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	47d0      	blx	sl
 8007200:	3001      	adds	r0, #1
 8007202:	d0ab      	beq.n	800715c <_printf_i+0x164>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	079b      	lsls	r3, r3, #30
 8007208:	d413      	bmi.n	8007232 <_printf_i+0x23a>
 800720a:	68e0      	ldr	r0, [r4, #12]
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	4298      	cmp	r0, r3
 8007210:	bfb8      	it	lt
 8007212:	4618      	movlt	r0, r3
 8007214:	e7a4      	b.n	8007160 <_printf_i+0x168>
 8007216:	2301      	movs	r3, #1
 8007218:	4632      	mov	r2, r6
 800721a:	4649      	mov	r1, r9
 800721c:	4640      	mov	r0, r8
 800721e:	47d0      	blx	sl
 8007220:	3001      	adds	r0, #1
 8007222:	d09b      	beq.n	800715c <_printf_i+0x164>
 8007224:	3501      	adds	r5, #1
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	9903      	ldr	r1, [sp, #12]
 800722a:	1a5b      	subs	r3, r3, r1
 800722c:	42ab      	cmp	r3, r5
 800722e:	dcf2      	bgt.n	8007216 <_printf_i+0x21e>
 8007230:	e7eb      	b.n	800720a <_printf_i+0x212>
 8007232:	2500      	movs	r5, #0
 8007234:	f104 0619 	add.w	r6, r4, #25
 8007238:	e7f5      	b.n	8007226 <_printf_i+0x22e>
 800723a:	bf00      	nop
 800723c:	08009602 	.word	0x08009602
 8007240:	08009613 	.word	0x08009613

08007244 <cleanup_glue>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	460c      	mov	r4, r1
 8007248:	6809      	ldr	r1, [r1, #0]
 800724a:	4605      	mov	r5, r0
 800724c:	b109      	cbz	r1, 8007252 <cleanup_glue+0xe>
 800724e:	f7ff fff9 	bl	8007244 <cleanup_glue>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725a:	f001 bbf5 	b.w	8008a48 <_free_r>
	...

08007260 <_reclaim_reent>:
 8007260:	4b2c      	ldr	r3, [pc, #176]	; (8007314 <_reclaim_reent+0xb4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4283      	cmp	r3, r0
 8007266:	b570      	push	{r4, r5, r6, lr}
 8007268:	4604      	mov	r4, r0
 800726a:	d051      	beq.n	8007310 <_reclaim_reent+0xb0>
 800726c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800726e:	b143      	cbz	r3, 8007282 <_reclaim_reent+0x22>
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d14a      	bne.n	800730c <_reclaim_reent+0xac>
 8007276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	b111      	cbz	r1, 8007282 <_reclaim_reent+0x22>
 800727c:	4620      	mov	r0, r4
 800727e:	f001 fbe3 	bl	8008a48 <_free_r>
 8007282:	6961      	ldr	r1, [r4, #20]
 8007284:	b111      	cbz	r1, 800728c <_reclaim_reent+0x2c>
 8007286:	4620      	mov	r0, r4
 8007288:	f001 fbde 	bl	8008a48 <_free_r>
 800728c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800728e:	b111      	cbz	r1, 8007296 <_reclaim_reent+0x36>
 8007290:	4620      	mov	r0, r4
 8007292:	f001 fbd9 	bl	8008a48 <_free_r>
 8007296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007298:	b111      	cbz	r1, 80072a0 <_reclaim_reent+0x40>
 800729a:	4620      	mov	r0, r4
 800729c:	f001 fbd4 	bl	8008a48 <_free_r>
 80072a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80072a2:	b111      	cbz	r1, 80072aa <_reclaim_reent+0x4a>
 80072a4:	4620      	mov	r0, r4
 80072a6:	f001 fbcf 	bl	8008a48 <_free_r>
 80072aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80072ac:	b111      	cbz	r1, 80072b4 <_reclaim_reent+0x54>
 80072ae:	4620      	mov	r0, r4
 80072b0:	f001 fbca 	bl	8008a48 <_free_r>
 80072b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80072b6:	b111      	cbz	r1, 80072be <_reclaim_reent+0x5e>
 80072b8:	4620      	mov	r0, r4
 80072ba:	f001 fbc5 	bl	8008a48 <_free_r>
 80072be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80072c0:	b111      	cbz	r1, 80072c8 <_reclaim_reent+0x68>
 80072c2:	4620      	mov	r0, r4
 80072c4:	f001 fbc0 	bl	8008a48 <_free_r>
 80072c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ca:	b111      	cbz	r1, 80072d2 <_reclaim_reent+0x72>
 80072cc:	4620      	mov	r0, r4
 80072ce:	f001 fbbb 	bl	8008a48 <_free_r>
 80072d2:	69a3      	ldr	r3, [r4, #24]
 80072d4:	b1e3      	cbz	r3, 8007310 <_reclaim_reent+0xb0>
 80072d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072d8:	4620      	mov	r0, r4
 80072da:	4798      	blx	r3
 80072dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072de:	b1b9      	cbz	r1, 8007310 <_reclaim_reent+0xb0>
 80072e0:	4620      	mov	r0, r4
 80072e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072e6:	f7ff bfad 	b.w	8007244 <cleanup_glue>
 80072ea:	5949      	ldr	r1, [r1, r5]
 80072ec:	b941      	cbnz	r1, 8007300 <_reclaim_reent+0xa0>
 80072ee:	3504      	adds	r5, #4
 80072f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f2:	2d80      	cmp	r5, #128	; 0x80
 80072f4:	68d9      	ldr	r1, [r3, #12]
 80072f6:	d1f8      	bne.n	80072ea <_reclaim_reent+0x8a>
 80072f8:	4620      	mov	r0, r4
 80072fa:	f001 fba5 	bl	8008a48 <_free_r>
 80072fe:	e7ba      	b.n	8007276 <_reclaim_reent+0x16>
 8007300:	680e      	ldr	r6, [r1, #0]
 8007302:	4620      	mov	r0, r4
 8007304:	f001 fba0 	bl	8008a48 <_free_r>
 8007308:	4631      	mov	r1, r6
 800730a:	e7ef      	b.n	80072ec <_reclaim_reent+0x8c>
 800730c:	2500      	movs	r5, #0
 800730e:	e7ef      	b.n	80072f0 <_reclaim_reent+0x90>
 8007310:	bd70      	pop	{r4, r5, r6, pc}
 8007312:	bf00      	nop
 8007314:	20000024 	.word	0x20000024

08007318 <_sbrk_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d06      	ldr	r5, [pc, #24]	; (8007334 <_sbrk_r+0x1c>)
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	f002 f8d6 	bl	80094d4 <_sbrk>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_sbrk_r+0x1a>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_sbrk_r+0x1a>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20004384 	.word	0x20004384

08007338 <siprintf>:
 8007338:	b40e      	push	{r1, r2, r3}
 800733a:	b500      	push	{lr}
 800733c:	b09c      	sub	sp, #112	; 0x70
 800733e:	ab1d      	add	r3, sp, #116	; 0x74
 8007340:	9002      	str	r0, [sp, #8]
 8007342:	9006      	str	r0, [sp, #24]
 8007344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007348:	4809      	ldr	r0, [pc, #36]	; (8007370 <siprintf+0x38>)
 800734a:	9107      	str	r1, [sp, #28]
 800734c:	9104      	str	r1, [sp, #16]
 800734e:	4909      	ldr	r1, [pc, #36]	; (8007374 <siprintf+0x3c>)
 8007350:	f853 2b04 	ldr.w	r2, [r3], #4
 8007354:	9105      	str	r1, [sp, #20]
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	a902      	add	r1, sp, #8
 800735c:	f001 fc1c 	bl	8008b98 <_svfiprintf_r>
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	b01c      	add	sp, #112	; 0x70
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b003      	add	sp, #12
 800736e:	4770      	bx	lr
 8007370:	20000024 	.word	0x20000024
 8007374:	ffff0208 	.word	0xffff0208

08007378 <__sread>:
 8007378:	b510      	push	{r4, lr}
 800737a:	460c      	mov	r4, r1
 800737c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007380:	f001 fd0a 	bl	8008d98 <_read_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	bfab      	itete	ge
 8007388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800738a:	89a3      	ldrhlt	r3, [r4, #12]
 800738c:	181b      	addge	r3, r3, r0
 800738e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007392:	bfac      	ite	ge
 8007394:	6563      	strge	r3, [r4, #84]	; 0x54
 8007396:	81a3      	strhlt	r3, [r4, #12]
 8007398:	bd10      	pop	{r4, pc}

0800739a <__swrite>:
 800739a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739e:	461f      	mov	r7, r3
 80073a0:	898b      	ldrh	r3, [r1, #12]
 80073a2:	05db      	lsls	r3, r3, #23
 80073a4:	4605      	mov	r5, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	4616      	mov	r6, r2
 80073aa:	d505      	bpl.n	80073b8 <__swrite+0x1e>
 80073ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b0:	2302      	movs	r3, #2
 80073b2:	2200      	movs	r2, #0
 80073b4:	f000 ff88 	bl	80082c8 <_lseek_r>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	4632      	mov	r2, r6
 80073c6:	463b      	mov	r3, r7
 80073c8:	4628      	mov	r0, r5
 80073ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	f000 b817 	b.w	8007400 <_write_r>

080073d2 <__sseek>:
 80073d2:	b510      	push	{r4, lr}
 80073d4:	460c      	mov	r4, r1
 80073d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073da:	f000 ff75 	bl	80082c8 <_lseek_r>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	bf15      	itete	ne
 80073e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ee:	81a3      	strheq	r3, [r4, #12]
 80073f0:	bf18      	it	ne
 80073f2:	81a3      	strhne	r3, [r4, #12]
 80073f4:	bd10      	pop	{r4, pc}

080073f6 <__sclose>:
 80073f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fa:	f000 b813 	b.w	8007424 <_close_r>
	...

08007400 <_write_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d07      	ldr	r5, [pc, #28]	; (8007420 <_write_r+0x20>)
 8007404:	4604      	mov	r4, r0
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	2200      	movs	r2, #0
 800740c:	602a      	str	r2, [r5, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	f7fa fd67 	bl	8001ee2 <_write>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_write_r+0x1e>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_write_r+0x1e>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20004384 	.word	0x20004384

08007424 <_close_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d06      	ldr	r5, [pc, #24]	; (8007440 <_close_r+0x1c>)
 8007428:	2300      	movs	r3, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7fa fd73 	bl	8001f1a <_close>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_close_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_close_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20004384 	.word	0x20004384

08007444 <quorem>:
 8007444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	6903      	ldr	r3, [r0, #16]
 800744a:	690c      	ldr	r4, [r1, #16]
 800744c:	42a3      	cmp	r3, r4
 800744e:	4607      	mov	r7, r0
 8007450:	f2c0 8081 	blt.w	8007556 <quorem+0x112>
 8007454:	3c01      	subs	r4, #1
 8007456:	f101 0814 	add.w	r8, r1, #20
 800745a:	f100 0514 	add.w	r5, r0, #20
 800745e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800746c:	3301      	adds	r3, #1
 800746e:	429a      	cmp	r2, r3
 8007470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007478:	fbb2 f6f3 	udiv	r6, r2, r3
 800747c:	d331      	bcc.n	80074e2 <quorem+0x9e>
 800747e:	f04f 0e00 	mov.w	lr, #0
 8007482:	4640      	mov	r0, r8
 8007484:	46ac      	mov	ip, r5
 8007486:	46f2      	mov	sl, lr
 8007488:	f850 2b04 	ldr.w	r2, [r0], #4
 800748c:	b293      	uxth	r3, r2
 800748e:	fb06 e303 	mla	r3, r6, r3, lr
 8007492:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007496:	b29b      	uxth	r3, r3
 8007498:	ebaa 0303 	sub.w	r3, sl, r3
 800749c:	f8dc a000 	ldr.w	sl, [ip]
 80074a0:	0c12      	lsrs	r2, r2, #16
 80074a2:	fa13 f38a 	uxtah	r3, r3, sl
 80074a6:	fb06 e202 	mla	r2, r6, r2, lr
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	9b00      	ldr	r3, [sp, #0]
 80074ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074b2:	b292      	uxth	r2, r2
 80074b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80074c0:	4581      	cmp	r9, r0
 80074c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074c6:	f84c 3b04 	str.w	r3, [ip], #4
 80074ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074ce:	d2db      	bcs.n	8007488 <quorem+0x44>
 80074d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80074d4:	b92b      	cbnz	r3, 80074e2 <quorem+0x9e>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	3b04      	subs	r3, #4
 80074da:	429d      	cmp	r5, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	d32e      	bcc.n	800753e <quorem+0xfa>
 80074e0:	613c      	str	r4, [r7, #16]
 80074e2:	4638      	mov	r0, r7
 80074e4:	f001 f998 	bl	8008818 <__mcmp>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	db24      	blt.n	8007536 <quorem+0xf2>
 80074ec:	3601      	adds	r6, #1
 80074ee:	4628      	mov	r0, r5
 80074f0:	f04f 0c00 	mov.w	ip, #0
 80074f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80074f8:	f8d0 e000 	ldr.w	lr, [r0]
 80074fc:	b293      	uxth	r3, r2
 80074fe:	ebac 0303 	sub.w	r3, ip, r3
 8007502:	0c12      	lsrs	r2, r2, #16
 8007504:	fa13 f38e 	uxtah	r3, r3, lr
 8007508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800750c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007510:	b29b      	uxth	r3, r3
 8007512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007516:	45c1      	cmp	r9, r8
 8007518:	f840 3b04 	str.w	r3, [r0], #4
 800751c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007520:	d2e8      	bcs.n	80074f4 <quorem+0xb0>
 8007522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800752a:	b922      	cbnz	r2, 8007536 <quorem+0xf2>
 800752c:	3b04      	subs	r3, #4
 800752e:	429d      	cmp	r5, r3
 8007530:	461a      	mov	r2, r3
 8007532:	d30a      	bcc.n	800754a <quorem+0x106>
 8007534:	613c      	str	r4, [r7, #16]
 8007536:	4630      	mov	r0, r6
 8007538:	b003      	add	sp, #12
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	3b04      	subs	r3, #4
 8007542:	2a00      	cmp	r2, #0
 8007544:	d1cc      	bne.n	80074e0 <quorem+0x9c>
 8007546:	3c01      	subs	r4, #1
 8007548:	e7c7      	b.n	80074da <quorem+0x96>
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	3b04      	subs	r3, #4
 800754e:	2a00      	cmp	r2, #0
 8007550:	d1f0      	bne.n	8007534 <quorem+0xf0>
 8007552:	3c01      	subs	r4, #1
 8007554:	e7eb      	b.n	800752e <quorem+0xea>
 8007556:	2000      	movs	r0, #0
 8007558:	e7ee      	b.n	8007538 <quorem+0xf4>
 800755a:	0000      	movs	r0, r0
 800755c:	0000      	movs	r0, r0
	...

08007560 <_dtoa_r>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	ed2d 8b04 	vpush	{d8-d9}
 8007568:	ec57 6b10 	vmov	r6, r7, d0
 800756c:	b093      	sub	sp, #76	; 0x4c
 800756e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007574:	9106      	str	r1, [sp, #24]
 8007576:	ee10 aa10 	vmov	sl, s0
 800757a:	4604      	mov	r4, r0
 800757c:	9209      	str	r2, [sp, #36]	; 0x24
 800757e:	930c      	str	r3, [sp, #48]	; 0x30
 8007580:	46bb      	mov	fp, r7
 8007582:	b975      	cbnz	r5, 80075a2 <_dtoa_r+0x42>
 8007584:	2010      	movs	r0, #16
 8007586:	f000 feb1 	bl	80082ec <malloc>
 800758a:	4602      	mov	r2, r0
 800758c:	6260      	str	r0, [r4, #36]	; 0x24
 800758e:	b920      	cbnz	r0, 800759a <_dtoa_r+0x3a>
 8007590:	4ba7      	ldr	r3, [pc, #668]	; (8007830 <_dtoa_r+0x2d0>)
 8007592:	21ea      	movs	r1, #234	; 0xea
 8007594:	48a7      	ldr	r0, [pc, #668]	; (8007834 <_dtoa_r+0x2d4>)
 8007596:	f001 fc11 	bl	8008dbc <__assert_func>
 800759a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800759e:	6005      	str	r5, [r0, #0]
 80075a0:	60c5      	str	r5, [r0, #12]
 80075a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a4:	6819      	ldr	r1, [r3, #0]
 80075a6:	b151      	cbz	r1, 80075be <_dtoa_r+0x5e>
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	604a      	str	r2, [r1, #4]
 80075ac:	2301      	movs	r3, #1
 80075ae:	4093      	lsls	r3, r2
 80075b0:	608b      	str	r3, [r1, #8]
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 feee 	bl	8008394 <_Bfree>
 80075b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	1e3b      	subs	r3, r7, #0
 80075c0:	bfaa      	itet	ge
 80075c2:	2300      	movge	r3, #0
 80075c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80075c8:	f8c8 3000 	strge.w	r3, [r8]
 80075cc:	4b9a      	ldr	r3, [pc, #616]	; (8007838 <_dtoa_r+0x2d8>)
 80075ce:	bfbc      	itt	lt
 80075d0:	2201      	movlt	r2, #1
 80075d2:	f8c8 2000 	strlt.w	r2, [r8]
 80075d6:	ea33 030b 	bics.w	r3, r3, fp
 80075da:	d11b      	bne.n	8007614 <_dtoa_r+0xb4>
 80075dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075de:	f242 730f 	movw	r3, #9999	; 0x270f
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075e8:	4333      	orrs	r3, r6
 80075ea:	f000 8592 	beq.w	8008112 <_dtoa_r+0xbb2>
 80075ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f0:	b963      	cbnz	r3, 800760c <_dtoa_r+0xac>
 80075f2:	4b92      	ldr	r3, [pc, #584]	; (800783c <_dtoa_r+0x2dc>)
 80075f4:	e022      	b.n	800763c <_dtoa_r+0xdc>
 80075f6:	4b92      	ldr	r3, [pc, #584]	; (8007840 <_dtoa_r+0x2e0>)
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	3308      	adds	r3, #8
 80075fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	9801      	ldr	r0, [sp, #4]
 8007602:	b013      	add	sp, #76	; 0x4c
 8007604:	ecbd 8b04 	vpop	{d8-d9}
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	4b8b      	ldr	r3, [pc, #556]	; (800783c <_dtoa_r+0x2dc>)
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	3303      	adds	r3, #3
 8007612:	e7f3      	b.n	80075fc <_dtoa_r+0x9c>
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	4650      	mov	r0, sl
 800761a:	4659      	mov	r1, fp
 800761c:	f7f9 fa5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007620:	ec4b ab19 	vmov	d9, sl, fp
 8007624:	4680      	mov	r8, r0
 8007626:	b158      	cbz	r0, 8007640 <_dtoa_r+0xe0>
 8007628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800762a:	2301      	movs	r3, #1
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 856b 	beq.w	800810c <_dtoa_r+0xbac>
 8007636:	4883      	ldr	r0, [pc, #524]	; (8007844 <_dtoa_r+0x2e4>)
 8007638:	6018      	str	r0, [r3, #0]
 800763a:	1e43      	subs	r3, r0, #1
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	e7df      	b.n	8007600 <_dtoa_r+0xa0>
 8007640:	ec4b ab10 	vmov	d0, sl, fp
 8007644:	aa10      	add	r2, sp, #64	; 0x40
 8007646:	a911      	add	r1, sp, #68	; 0x44
 8007648:	4620      	mov	r0, r4
 800764a:	f001 f98b 	bl	8008964 <__d2b>
 800764e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007652:	ee08 0a10 	vmov	s16, r0
 8007656:	2d00      	cmp	r5, #0
 8007658:	f000 8084 	beq.w	8007764 <_dtoa_r+0x204>
 800765c:	ee19 3a90 	vmov	r3, s19
 8007660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007664:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007668:	4656      	mov	r6, sl
 800766a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800766e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007672:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007676:	4b74      	ldr	r3, [pc, #464]	; (8007848 <_dtoa_r+0x2e8>)
 8007678:	2200      	movs	r2, #0
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	f7f8 fe0b 	bl	8000298 <__aeabi_dsub>
 8007682:	a365      	add	r3, pc, #404	; (adr r3, 8007818 <_dtoa_r+0x2b8>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f7f8 ffbe 	bl	8000608 <__aeabi_dmul>
 800768c:	a364      	add	r3, pc, #400	; (adr r3, 8007820 <_dtoa_r+0x2c0>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f8 fe03 	bl	800029c <__adddf3>
 8007696:	4606      	mov	r6, r0
 8007698:	4628      	mov	r0, r5
 800769a:	460f      	mov	r7, r1
 800769c:	f7f8 ff4a 	bl	8000534 <__aeabi_i2d>
 80076a0:	a361      	add	r3, pc, #388	; (adr r3, 8007828 <_dtoa_r+0x2c8>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 ffaf 	bl	8000608 <__aeabi_dmul>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f8 fdf3 	bl	800029c <__adddf3>
 80076b6:	4606      	mov	r6, r0
 80076b8:	460f      	mov	r7, r1
 80076ba:	f7f9 fa55 	bl	8000b68 <__aeabi_d2iz>
 80076be:	2200      	movs	r2, #0
 80076c0:	9000      	str	r0, [sp, #0]
 80076c2:	2300      	movs	r3, #0
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f9 fa10 	bl	8000aec <__aeabi_dcmplt>
 80076cc:	b150      	cbz	r0, 80076e4 <_dtoa_r+0x184>
 80076ce:	9800      	ldr	r0, [sp, #0]
 80076d0:	f7f8 ff30 	bl	8000534 <__aeabi_i2d>
 80076d4:	4632      	mov	r2, r6
 80076d6:	463b      	mov	r3, r7
 80076d8:	f7f9 f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80076dc:	b910      	cbnz	r0, 80076e4 <_dtoa_r+0x184>
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	2b16      	cmp	r3, #22
 80076e8:	d85a      	bhi.n	80077a0 <_dtoa_r+0x240>
 80076ea:	9a00      	ldr	r2, [sp, #0]
 80076ec:	4b57      	ldr	r3, [pc, #348]	; (800784c <_dtoa_r+0x2ec>)
 80076ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	ec51 0b19 	vmov	r0, r1, d9
 80076fa:	f7f9 f9f7 	bl	8000aec <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d050      	beq.n	80077a4 <_dtoa_r+0x244>
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	3b01      	subs	r3, #1
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	2300      	movs	r3, #0
 800770a:	930b      	str	r3, [sp, #44]	; 0x2c
 800770c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800770e:	1b5d      	subs	r5, r3, r5
 8007710:	1e6b      	subs	r3, r5, #1
 8007712:	9305      	str	r3, [sp, #20]
 8007714:	bf45      	ittet	mi
 8007716:	f1c5 0301 	rsbmi	r3, r5, #1
 800771a:	9304      	strmi	r3, [sp, #16]
 800771c:	2300      	movpl	r3, #0
 800771e:	2300      	movmi	r3, #0
 8007720:	bf4c      	ite	mi
 8007722:	9305      	strmi	r3, [sp, #20]
 8007724:	9304      	strpl	r3, [sp, #16]
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	db3d      	blt.n	80077a8 <_dtoa_r+0x248>
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	9a00      	ldr	r2, [sp, #0]
 8007730:	920a      	str	r2, [sp, #40]	; 0x28
 8007732:	4413      	add	r3, r2
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	2300      	movs	r3, #0
 8007738:	9307      	str	r3, [sp, #28]
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	2b09      	cmp	r3, #9
 800773e:	f200 8089 	bhi.w	8007854 <_dtoa_r+0x2f4>
 8007742:	2b05      	cmp	r3, #5
 8007744:	bfc4      	itt	gt
 8007746:	3b04      	subgt	r3, #4
 8007748:	9306      	strgt	r3, [sp, #24]
 800774a:	9b06      	ldr	r3, [sp, #24]
 800774c:	f1a3 0302 	sub.w	r3, r3, #2
 8007750:	bfcc      	ite	gt
 8007752:	2500      	movgt	r5, #0
 8007754:	2501      	movle	r5, #1
 8007756:	2b03      	cmp	r3, #3
 8007758:	f200 8087 	bhi.w	800786a <_dtoa_r+0x30a>
 800775c:	e8df f003 	tbb	[pc, r3]
 8007760:	59383a2d 	.word	0x59383a2d
 8007764:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007768:	441d      	add	r5, r3
 800776a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800776e:	2b20      	cmp	r3, #32
 8007770:	bfc1      	itttt	gt
 8007772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007776:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800777a:	fa0b f303 	lslgt.w	r3, fp, r3
 800777e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007782:	bfda      	itte	le
 8007784:	f1c3 0320 	rsble	r3, r3, #32
 8007788:	fa06 f003 	lslle.w	r0, r6, r3
 800778c:	4318      	orrgt	r0, r3
 800778e:	f7f8 fec1 	bl	8000514 <__aeabi_ui2d>
 8007792:	2301      	movs	r3, #1
 8007794:	4606      	mov	r6, r0
 8007796:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800779a:	3d01      	subs	r5, #1
 800779c:	930e      	str	r3, [sp, #56]	; 0x38
 800779e:	e76a      	b.n	8007676 <_dtoa_r+0x116>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7b2      	b.n	800770a <_dtoa_r+0x1aa>
 80077a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80077a6:	e7b1      	b.n	800770c <_dtoa_r+0x1ac>
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	9a00      	ldr	r2, [sp, #0]
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	4253      	negs	r3, r2
 80077b2:	9307      	str	r3, [sp, #28]
 80077b4:	2300      	movs	r3, #0
 80077b6:	930a      	str	r3, [sp, #40]	; 0x28
 80077b8:	e7bf      	b.n	800773a <_dtoa_r+0x1da>
 80077ba:	2300      	movs	r3, #0
 80077bc:	9308      	str	r3, [sp, #32]
 80077be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dc55      	bgt.n	8007870 <_dtoa_r+0x310>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077ca:	461a      	mov	r2, r3
 80077cc:	9209      	str	r2, [sp, #36]	; 0x24
 80077ce:	e00c      	b.n	80077ea <_dtoa_r+0x28a>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e7f3      	b.n	80077bc <_dtoa_r+0x25c>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d8:	9308      	str	r3, [sp, #32]
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	3301      	adds	r3, #1
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	9303      	str	r3, [sp, #12]
 80077e6:	bfb8      	it	lt
 80077e8:	2301      	movlt	r3, #1
 80077ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077ec:	2200      	movs	r2, #0
 80077ee:	6042      	str	r2, [r0, #4]
 80077f0:	2204      	movs	r2, #4
 80077f2:	f102 0614 	add.w	r6, r2, #20
 80077f6:	429e      	cmp	r6, r3
 80077f8:	6841      	ldr	r1, [r0, #4]
 80077fa:	d93d      	bls.n	8007878 <_dtoa_r+0x318>
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fd89 	bl	8008314 <_Balloc>
 8007802:	9001      	str	r0, [sp, #4]
 8007804:	2800      	cmp	r0, #0
 8007806:	d13b      	bne.n	8007880 <_dtoa_r+0x320>
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <_dtoa_r+0x2f0>)
 800780a:	4602      	mov	r2, r0
 800780c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007810:	e6c0      	b.n	8007594 <_dtoa_r+0x34>
 8007812:	2301      	movs	r3, #1
 8007814:	e7df      	b.n	80077d6 <_dtoa_r+0x276>
 8007816:	bf00      	nop
 8007818:	636f4361 	.word	0x636f4361
 800781c:	3fd287a7 	.word	0x3fd287a7
 8007820:	8b60c8b3 	.word	0x8b60c8b3
 8007824:	3fc68a28 	.word	0x3fc68a28
 8007828:	509f79fb 	.word	0x509f79fb
 800782c:	3fd34413 	.word	0x3fd34413
 8007830:	08009631 	.word	0x08009631
 8007834:	08009648 	.word	0x08009648
 8007838:	7ff00000 	.word	0x7ff00000
 800783c:	0800962d 	.word	0x0800962d
 8007840:	08009624 	.word	0x08009624
 8007844:	08009601 	.word	0x08009601
 8007848:	3ff80000 	.word	0x3ff80000
 800784c:	08009738 	.word	0x08009738
 8007850:	080096a3 	.word	0x080096a3
 8007854:	2501      	movs	r5, #1
 8007856:	2300      	movs	r3, #0
 8007858:	9306      	str	r3, [sp, #24]
 800785a:	9508      	str	r5, [sp, #32]
 800785c:	f04f 33ff 	mov.w	r3, #4294967295
 8007860:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	2312      	movs	r3, #18
 8007868:	e7b0      	b.n	80077cc <_dtoa_r+0x26c>
 800786a:	2301      	movs	r3, #1
 800786c:	9308      	str	r3, [sp, #32]
 800786e:	e7f5      	b.n	800785c <_dtoa_r+0x2fc>
 8007870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007872:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007876:	e7b8      	b.n	80077ea <_dtoa_r+0x28a>
 8007878:	3101      	adds	r1, #1
 800787a:	6041      	str	r1, [r0, #4]
 800787c:	0052      	lsls	r2, r2, #1
 800787e:	e7b8      	b.n	80077f2 <_dtoa_r+0x292>
 8007880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007882:	9a01      	ldr	r2, [sp, #4]
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	2b0e      	cmp	r3, #14
 800788a:	f200 809d 	bhi.w	80079c8 <_dtoa_r+0x468>
 800788e:	2d00      	cmp	r5, #0
 8007890:	f000 809a 	beq.w	80079c8 <_dtoa_r+0x468>
 8007894:	9b00      	ldr	r3, [sp, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	dd32      	ble.n	8007900 <_dtoa_r+0x3a0>
 800789a:	4ab7      	ldr	r2, [pc, #732]	; (8007b78 <_dtoa_r+0x618>)
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078a8:	9b00      	ldr	r3, [sp, #0]
 80078aa:	05d8      	lsls	r0, r3, #23
 80078ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80078b0:	d516      	bpl.n	80078e0 <_dtoa_r+0x380>
 80078b2:	4bb2      	ldr	r3, [pc, #712]	; (8007b7c <_dtoa_r+0x61c>)
 80078b4:	ec51 0b19 	vmov	r0, r1, d9
 80078b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078bc:	f7f8 ffce 	bl	800085c <__aeabi_ddiv>
 80078c0:	f007 070f 	and.w	r7, r7, #15
 80078c4:	4682      	mov	sl, r0
 80078c6:	468b      	mov	fp, r1
 80078c8:	2503      	movs	r5, #3
 80078ca:	4eac      	ldr	r6, [pc, #688]	; (8007b7c <_dtoa_r+0x61c>)
 80078cc:	b957      	cbnz	r7, 80078e4 <_dtoa_r+0x384>
 80078ce:	4642      	mov	r2, r8
 80078d0:	464b      	mov	r3, r9
 80078d2:	4650      	mov	r0, sl
 80078d4:	4659      	mov	r1, fp
 80078d6:	f7f8 ffc1 	bl	800085c <__aeabi_ddiv>
 80078da:	4682      	mov	sl, r0
 80078dc:	468b      	mov	fp, r1
 80078de:	e028      	b.n	8007932 <_dtoa_r+0x3d2>
 80078e0:	2502      	movs	r5, #2
 80078e2:	e7f2      	b.n	80078ca <_dtoa_r+0x36a>
 80078e4:	07f9      	lsls	r1, r7, #31
 80078e6:	d508      	bpl.n	80078fa <_dtoa_r+0x39a>
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078f0:	f7f8 fe8a 	bl	8000608 <__aeabi_dmul>
 80078f4:	3501      	adds	r5, #1
 80078f6:	4680      	mov	r8, r0
 80078f8:	4689      	mov	r9, r1
 80078fa:	107f      	asrs	r7, r7, #1
 80078fc:	3608      	adds	r6, #8
 80078fe:	e7e5      	b.n	80078cc <_dtoa_r+0x36c>
 8007900:	f000 809b 	beq.w	8007a3a <_dtoa_r+0x4da>
 8007904:	9b00      	ldr	r3, [sp, #0]
 8007906:	4f9d      	ldr	r7, [pc, #628]	; (8007b7c <_dtoa_r+0x61c>)
 8007908:	425e      	negs	r6, r3
 800790a:	4b9b      	ldr	r3, [pc, #620]	; (8007b78 <_dtoa_r+0x618>)
 800790c:	f006 020f 	and.w	r2, r6, #15
 8007910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	ec51 0b19 	vmov	r0, r1, d9
 800791c:	f7f8 fe74 	bl	8000608 <__aeabi_dmul>
 8007920:	1136      	asrs	r6, r6, #4
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	2300      	movs	r3, #0
 8007928:	2502      	movs	r5, #2
 800792a:	2e00      	cmp	r6, #0
 800792c:	d17a      	bne.n	8007a24 <_dtoa_r+0x4c4>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1d3      	bne.n	80078da <_dtoa_r+0x37a>
 8007932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8082 	beq.w	8007a3e <_dtoa_r+0x4de>
 800793a:	4b91      	ldr	r3, [pc, #580]	; (8007b80 <_dtoa_r+0x620>)
 800793c:	2200      	movs	r2, #0
 800793e:	4650      	mov	r0, sl
 8007940:	4659      	mov	r1, fp
 8007942:	f7f9 f8d3 	bl	8000aec <__aeabi_dcmplt>
 8007946:	2800      	cmp	r0, #0
 8007948:	d079      	beq.n	8007a3e <_dtoa_r+0x4de>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d076      	beq.n	8007a3e <_dtoa_r+0x4de>
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dd36      	ble.n	80079c4 <_dtoa_r+0x464>
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	4650      	mov	r0, sl
 800795a:	4659      	mov	r1, fp
 800795c:	1e5f      	subs	r7, r3, #1
 800795e:	2200      	movs	r2, #0
 8007960:	4b88      	ldr	r3, [pc, #544]	; (8007b84 <_dtoa_r+0x624>)
 8007962:	f7f8 fe51 	bl	8000608 <__aeabi_dmul>
 8007966:	9e02      	ldr	r6, [sp, #8]
 8007968:	4682      	mov	sl, r0
 800796a:	468b      	mov	fp, r1
 800796c:	3501      	adds	r5, #1
 800796e:	4628      	mov	r0, r5
 8007970:	f7f8 fde0 	bl	8000534 <__aeabi_i2d>
 8007974:	4652      	mov	r2, sl
 8007976:	465b      	mov	r3, fp
 8007978:	f7f8 fe46 	bl	8000608 <__aeabi_dmul>
 800797c:	4b82      	ldr	r3, [pc, #520]	; (8007b88 <_dtoa_r+0x628>)
 800797e:	2200      	movs	r2, #0
 8007980:	f7f8 fc8c 	bl	800029c <__adddf3>
 8007984:	46d0      	mov	r8, sl
 8007986:	46d9      	mov	r9, fp
 8007988:	4682      	mov	sl, r0
 800798a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800798e:	2e00      	cmp	r6, #0
 8007990:	d158      	bne.n	8007a44 <_dtoa_r+0x4e4>
 8007992:	4b7e      	ldr	r3, [pc, #504]	; (8007b8c <_dtoa_r+0x62c>)
 8007994:	2200      	movs	r2, #0
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f8 fc7d 	bl	8000298 <__aeabi_dsub>
 800799e:	4652      	mov	r2, sl
 80079a0:	465b      	mov	r3, fp
 80079a2:	4680      	mov	r8, r0
 80079a4:	4689      	mov	r9, r1
 80079a6:	f7f9 f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	f040 8295 	bne.w	8007eda <_dtoa_r+0x97a>
 80079b0:	4652      	mov	r2, sl
 80079b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079b6:	4640      	mov	r0, r8
 80079b8:	4649      	mov	r1, r9
 80079ba:	f7f9 f897 	bl	8000aec <__aeabi_dcmplt>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f040 8289 	bne.w	8007ed6 <_dtoa_r+0x976>
 80079c4:	ec5b ab19 	vmov	sl, fp, d9
 80079c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f2c0 8148 	blt.w	8007c60 <_dtoa_r+0x700>
 80079d0:	9a00      	ldr	r2, [sp, #0]
 80079d2:	2a0e      	cmp	r2, #14
 80079d4:	f300 8144 	bgt.w	8007c60 <_dtoa_r+0x700>
 80079d8:	4b67      	ldr	r3, [pc, #412]	; (8007b78 <_dtoa_r+0x618>)
 80079da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f280 80d5 	bge.w	8007b94 <_dtoa_r+0x634>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f300 80d1 	bgt.w	8007b94 <_dtoa_r+0x634>
 80079f2:	f040 826f 	bne.w	8007ed4 <_dtoa_r+0x974>
 80079f6:	4b65      	ldr	r3, [pc, #404]	; (8007b8c <_dtoa_r+0x62c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	f7f8 fe03 	bl	8000608 <__aeabi_dmul>
 8007a02:	4652      	mov	r2, sl
 8007a04:	465b      	mov	r3, fp
 8007a06:	f7f9 f885 	bl	8000b14 <__aeabi_dcmpge>
 8007a0a:	9e03      	ldr	r6, [sp, #12]
 8007a0c:	4637      	mov	r7, r6
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f040 8245 	bne.w	8007e9e <_dtoa_r+0x93e>
 8007a14:	9d01      	ldr	r5, [sp, #4]
 8007a16:	2331      	movs	r3, #49	; 0x31
 8007a18:	f805 3b01 	strb.w	r3, [r5], #1
 8007a1c:	9b00      	ldr	r3, [sp, #0]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	e240      	b.n	8007ea6 <_dtoa_r+0x946>
 8007a24:	07f2      	lsls	r2, r6, #31
 8007a26:	d505      	bpl.n	8007a34 <_dtoa_r+0x4d4>
 8007a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a2c:	f7f8 fdec 	bl	8000608 <__aeabi_dmul>
 8007a30:	3501      	adds	r5, #1
 8007a32:	2301      	movs	r3, #1
 8007a34:	1076      	asrs	r6, r6, #1
 8007a36:	3708      	adds	r7, #8
 8007a38:	e777      	b.n	800792a <_dtoa_r+0x3ca>
 8007a3a:	2502      	movs	r5, #2
 8007a3c:	e779      	b.n	8007932 <_dtoa_r+0x3d2>
 8007a3e:	9f00      	ldr	r7, [sp, #0]
 8007a40:	9e03      	ldr	r6, [sp, #12]
 8007a42:	e794      	b.n	800796e <_dtoa_r+0x40e>
 8007a44:	9901      	ldr	r1, [sp, #4]
 8007a46:	4b4c      	ldr	r3, [pc, #304]	; (8007b78 <_dtoa_r+0x618>)
 8007a48:	4431      	add	r1, r6
 8007a4a:	910d      	str	r1, [sp, #52]	; 0x34
 8007a4c:	9908      	ldr	r1, [sp, #32]
 8007a4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d043      	beq.n	8007ae2 <_dtoa_r+0x582>
 8007a5a:	494d      	ldr	r1, [pc, #308]	; (8007b90 <_dtoa_r+0x630>)
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f7f8 fefd 	bl	800085c <__aeabi_ddiv>
 8007a62:	4652      	mov	r2, sl
 8007a64:	465b      	mov	r3, fp
 8007a66:	f7f8 fc17 	bl	8000298 <__aeabi_dsub>
 8007a6a:	9d01      	ldr	r5, [sp, #4]
 8007a6c:	4682      	mov	sl, r0
 8007a6e:	468b      	mov	fp, r1
 8007a70:	4649      	mov	r1, r9
 8007a72:	4640      	mov	r0, r8
 8007a74:	f7f9 f878 	bl	8000b68 <__aeabi_d2iz>
 8007a78:	4606      	mov	r6, r0
 8007a7a:	f7f8 fd5b 	bl	8000534 <__aeabi_i2d>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fc07 	bl	8000298 <__aeabi_dsub>
 8007a8a:	3630      	adds	r6, #48	; 0x30
 8007a8c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a90:	4652      	mov	r2, sl
 8007a92:	465b      	mov	r3, fp
 8007a94:	4680      	mov	r8, r0
 8007a96:	4689      	mov	r9, r1
 8007a98:	f7f9 f828 	bl	8000aec <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d163      	bne.n	8007b68 <_dtoa_r+0x608>
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	4936      	ldr	r1, [pc, #216]	; (8007b80 <_dtoa_r+0x620>)
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f7f8 fbf6 	bl	8000298 <__aeabi_dsub>
 8007aac:	4652      	mov	r2, sl
 8007aae:	465b      	mov	r3, fp
 8007ab0:	f7f9 f81c 	bl	8000aec <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 80b5 	bne.w	8007c24 <_dtoa_r+0x6c4>
 8007aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abc:	429d      	cmp	r5, r3
 8007abe:	d081      	beq.n	80079c4 <_dtoa_r+0x464>
 8007ac0:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <_dtoa_r+0x624>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	f7f8 fd9e 	bl	8000608 <__aeabi_dmul>
 8007acc:	4b2d      	ldr	r3, [pc, #180]	; (8007b84 <_dtoa_r+0x624>)
 8007ace:	4682      	mov	sl, r0
 8007ad0:	468b      	mov	fp, r1
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f7f8 fd96 	bl	8000608 <__aeabi_dmul>
 8007adc:	4680      	mov	r8, r0
 8007ade:	4689      	mov	r9, r1
 8007ae0:	e7c6      	b.n	8007a70 <_dtoa_r+0x510>
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	f7f8 fd8f 	bl	8000608 <__aeabi_dmul>
 8007aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aec:	9d01      	ldr	r5, [sp, #4]
 8007aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af0:	4682      	mov	sl, r0
 8007af2:	468b      	mov	fp, r1
 8007af4:	4649      	mov	r1, r9
 8007af6:	4640      	mov	r0, r8
 8007af8:	f7f9 f836 	bl	8000b68 <__aeabi_d2iz>
 8007afc:	4606      	mov	r6, r0
 8007afe:	f7f8 fd19 	bl	8000534 <__aeabi_i2d>
 8007b02:	3630      	adds	r6, #48	; 0x30
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4640      	mov	r0, r8
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	f7f8 fbc4 	bl	8000298 <__aeabi_dsub>
 8007b10:	f805 6b01 	strb.w	r6, [r5], #1
 8007b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b16:	429d      	cmp	r5, r3
 8007b18:	4680      	mov	r8, r0
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	d124      	bne.n	8007b6c <_dtoa_r+0x60c>
 8007b22:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <_dtoa_r+0x630>)
 8007b24:	4650      	mov	r0, sl
 8007b26:	4659      	mov	r1, fp
 8007b28:	f7f8 fbb8 	bl	800029c <__adddf3>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f8 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d173      	bne.n	8007c24 <_dtoa_r+0x6c4>
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	465b      	mov	r3, fp
 8007b40:	4913      	ldr	r1, [pc, #76]	; (8007b90 <_dtoa_r+0x630>)
 8007b42:	2000      	movs	r0, #0
 8007b44:	f7f8 fba8 	bl	8000298 <__aeabi_dsub>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	4649      	mov	r1, r9
 8007b50:	f7f8 ffcc 	bl	8000aec <__aeabi_dcmplt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f43f af35 	beq.w	80079c4 <_dtoa_r+0x464>
 8007b5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b5c:	1e6b      	subs	r3, r5, #1
 8007b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b64:	2b30      	cmp	r3, #48	; 0x30
 8007b66:	d0f8      	beq.n	8007b5a <_dtoa_r+0x5fa>
 8007b68:	9700      	str	r7, [sp, #0]
 8007b6a:	e049      	b.n	8007c00 <_dtoa_r+0x6a0>
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <_dtoa_r+0x624>)
 8007b6e:	f7f8 fd4b 	bl	8000608 <__aeabi_dmul>
 8007b72:	4680      	mov	r8, r0
 8007b74:	4689      	mov	r9, r1
 8007b76:	e7bd      	b.n	8007af4 <_dtoa_r+0x594>
 8007b78:	08009738 	.word	0x08009738
 8007b7c:	08009710 	.word	0x08009710
 8007b80:	3ff00000 	.word	0x3ff00000
 8007b84:	40240000 	.word	0x40240000
 8007b88:	401c0000 	.word	0x401c0000
 8007b8c:	40140000 	.word	0x40140000
 8007b90:	3fe00000 	.word	0x3fe00000
 8007b94:	9d01      	ldr	r5, [sp, #4]
 8007b96:	4656      	mov	r6, sl
 8007b98:	465f      	mov	r7, fp
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f8 fe5b 	bl	800085c <__aeabi_ddiv>
 8007ba6:	f7f8 ffdf 	bl	8000b68 <__aeabi_d2iz>
 8007baa:	4682      	mov	sl, r0
 8007bac:	f7f8 fcc2 	bl	8000534 <__aeabi_i2d>
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	f7f8 fd28 	bl	8000608 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007bc4:	f7f8 fb68 	bl	8000298 <__aeabi_dsub>
 8007bc8:	f805 6b01 	strb.w	r6, [r5], #1
 8007bcc:	9e01      	ldr	r6, [sp, #4]
 8007bce:	9f03      	ldr	r7, [sp, #12]
 8007bd0:	1bae      	subs	r6, r5, r6
 8007bd2:	42b7      	cmp	r7, r6
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	d135      	bne.n	8007c46 <_dtoa_r+0x6e6>
 8007bda:	f7f8 fb5f 	bl	800029c <__adddf3>
 8007bde:	4642      	mov	r2, r8
 8007be0:	464b      	mov	r3, r9
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	f7f8 ff9f 	bl	8000b28 <__aeabi_dcmpgt>
 8007bea:	b9d0      	cbnz	r0, 8007c22 <_dtoa_r+0x6c2>
 8007bec:	4642      	mov	r2, r8
 8007bee:	464b      	mov	r3, r9
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bf8:	b110      	cbz	r0, 8007c00 <_dtoa_r+0x6a0>
 8007bfa:	f01a 0f01 	tst.w	sl, #1
 8007bfe:	d110      	bne.n	8007c22 <_dtoa_r+0x6c2>
 8007c00:	4620      	mov	r0, r4
 8007c02:	ee18 1a10 	vmov	r1, s16
 8007c06:	f000 fbc5 	bl	8008394 <_Bfree>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9800      	ldr	r0, [sp, #0]
 8007c0e:	702b      	strb	r3, [r5, #0]
 8007c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c12:	3001      	adds	r0, #1
 8007c14:	6018      	str	r0, [r3, #0]
 8007c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f43f acf1 	beq.w	8007600 <_dtoa_r+0xa0>
 8007c1e:	601d      	str	r5, [r3, #0]
 8007c20:	e4ee      	b.n	8007600 <_dtoa_r+0xa0>
 8007c22:	9f00      	ldr	r7, [sp, #0]
 8007c24:	462b      	mov	r3, r5
 8007c26:	461d      	mov	r5, r3
 8007c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2c:	2a39      	cmp	r2, #57	; 0x39
 8007c2e:	d106      	bne.n	8007c3e <_dtoa_r+0x6de>
 8007c30:	9a01      	ldr	r2, [sp, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d1f7      	bne.n	8007c26 <_dtoa_r+0x6c6>
 8007c36:	9901      	ldr	r1, [sp, #4]
 8007c38:	2230      	movs	r2, #48	; 0x30
 8007c3a:	3701      	adds	r7, #1
 8007c3c:	700a      	strb	r2, [r1, #0]
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	3201      	adds	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	e790      	b.n	8007b68 <_dtoa_r+0x608>
 8007c46:	4ba6      	ldr	r3, [pc, #664]	; (8007ee0 <_dtoa_r+0x980>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f7f8 fcdd 	bl	8000608 <__aeabi_dmul>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2300      	movs	r3, #0
 8007c52:	4606      	mov	r6, r0
 8007c54:	460f      	mov	r7, r1
 8007c56:	f7f8 ff3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d09d      	beq.n	8007b9a <_dtoa_r+0x63a>
 8007c5e:	e7cf      	b.n	8007c00 <_dtoa_r+0x6a0>
 8007c60:	9a08      	ldr	r2, [sp, #32]
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	f000 80d7 	beq.w	8007e16 <_dtoa_r+0x8b6>
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	2a01      	cmp	r2, #1
 8007c6c:	f300 80ba 	bgt.w	8007de4 <_dtoa_r+0x884>
 8007c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	f000 80b2 	beq.w	8007ddc <_dtoa_r+0x87c>
 8007c78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c7c:	9e07      	ldr	r6, [sp, #28]
 8007c7e:	9d04      	ldr	r5, [sp, #16]
 8007c80:	9a04      	ldr	r2, [sp, #16]
 8007c82:	441a      	add	r2, r3
 8007c84:	9204      	str	r2, [sp, #16]
 8007c86:	9a05      	ldr	r2, [sp, #20]
 8007c88:	2101      	movs	r1, #1
 8007c8a:	441a      	add	r2, r3
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	9205      	str	r2, [sp, #20]
 8007c90:	f000 fc38 	bl	8008504 <__i2b>
 8007c94:	4607      	mov	r7, r0
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	dd0c      	ble.n	8007cb4 <_dtoa_r+0x754>
 8007c9a:	9b05      	ldr	r3, [sp, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd09      	ble.n	8007cb4 <_dtoa_r+0x754>
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	9a04      	ldr	r2, [sp, #16]
 8007ca4:	bfa8      	it	ge
 8007ca6:	462b      	movge	r3, r5
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	9204      	str	r2, [sp, #16]
 8007cac:	9a05      	ldr	r2, [sp, #20]
 8007cae:	1aed      	subs	r5, r5, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	b31b      	cbz	r3, 8007d00 <_dtoa_r+0x7a0>
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80af 	beq.w	8007e1e <_dtoa_r+0x8be>
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	dd13      	ble.n	8007cec <_dtoa_r+0x78c>
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fcdb 	bl	8008684 <__pow5mult>
 8007cce:	ee18 2a10 	vmov	r2, s16
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 fc2a 	bl	8008530 <__multiply>
 8007cdc:	ee18 1a10 	vmov	r1, s16
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 fb56 	bl	8008394 <_Bfree>
 8007ce8:	ee08 8a10 	vmov	s16, r8
 8007cec:	9b07      	ldr	r3, [sp, #28]
 8007cee:	1b9a      	subs	r2, r3, r6
 8007cf0:	d006      	beq.n	8007d00 <_dtoa_r+0x7a0>
 8007cf2:	ee18 1a10 	vmov	r1, s16
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 fcc4 	bl	8008684 <__pow5mult>
 8007cfc:	ee08 0a10 	vmov	s16, r0
 8007d00:	2101      	movs	r1, #1
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fbfe 	bl	8008504 <__i2b>
 8007d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	f340 8088 	ble.w	8007e22 <_dtoa_r+0x8c2>
 8007d12:	461a      	mov	r2, r3
 8007d14:	4601      	mov	r1, r0
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fcb4 	bl	8008684 <__pow5mult>
 8007d1c:	9b06      	ldr	r3, [sp, #24]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	4606      	mov	r6, r0
 8007d22:	f340 8081 	ble.w	8007e28 <_dtoa_r+0x8c8>
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	6933      	ldr	r3, [r6, #16]
 8007d2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d30:	6918      	ldr	r0, [r3, #16]
 8007d32:	f000 fb97 	bl	8008464 <__hi0bits>
 8007d36:	f1c0 0020 	rsb	r0, r0, #32
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	4418      	add	r0, r3
 8007d3e:	f010 001f 	ands.w	r0, r0, #31
 8007d42:	f000 8092 	beq.w	8007e6a <_dtoa_r+0x90a>
 8007d46:	f1c0 0320 	rsb	r3, r0, #32
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	f340 808a 	ble.w	8007e64 <_dtoa_r+0x904>
 8007d50:	f1c0 001c 	rsb	r0, r0, #28
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	4403      	add	r3, r0
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	9b05      	ldr	r3, [sp, #20]
 8007d5c:	4403      	add	r3, r0
 8007d5e:	4405      	add	r5, r0
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dd07      	ble.n	8007d78 <_dtoa_r+0x818>
 8007d68:	ee18 1a10 	vmov	r1, s16
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 fce2 	bl	8008738 <__lshift>
 8007d74:	ee08 0a10 	vmov	s16, r0
 8007d78:	9b05      	ldr	r3, [sp, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dd05      	ble.n	8007d8a <_dtoa_r+0x82a>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	461a      	mov	r2, r3
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fcd8 	bl	8008738 <__lshift>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d06e      	beq.n	8007e6e <_dtoa_r+0x90e>
 8007d90:	ee18 0a10 	vmov	r0, s16
 8007d94:	4631      	mov	r1, r6
 8007d96:	f000 fd3f 	bl	8008818 <__mcmp>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	da67      	bge.n	8007e6e <_dtoa_r+0x90e>
 8007d9e:	9b00      	ldr	r3, [sp, #0]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	ee18 1a10 	vmov	r1, s16
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	220a      	movs	r2, #10
 8007daa:	2300      	movs	r3, #0
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fb13 	bl	80083d8 <__multadd>
 8007db2:	9b08      	ldr	r3, [sp, #32]
 8007db4:	ee08 0a10 	vmov	s16, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 81b1 	beq.w	8008120 <_dtoa_r+0xbc0>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	220a      	movs	r2, #10
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 fb07 	bl	80083d8 <__multadd>
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	4607      	mov	r7, r0
 8007dd0:	f300 808e 	bgt.w	8007ef0 <_dtoa_r+0x990>
 8007dd4:	9b06      	ldr	r3, [sp, #24]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	dc51      	bgt.n	8007e7e <_dtoa_r+0x91e>
 8007dda:	e089      	b.n	8007ef0 <_dtoa_r+0x990>
 8007ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007de2:	e74b      	b.n	8007c7c <_dtoa_r+0x71c>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1e5e      	subs	r6, r3, #1
 8007de8:	9b07      	ldr	r3, [sp, #28]
 8007dea:	42b3      	cmp	r3, r6
 8007dec:	bfbf      	itttt	lt
 8007dee:	9b07      	ldrlt	r3, [sp, #28]
 8007df0:	9607      	strlt	r6, [sp, #28]
 8007df2:	1af2      	sublt	r2, r6, r3
 8007df4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007df6:	bfb6      	itet	lt
 8007df8:	189b      	addlt	r3, r3, r2
 8007dfa:	1b9e      	subge	r6, r3, r6
 8007dfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	bfb8      	it	lt
 8007e02:	2600      	movlt	r6, #0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bfb7      	itett	lt
 8007e08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e10:	1a9d      	sublt	r5, r3, r2
 8007e12:	2300      	movlt	r3, #0
 8007e14:	e734      	b.n	8007c80 <_dtoa_r+0x720>
 8007e16:	9e07      	ldr	r6, [sp, #28]
 8007e18:	9d04      	ldr	r5, [sp, #16]
 8007e1a:	9f08      	ldr	r7, [sp, #32]
 8007e1c:	e73b      	b.n	8007c96 <_dtoa_r+0x736>
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	e767      	b.n	8007cf2 <_dtoa_r+0x792>
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	dc18      	bgt.n	8007e5a <_dtoa_r+0x8fa>
 8007e28:	f1ba 0f00 	cmp.w	sl, #0
 8007e2c:	d115      	bne.n	8007e5a <_dtoa_r+0x8fa>
 8007e2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e32:	b993      	cbnz	r3, 8007e5a <_dtoa_r+0x8fa>
 8007e34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e38:	0d1b      	lsrs	r3, r3, #20
 8007e3a:	051b      	lsls	r3, r3, #20
 8007e3c:	b183      	cbz	r3, 8007e60 <_dtoa_r+0x900>
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	3301      	adds	r3, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9b05      	ldr	r3, [sp, #20]
 8007e46:	3301      	adds	r3, #1
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	f04f 0801 	mov.w	r8, #1
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f47f af6a 	bne.w	8007d2a <_dtoa_r+0x7ca>
 8007e56:	2001      	movs	r0, #1
 8007e58:	e76f      	b.n	8007d3a <_dtoa_r+0x7da>
 8007e5a:	f04f 0800 	mov.w	r8, #0
 8007e5e:	e7f6      	b.n	8007e4e <_dtoa_r+0x8ee>
 8007e60:	4698      	mov	r8, r3
 8007e62:	e7f4      	b.n	8007e4e <_dtoa_r+0x8ee>
 8007e64:	f43f af7d 	beq.w	8007d62 <_dtoa_r+0x802>
 8007e68:	4618      	mov	r0, r3
 8007e6a:	301c      	adds	r0, #28
 8007e6c:	e772      	b.n	8007d54 <_dtoa_r+0x7f4>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dc37      	bgt.n	8007ee4 <_dtoa_r+0x984>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	dd34      	ble.n	8007ee4 <_dtoa_r+0x984>
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	9302      	str	r3, [sp, #8]
 8007e7e:	9b02      	ldr	r3, [sp, #8]
 8007e80:	b96b      	cbnz	r3, 8007e9e <_dtoa_r+0x93e>
 8007e82:	4631      	mov	r1, r6
 8007e84:	2205      	movs	r2, #5
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 faa6 	bl	80083d8 <__multadd>
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	ee18 0a10 	vmov	r0, s16
 8007e94:	f000 fcc0 	bl	8008818 <__mcmp>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f73f adbb 	bgt.w	8007a14 <_dtoa_r+0x4b4>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	9d01      	ldr	r5, [sp, #4]
 8007ea2:	43db      	mvns	r3, r3
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	f04f 0800 	mov.w	r8, #0
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fa71 	bl	8008394 <_Bfree>
 8007eb2:	2f00      	cmp	r7, #0
 8007eb4:	f43f aea4 	beq.w	8007c00 <_dtoa_r+0x6a0>
 8007eb8:	f1b8 0f00 	cmp.w	r8, #0
 8007ebc:	d005      	beq.n	8007eca <_dtoa_r+0x96a>
 8007ebe:	45b8      	cmp	r8, r7
 8007ec0:	d003      	beq.n	8007eca <_dtoa_r+0x96a>
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fa65 	bl	8008394 <_Bfree>
 8007eca:	4639      	mov	r1, r7
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fa61 	bl	8008394 <_Bfree>
 8007ed2:	e695      	b.n	8007c00 <_dtoa_r+0x6a0>
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	4637      	mov	r7, r6
 8007ed8:	e7e1      	b.n	8007e9e <_dtoa_r+0x93e>
 8007eda:	9700      	str	r7, [sp, #0]
 8007edc:	4637      	mov	r7, r6
 8007ede:	e599      	b.n	8007a14 <_dtoa_r+0x4b4>
 8007ee0:	40240000 	.word	0x40240000
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80ca 	beq.w	8008080 <_dtoa_r+0xb20>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	9302      	str	r3, [sp, #8]
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	dd05      	ble.n	8007f00 <_dtoa_r+0x9a0>
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fc1d 	bl	8008738 <__lshift>
 8007efe:	4607      	mov	r7, r0
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	d05b      	beq.n	8007fbe <_dtoa_r+0xa5e>
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fa03 	bl	8008314 <_Balloc>
 8007f0e:	4605      	mov	r5, r0
 8007f10:	b928      	cbnz	r0, 8007f1e <_dtoa_r+0x9be>
 8007f12:	4b87      	ldr	r3, [pc, #540]	; (8008130 <_dtoa_r+0xbd0>)
 8007f14:	4602      	mov	r2, r0
 8007f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f1a:	f7ff bb3b 	b.w	8007594 <_dtoa_r+0x34>
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	3202      	adds	r2, #2
 8007f22:	0092      	lsls	r2, r2, #2
 8007f24:	f107 010c 	add.w	r1, r7, #12
 8007f28:	300c      	adds	r0, #12
 8007f2a:	f7fe fc76 	bl	800681a <memcpy>
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4629      	mov	r1, r5
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 fc00 	bl	8008738 <__lshift>
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	f103 0901 	add.w	r9, r3, #1
 8007f3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f42:	4413      	add	r3, r2
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	f00a 0301 	and.w	r3, sl, #1
 8007f4a:	46b8      	mov	r8, r7
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	4607      	mov	r7, r0
 8007f50:	4631      	mov	r1, r6
 8007f52:	ee18 0a10 	vmov	r0, s16
 8007f56:	f7ff fa75 	bl	8007444 <quorem>
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	9002      	str	r0, [sp, #8]
 8007f5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f62:	ee18 0a10 	vmov	r0, s16
 8007f66:	f000 fc57 	bl	8008818 <__mcmp>
 8007f6a:	463a      	mov	r2, r7
 8007f6c:	9003      	str	r0, [sp, #12]
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fc6d 	bl	8008850 <__mdiff>
 8007f76:	68c2      	ldr	r2, [r0, #12]
 8007f78:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	bb02      	cbnz	r2, 8007fc2 <_dtoa_r+0xa62>
 8007f80:	4601      	mov	r1, r0
 8007f82:	ee18 0a10 	vmov	r0, s16
 8007f86:	f000 fc47 	bl	8008818 <__mcmp>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4620      	mov	r0, r4
 8007f90:	9207      	str	r2, [sp, #28]
 8007f92:	f000 f9ff 	bl	8008394 <_Bfree>
 8007f96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f9a:	ea43 0102 	orr.w	r1, r3, r2
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	464d      	mov	r5, r9
 8007fa4:	d10f      	bne.n	8007fc6 <_dtoa_r+0xa66>
 8007fa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007faa:	d02a      	beq.n	8008002 <_dtoa_r+0xaa2>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd02      	ble.n	8007fb8 <_dtoa_r+0xa58>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007fb8:	f88b a000 	strb.w	sl, [fp]
 8007fbc:	e775      	b.n	8007eaa <_dtoa_r+0x94a>
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	e7ba      	b.n	8007f38 <_dtoa_r+0x9d8>
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	e7e2      	b.n	8007f8c <_dtoa_r+0xa2c>
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	db04      	blt.n	8007fd6 <_dtoa_r+0xa76>
 8007fcc:	9906      	ldr	r1, [sp, #24]
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	9904      	ldr	r1, [sp, #16]
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	d122      	bne.n	800801c <_dtoa_r+0xabc>
 8007fd6:	2a00      	cmp	r2, #0
 8007fd8:	ddee      	ble.n	8007fb8 <_dtoa_r+0xa58>
 8007fda:	ee18 1a10 	vmov	r1, s16
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fba9 	bl	8008738 <__lshift>
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	ee08 0a10 	vmov	s16, r0
 8007fec:	f000 fc14 	bl	8008818 <__mcmp>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	dc03      	bgt.n	8007ffc <_dtoa_r+0xa9c>
 8007ff4:	d1e0      	bne.n	8007fb8 <_dtoa_r+0xa58>
 8007ff6:	f01a 0f01 	tst.w	sl, #1
 8007ffa:	d0dd      	beq.n	8007fb8 <_dtoa_r+0xa58>
 8007ffc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008000:	d1d7      	bne.n	8007fb2 <_dtoa_r+0xa52>
 8008002:	2339      	movs	r3, #57	; 0x39
 8008004:	f88b 3000 	strb.w	r3, [fp]
 8008008:	462b      	mov	r3, r5
 800800a:	461d      	mov	r5, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008012:	2a39      	cmp	r2, #57	; 0x39
 8008014:	d071      	beq.n	80080fa <_dtoa_r+0xb9a>
 8008016:	3201      	adds	r2, #1
 8008018:	701a      	strb	r2, [r3, #0]
 800801a:	e746      	b.n	8007eaa <_dtoa_r+0x94a>
 800801c:	2a00      	cmp	r2, #0
 800801e:	dd07      	ble.n	8008030 <_dtoa_r+0xad0>
 8008020:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008024:	d0ed      	beq.n	8008002 <_dtoa_r+0xaa2>
 8008026:	f10a 0301 	add.w	r3, sl, #1
 800802a:	f88b 3000 	strb.w	r3, [fp]
 800802e:	e73c      	b.n	8007eaa <_dtoa_r+0x94a>
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008036:	4599      	cmp	r9, r3
 8008038:	d047      	beq.n	80080ca <_dtoa_r+0xb6a>
 800803a:	ee18 1a10 	vmov	r1, s16
 800803e:	2300      	movs	r3, #0
 8008040:	220a      	movs	r2, #10
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f9c8 	bl	80083d8 <__multadd>
 8008048:	45b8      	cmp	r8, r7
 800804a:	ee08 0a10 	vmov	s16, r0
 800804e:	f04f 0300 	mov.w	r3, #0
 8008052:	f04f 020a 	mov.w	r2, #10
 8008056:	4641      	mov	r1, r8
 8008058:	4620      	mov	r0, r4
 800805a:	d106      	bne.n	800806a <_dtoa_r+0xb0a>
 800805c:	f000 f9bc 	bl	80083d8 <__multadd>
 8008060:	4680      	mov	r8, r0
 8008062:	4607      	mov	r7, r0
 8008064:	f109 0901 	add.w	r9, r9, #1
 8008068:	e772      	b.n	8007f50 <_dtoa_r+0x9f0>
 800806a:	f000 f9b5 	bl	80083d8 <__multadd>
 800806e:	4639      	mov	r1, r7
 8008070:	4680      	mov	r8, r0
 8008072:	2300      	movs	r3, #0
 8008074:	220a      	movs	r2, #10
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f9ae 	bl	80083d8 <__multadd>
 800807c:	4607      	mov	r7, r0
 800807e:	e7f1      	b.n	8008064 <_dtoa_r+0xb04>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	9302      	str	r3, [sp, #8]
 8008084:	9d01      	ldr	r5, [sp, #4]
 8008086:	ee18 0a10 	vmov	r0, s16
 800808a:	4631      	mov	r1, r6
 800808c:	f7ff f9da 	bl	8007444 <quorem>
 8008090:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	f805 ab01 	strb.w	sl, [r5], #1
 800809a:	1aea      	subs	r2, r5, r3
 800809c:	9b02      	ldr	r3, [sp, #8]
 800809e:	4293      	cmp	r3, r2
 80080a0:	dd09      	ble.n	80080b6 <_dtoa_r+0xb56>
 80080a2:	ee18 1a10 	vmov	r1, s16
 80080a6:	2300      	movs	r3, #0
 80080a8:	220a      	movs	r2, #10
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f994 	bl	80083d8 <__multadd>
 80080b0:	ee08 0a10 	vmov	s16, r0
 80080b4:	e7e7      	b.n	8008086 <_dtoa_r+0xb26>
 80080b6:	9b02      	ldr	r3, [sp, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfc8      	it	gt
 80080bc:	461d      	movgt	r5, r3
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	bfd8      	it	le
 80080c2:	2501      	movle	r5, #1
 80080c4:	441d      	add	r5, r3
 80080c6:	f04f 0800 	mov.w	r8, #0
 80080ca:	ee18 1a10 	vmov	r1, s16
 80080ce:	2201      	movs	r2, #1
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fb31 	bl	8008738 <__lshift>
 80080d6:	4631      	mov	r1, r6
 80080d8:	ee08 0a10 	vmov	s16, r0
 80080dc:	f000 fb9c 	bl	8008818 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dc91      	bgt.n	8008008 <_dtoa_r+0xaa8>
 80080e4:	d102      	bne.n	80080ec <_dtoa_r+0xb8c>
 80080e6:	f01a 0f01 	tst.w	sl, #1
 80080ea:	d18d      	bne.n	8008008 <_dtoa_r+0xaa8>
 80080ec:	462b      	mov	r3, r5
 80080ee:	461d      	mov	r5, r3
 80080f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f4:	2a30      	cmp	r2, #48	; 0x30
 80080f6:	d0fa      	beq.n	80080ee <_dtoa_r+0xb8e>
 80080f8:	e6d7      	b.n	8007eaa <_dtoa_r+0x94a>
 80080fa:	9a01      	ldr	r2, [sp, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d184      	bne.n	800800a <_dtoa_r+0xaaa>
 8008100:	9b00      	ldr	r3, [sp, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	2331      	movs	r3, #49	; 0x31
 8008108:	7013      	strb	r3, [r2, #0]
 800810a:	e6ce      	b.n	8007eaa <_dtoa_r+0x94a>
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <_dtoa_r+0xbd4>)
 800810e:	f7ff ba95 	b.w	800763c <_dtoa_r+0xdc>
 8008112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008114:	2b00      	cmp	r3, #0
 8008116:	f47f aa6e 	bne.w	80075f6 <_dtoa_r+0x96>
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <_dtoa_r+0xbd8>)
 800811c:	f7ff ba8e 	b.w	800763c <_dtoa_r+0xdc>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dcae      	bgt.n	8008084 <_dtoa_r+0xb24>
 8008126:	9b06      	ldr	r3, [sp, #24]
 8008128:	2b02      	cmp	r3, #2
 800812a:	f73f aea8 	bgt.w	8007e7e <_dtoa_r+0x91e>
 800812e:	e7a9      	b.n	8008084 <_dtoa_r+0xb24>
 8008130:	080096a3 	.word	0x080096a3
 8008134:	08009600 	.word	0x08009600
 8008138:	08009624 	.word	0x08009624

0800813c <__sflush_r>:
 800813c:	898a      	ldrh	r2, [r1, #12]
 800813e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	0710      	lsls	r0, r2, #28
 8008146:	460c      	mov	r4, r1
 8008148:	d458      	bmi.n	80081fc <__sflush_r+0xc0>
 800814a:	684b      	ldr	r3, [r1, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dc05      	bgt.n	800815c <__sflush_r+0x20>
 8008150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc02      	bgt.n	800815c <__sflush_r+0x20>
 8008156:	2000      	movs	r0, #0
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800815e:	2e00      	cmp	r6, #0
 8008160:	d0f9      	beq.n	8008156 <__sflush_r+0x1a>
 8008162:	2300      	movs	r3, #0
 8008164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008168:	682f      	ldr	r7, [r5, #0]
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	d032      	beq.n	80081d4 <__sflush_r+0x98>
 800816e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	075a      	lsls	r2, r3, #29
 8008174:	d505      	bpl.n	8008182 <__sflush_r+0x46>
 8008176:	6863      	ldr	r3, [r4, #4]
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817c:	b10b      	cbz	r3, 8008182 <__sflush_r+0x46>
 800817e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008180:	1ac0      	subs	r0, r0, r3
 8008182:	2300      	movs	r3, #0
 8008184:	4602      	mov	r2, r0
 8008186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008188:	6a21      	ldr	r1, [r4, #32]
 800818a:	4628      	mov	r0, r5
 800818c:	47b0      	blx	r6
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	d106      	bne.n	80081a2 <__sflush_r+0x66>
 8008194:	6829      	ldr	r1, [r5, #0]
 8008196:	291d      	cmp	r1, #29
 8008198:	d82c      	bhi.n	80081f4 <__sflush_r+0xb8>
 800819a:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <__sflush_r+0x108>)
 800819c:	40ca      	lsrs	r2, r1
 800819e:	07d6      	lsls	r6, r2, #31
 80081a0:	d528      	bpl.n	80081f4 <__sflush_r+0xb8>
 80081a2:	2200      	movs	r2, #0
 80081a4:	6062      	str	r2, [r4, #4]
 80081a6:	04d9      	lsls	r1, r3, #19
 80081a8:	6922      	ldr	r2, [r4, #16]
 80081aa:	6022      	str	r2, [r4, #0]
 80081ac:	d504      	bpl.n	80081b8 <__sflush_r+0x7c>
 80081ae:	1c42      	adds	r2, r0, #1
 80081b0:	d101      	bne.n	80081b6 <__sflush_r+0x7a>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	b903      	cbnz	r3, 80081b8 <__sflush_r+0x7c>
 80081b6:	6560      	str	r0, [r4, #84]	; 0x54
 80081b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ba:	602f      	str	r7, [r5, #0]
 80081bc:	2900      	cmp	r1, #0
 80081be:	d0ca      	beq.n	8008156 <__sflush_r+0x1a>
 80081c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c4:	4299      	cmp	r1, r3
 80081c6:	d002      	beq.n	80081ce <__sflush_r+0x92>
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 fc3d 	bl	8008a48 <_free_r>
 80081ce:	2000      	movs	r0, #0
 80081d0:	6360      	str	r0, [r4, #52]	; 0x34
 80081d2:	e7c1      	b.n	8008158 <__sflush_r+0x1c>
 80081d4:	6a21      	ldr	r1, [r4, #32]
 80081d6:	2301      	movs	r3, #1
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	1c41      	adds	r1, r0, #1
 80081de:	d1c7      	bne.n	8008170 <__sflush_r+0x34>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c4      	beq.n	8008170 <__sflush_r+0x34>
 80081e6:	2b1d      	cmp	r3, #29
 80081e8:	d001      	beq.n	80081ee <__sflush_r+0xb2>
 80081ea:	2b16      	cmp	r3, #22
 80081ec:	d101      	bne.n	80081f2 <__sflush_r+0xb6>
 80081ee:	602f      	str	r7, [r5, #0]
 80081f0:	e7b1      	b.n	8008156 <__sflush_r+0x1a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	e7ad      	b.n	8008158 <__sflush_r+0x1c>
 80081fc:	690f      	ldr	r7, [r1, #16]
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d0a9      	beq.n	8008156 <__sflush_r+0x1a>
 8008202:	0793      	lsls	r3, r2, #30
 8008204:	680e      	ldr	r6, [r1, #0]
 8008206:	bf08      	it	eq
 8008208:	694b      	ldreq	r3, [r1, #20]
 800820a:	600f      	str	r7, [r1, #0]
 800820c:	bf18      	it	ne
 800820e:	2300      	movne	r3, #0
 8008210:	eba6 0807 	sub.w	r8, r6, r7
 8008214:	608b      	str	r3, [r1, #8]
 8008216:	f1b8 0f00 	cmp.w	r8, #0
 800821a:	dd9c      	ble.n	8008156 <__sflush_r+0x1a>
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008220:	4643      	mov	r3, r8
 8008222:	463a      	mov	r2, r7
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	2800      	cmp	r0, #0
 800822a:	dc06      	bgt.n	800823a <__sflush_r+0xfe>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e78e      	b.n	8008158 <__sflush_r+0x1c>
 800823a:	4407      	add	r7, r0
 800823c:	eba8 0800 	sub.w	r8, r8, r0
 8008240:	e7e9      	b.n	8008216 <__sflush_r+0xda>
 8008242:	bf00      	nop
 8008244:	20400001 	.word	0x20400001

08008248 <_fflush_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b913      	cbnz	r3, 8008258 <_fflush_r+0x10>
 8008252:	2500      	movs	r5, #0
 8008254:	4628      	mov	r0, r5
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	b118      	cbz	r0, 8008262 <_fflush_r+0x1a>
 800825a:	6983      	ldr	r3, [r0, #24]
 800825c:	b90b      	cbnz	r3, 8008262 <_fflush_r+0x1a>
 800825e:	f7fe fa17 	bl	8006690 <__sinit>
 8008262:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <_fflush_r+0x6c>)
 8008264:	429c      	cmp	r4, r3
 8008266:	d11b      	bne.n	80082a0 <_fflush_r+0x58>
 8008268:	686c      	ldr	r4, [r5, #4]
 800826a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0ef      	beq.n	8008252 <_fflush_r+0xa>
 8008272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008274:	07d0      	lsls	r0, r2, #31
 8008276:	d404      	bmi.n	8008282 <_fflush_r+0x3a>
 8008278:	0599      	lsls	r1, r3, #22
 800827a:	d402      	bmi.n	8008282 <_fflush_r+0x3a>
 800827c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827e:	f7fe faca 	bl	8006816 <__retarget_lock_acquire_recursive>
 8008282:	4628      	mov	r0, r5
 8008284:	4621      	mov	r1, r4
 8008286:	f7ff ff59 	bl	800813c <__sflush_r>
 800828a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800828c:	07da      	lsls	r2, r3, #31
 800828e:	4605      	mov	r5, r0
 8008290:	d4e0      	bmi.n	8008254 <_fflush_r+0xc>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	059b      	lsls	r3, r3, #22
 8008296:	d4dd      	bmi.n	8008254 <_fflush_r+0xc>
 8008298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829a:	f7fe fabd 	bl	8006818 <__retarget_lock_release_recursive>
 800829e:	e7d9      	b.n	8008254 <_fflush_r+0xc>
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <_fflush_r+0x70>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d101      	bne.n	80082aa <_fflush_r+0x62>
 80082a6:	68ac      	ldr	r4, [r5, #8]
 80082a8:	e7df      	b.n	800826a <_fflush_r+0x22>
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <_fflush_r+0x74>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	bf08      	it	eq
 80082b0:	68ec      	ldreq	r4, [r5, #12]
 80082b2:	e7da      	b.n	800826a <_fflush_r+0x22>
 80082b4:	080095ac 	.word	0x080095ac
 80082b8:	080095cc 	.word	0x080095cc
 80082bc:	0800958c 	.word	0x0800958c

080082c0 <_localeconv_r>:
 80082c0:	4800      	ldr	r0, [pc, #0]	; (80082c4 <_localeconv_r+0x4>)
 80082c2:	4770      	bx	lr
 80082c4:	20000178 	.word	0x20000178

080082c8 <_lseek_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d07      	ldr	r5, [pc, #28]	; (80082e8 <_lseek_r+0x20>)
 80082cc:	4604      	mov	r4, r0
 80082ce:	4608      	mov	r0, r1
 80082d0:	4611      	mov	r1, r2
 80082d2:	2200      	movs	r2, #0
 80082d4:	602a      	str	r2, [r5, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f7f9 fe46 	bl	8001f68 <_lseek>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_lseek_r+0x1e>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_lseek_r+0x1e>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20004384 	.word	0x20004384

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f7fe bac9 	b.w	8006888 <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	20000024 	.word	0x20000024

080082fc <__malloc_lock>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__malloc_lock+0x8>)
 80082fe:	f7fe ba8a 	b.w	8006816 <__retarget_lock_acquire_recursive>
 8008302:	bf00      	nop
 8008304:	20004378 	.word	0x20004378

08008308 <__malloc_unlock>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__malloc_unlock+0x8>)
 800830a:	f7fe ba85 	b.w	8006818 <__retarget_lock_release_recursive>
 800830e:	bf00      	nop
 8008310:	20004378 	.word	0x20004378

08008314 <_Balloc>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	b976      	cbnz	r6, 800833c <_Balloc+0x28>
 800831e:	2010      	movs	r0, #16
 8008320:	f7ff ffe4 	bl	80082ec <malloc>
 8008324:	4602      	mov	r2, r0
 8008326:	6260      	str	r0, [r4, #36]	; 0x24
 8008328:	b920      	cbnz	r0, 8008334 <_Balloc+0x20>
 800832a:	4b18      	ldr	r3, [pc, #96]	; (800838c <_Balloc+0x78>)
 800832c:	4818      	ldr	r0, [pc, #96]	; (8008390 <_Balloc+0x7c>)
 800832e:	2166      	movs	r1, #102	; 0x66
 8008330:	f000 fd44 	bl	8008dbc <__assert_func>
 8008334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008338:	6006      	str	r6, [r0, #0]
 800833a:	60c6      	str	r6, [r0, #12]
 800833c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800833e:	68f3      	ldr	r3, [r6, #12]
 8008340:	b183      	cbz	r3, 8008364 <_Balloc+0x50>
 8008342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800834a:	b9b8      	cbnz	r0, 800837c <_Balloc+0x68>
 800834c:	2101      	movs	r1, #1
 800834e:	fa01 f605 	lsl.w	r6, r1, r5
 8008352:	1d72      	adds	r2, r6, #5
 8008354:	0092      	lsls	r2, r2, #2
 8008356:	4620      	mov	r0, r4
 8008358:	f000 fb60 	bl	8008a1c <_calloc_r>
 800835c:	b160      	cbz	r0, 8008378 <_Balloc+0x64>
 800835e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008362:	e00e      	b.n	8008382 <_Balloc+0x6e>
 8008364:	2221      	movs	r2, #33	; 0x21
 8008366:	2104      	movs	r1, #4
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fb57 	bl	8008a1c <_calloc_r>
 800836e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008370:	60f0      	str	r0, [r6, #12]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e4      	bne.n	8008342 <_Balloc+0x2e>
 8008378:	2000      	movs	r0, #0
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	6802      	ldr	r2, [r0, #0]
 800837e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008382:	2300      	movs	r3, #0
 8008384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008388:	e7f7      	b.n	800837a <_Balloc+0x66>
 800838a:	bf00      	nop
 800838c:	08009631 	.word	0x08009631
 8008390:	080096b4 	.word	0x080096b4

08008394 <_Bfree>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	b976      	cbnz	r6, 80083bc <_Bfree+0x28>
 800839e:	2010      	movs	r0, #16
 80083a0:	f7ff ffa4 	bl	80082ec <malloc>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6268      	str	r0, [r5, #36]	; 0x24
 80083a8:	b920      	cbnz	r0, 80083b4 <_Bfree+0x20>
 80083aa:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <_Bfree+0x3c>)
 80083ac:	4809      	ldr	r0, [pc, #36]	; (80083d4 <_Bfree+0x40>)
 80083ae:	218a      	movs	r1, #138	; 0x8a
 80083b0:	f000 fd04 	bl	8008dbc <__assert_func>
 80083b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083b8:	6006      	str	r6, [r0, #0]
 80083ba:	60c6      	str	r6, [r0, #12]
 80083bc:	b13c      	cbz	r4, 80083ce <_Bfree+0x3a>
 80083be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083c0:	6862      	ldr	r2, [r4, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083c8:	6021      	str	r1, [r4, #0]
 80083ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	08009631 	.word	0x08009631
 80083d4:	080096b4 	.word	0x080096b4

080083d8 <__multadd>:
 80083d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083dc:	690d      	ldr	r5, [r1, #16]
 80083de:	4607      	mov	r7, r0
 80083e0:	460c      	mov	r4, r1
 80083e2:	461e      	mov	r6, r3
 80083e4:	f101 0c14 	add.w	ip, r1, #20
 80083e8:	2000      	movs	r0, #0
 80083ea:	f8dc 3000 	ldr.w	r3, [ip]
 80083ee:	b299      	uxth	r1, r3
 80083f0:	fb02 6101 	mla	r1, r2, r1, r6
 80083f4:	0c1e      	lsrs	r6, r3, #16
 80083f6:	0c0b      	lsrs	r3, r1, #16
 80083f8:	fb02 3306 	mla	r3, r2, r6, r3
 80083fc:	b289      	uxth	r1, r1
 80083fe:	3001      	adds	r0, #1
 8008400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008404:	4285      	cmp	r5, r0
 8008406:	f84c 1b04 	str.w	r1, [ip], #4
 800840a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800840e:	dcec      	bgt.n	80083ea <__multadd+0x12>
 8008410:	b30e      	cbz	r6, 8008456 <__multadd+0x7e>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	42ab      	cmp	r3, r5
 8008416:	dc19      	bgt.n	800844c <__multadd+0x74>
 8008418:	6861      	ldr	r1, [r4, #4]
 800841a:	4638      	mov	r0, r7
 800841c:	3101      	adds	r1, #1
 800841e:	f7ff ff79 	bl	8008314 <_Balloc>
 8008422:	4680      	mov	r8, r0
 8008424:	b928      	cbnz	r0, 8008432 <__multadd+0x5a>
 8008426:	4602      	mov	r2, r0
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <__multadd+0x84>)
 800842a:	480d      	ldr	r0, [pc, #52]	; (8008460 <__multadd+0x88>)
 800842c:	21b5      	movs	r1, #181	; 0xb5
 800842e:	f000 fcc5 	bl	8008dbc <__assert_func>
 8008432:	6922      	ldr	r2, [r4, #16]
 8008434:	3202      	adds	r2, #2
 8008436:	f104 010c 	add.w	r1, r4, #12
 800843a:	0092      	lsls	r2, r2, #2
 800843c:	300c      	adds	r0, #12
 800843e:	f7fe f9ec 	bl	800681a <memcpy>
 8008442:	4621      	mov	r1, r4
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff ffa5 	bl	8008394 <_Bfree>
 800844a:	4644      	mov	r4, r8
 800844c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008450:	3501      	adds	r5, #1
 8008452:	615e      	str	r6, [r3, #20]
 8008454:	6125      	str	r5, [r4, #16]
 8008456:	4620      	mov	r0, r4
 8008458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800845c:	080096a3 	.word	0x080096a3
 8008460:	080096b4 	.word	0x080096b4

08008464 <__hi0bits>:
 8008464:	0c03      	lsrs	r3, r0, #16
 8008466:	041b      	lsls	r3, r3, #16
 8008468:	b9d3      	cbnz	r3, 80084a0 <__hi0bits+0x3c>
 800846a:	0400      	lsls	r0, r0, #16
 800846c:	2310      	movs	r3, #16
 800846e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008472:	bf04      	itt	eq
 8008474:	0200      	lsleq	r0, r0, #8
 8008476:	3308      	addeq	r3, #8
 8008478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800847c:	bf04      	itt	eq
 800847e:	0100      	lsleq	r0, r0, #4
 8008480:	3304      	addeq	r3, #4
 8008482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008486:	bf04      	itt	eq
 8008488:	0080      	lsleq	r0, r0, #2
 800848a:	3302      	addeq	r3, #2
 800848c:	2800      	cmp	r0, #0
 800848e:	db05      	blt.n	800849c <__hi0bits+0x38>
 8008490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008494:	f103 0301 	add.w	r3, r3, #1
 8008498:	bf08      	it	eq
 800849a:	2320      	moveq	r3, #32
 800849c:	4618      	mov	r0, r3
 800849e:	4770      	bx	lr
 80084a0:	2300      	movs	r3, #0
 80084a2:	e7e4      	b.n	800846e <__hi0bits+0xa>

080084a4 <__lo0bits>:
 80084a4:	6803      	ldr	r3, [r0, #0]
 80084a6:	f013 0207 	ands.w	r2, r3, #7
 80084aa:	4601      	mov	r1, r0
 80084ac:	d00b      	beq.n	80084c6 <__lo0bits+0x22>
 80084ae:	07da      	lsls	r2, r3, #31
 80084b0:	d423      	bmi.n	80084fa <__lo0bits+0x56>
 80084b2:	0798      	lsls	r0, r3, #30
 80084b4:	bf49      	itett	mi
 80084b6:	085b      	lsrmi	r3, r3, #1
 80084b8:	089b      	lsrpl	r3, r3, #2
 80084ba:	2001      	movmi	r0, #1
 80084bc:	600b      	strmi	r3, [r1, #0]
 80084be:	bf5c      	itt	pl
 80084c0:	600b      	strpl	r3, [r1, #0]
 80084c2:	2002      	movpl	r0, #2
 80084c4:	4770      	bx	lr
 80084c6:	b298      	uxth	r0, r3
 80084c8:	b9a8      	cbnz	r0, 80084f6 <__lo0bits+0x52>
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	2010      	movs	r0, #16
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	b90a      	cbnz	r2, 80084d6 <__lo0bits+0x32>
 80084d2:	3008      	adds	r0, #8
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	071a      	lsls	r2, r3, #28
 80084d8:	bf04      	itt	eq
 80084da:	091b      	lsreq	r3, r3, #4
 80084dc:	3004      	addeq	r0, #4
 80084de:	079a      	lsls	r2, r3, #30
 80084e0:	bf04      	itt	eq
 80084e2:	089b      	lsreq	r3, r3, #2
 80084e4:	3002      	addeq	r0, #2
 80084e6:	07da      	lsls	r2, r3, #31
 80084e8:	d403      	bmi.n	80084f2 <__lo0bits+0x4e>
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	f100 0001 	add.w	r0, r0, #1
 80084f0:	d005      	beq.n	80084fe <__lo0bits+0x5a>
 80084f2:	600b      	str	r3, [r1, #0]
 80084f4:	4770      	bx	lr
 80084f6:	4610      	mov	r0, r2
 80084f8:	e7e9      	b.n	80084ce <__lo0bits+0x2a>
 80084fa:	2000      	movs	r0, #0
 80084fc:	4770      	bx	lr
 80084fe:	2020      	movs	r0, #32
 8008500:	4770      	bx	lr
	...

08008504 <__i2b>:
 8008504:	b510      	push	{r4, lr}
 8008506:	460c      	mov	r4, r1
 8008508:	2101      	movs	r1, #1
 800850a:	f7ff ff03 	bl	8008314 <_Balloc>
 800850e:	4602      	mov	r2, r0
 8008510:	b928      	cbnz	r0, 800851e <__i2b+0x1a>
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <__i2b+0x24>)
 8008514:	4805      	ldr	r0, [pc, #20]	; (800852c <__i2b+0x28>)
 8008516:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800851a:	f000 fc4f 	bl	8008dbc <__assert_func>
 800851e:	2301      	movs	r3, #1
 8008520:	6144      	str	r4, [r0, #20]
 8008522:	6103      	str	r3, [r0, #16]
 8008524:	bd10      	pop	{r4, pc}
 8008526:	bf00      	nop
 8008528:	080096a3 	.word	0x080096a3
 800852c:	080096b4 	.word	0x080096b4

08008530 <__multiply>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4691      	mov	r9, r2
 8008536:	690a      	ldr	r2, [r1, #16]
 8008538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800853c:	429a      	cmp	r2, r3
 800853e:	bfb8      	it	lt
 8008540:	460b      	movlt	r3, r1
 8008542:	460c      	mov	r4, r1
 8008544:	bfbc      	itt	lt
 8008546:	464c      	movlt	r4, r9
 8008548:	4699      	movlt	r9, r3
 800854a:	6927      	ldr	r7, [r4, #16]
 800854c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	6861      	ldr	r1, [r4, #4]
 8008554:	eb07 060a 	add.w	r6, r7, sl
 8008558:	42b3      	cmp	r3, r6
 800855a:	b085      	sub	sp, #20
 800855c:	bfb8      	it	lt
 800855e:	3101      	addlt	r1, #1
 8008560:	f7ff fed8 	bl	8008314 <_Balloc>
 8008564:	b930      	cbnz	r0, 8008574 <__multiply+0x44>
 8008566:	4602      	mov	r2, r0
 8008568:	4b44      	ldr	r3, [pc, #272]	; (800867c <__multiply+0x14c>)
 800856a:	4845      	ldr	r0, [pc, #276]	; (8008680 <__multiply+0x150>)
 800856c:	f240 115d 	movw	r1, #349	; 0x15d
 8008570:	f000 fc24 	bl	8008dbc <__assert_func>
 8008574:	f100 0514 	add.w	r5, r0, #20
 8008578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800857c:	462b      	mov	r3, r5
 800857e:	2200      	movs	r2, #0
 8008580:	4543      	cmp	r3, r8
 8008582:	d321      	bcc.n	80085c8 <__multiply+0x98>
 8008584:	f104 0314 	add.w	r3, r4, #20
 8008588:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800858c:	f109 0314 	add.w	r3, r9, #20
 8008590:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008594:	9202      	str	r2, [sp, #8]
 8008596:	1b3a      	subs	r2, r7, r4
 8008598:	3a15      	subs	r2, #21
 800859a:	f022 0203 	bic.w	r2, r2, #3
 800859e:	3204      	adds	r2, #4
 80085a0:	f104 0115 	add.w	r1, r4, #21
 80085a4:	428f      	cmp	r7, r1
 80085a6:	bf38      	it	cc
 80085a8:	2204      	movcc	r2, #4
 80085aa:	9201      	str	r2, [sp, #4]
 80085ac:	9a02      	ldr	r2, [sp, #8]
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d80c      	bhi.n	80085ce <__multiply+0x9e>
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	dd03      	ble.n	80085c0 <__multiply+0x90>
 80085b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05a      	beq.n	8008676 <__multiply+0x146>
 80085c0:	6106      	str	r6, [r0, #16]
 80085c2:	b005      	add	sp, #20
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	f843 2b04 	str.w	r2, [r3], #4
 80085cc:	e7d8      	b.n	8008580 <__multiply+0x50>
 80085ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80085d2:	f1ba 0f00 	cmp.w	sl, #0
 80085d6:	d024      	beq.n	8008622 <__multiply+0xf2>
 80085d8:	f104 0e14 	add.w	lr, r4, #20
 80085dc:	46a9      	mov	r9, r5
 80085de:	f04f 0c00 	mov.w	ip, #0
 80085e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085e6:	f8d9 1000 	ldr.w	r1, [r9]
 80085ea:	fa1f fb82 	uxth.w	fp, r2
 80085ee:	b289      	uxth	r1, r1
 80085f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80085f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085f8:	f8d9 2000 	ldr.w	r2, [r9]
 80085fc:	4461      	add	r1, ip
 80085fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008602:	fb0a c20b 	mla	r2, sl, fp, ip
 8008606:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800860a:	b289      	uxth	r1, r1
 800860c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008610:	4577      	cmp	r7, lr
 8008612:	f849 1b04 	str.w	r1, [r9], #4
 8008616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800861a:	d8e2      	bhi.n	80085e2 <__multiply+0xb2>
 800861c:	9a01      	ldr	r2, [sp, #4]
 800861e:	f845 c002 	str.w	ip, [r5, r2]
 8008622:	9a03      	ldr	r2, [sp, #12]
 8008624:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008628:	3304      	adds	r3, #4
 800862a:	f1b9 0f00 	cmp.w	r9, #0
 800862e:	d020      	beq.n	8008672 <__multiply+0x142>
 8008630:	6829      	ldr	r1, [r5, #0]
 8008632:	f104 0c14 	add.w	ip, r4, #20
 8008636:	46ae      	mov	lr, r5
 8008638:	f04f 0a00 	mov.w	sl, #0
 800863c:	f8bc b000 	ldrh.w	fp, [ip]
 8008640:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008644:	fb09 220b 	mla	r2, r9, fp, r2
 8008648:	4492      	add	sl, r2
 800864a:	b289      	uxth	r1, r1
 800864c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008650:	f84e 1b04 	str.w	r1, [lr], #4
 8008654:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008658:	f8be 1000 	ldrh.w	r1, [lr]
 800865c:	0c12      	lsrs	r2, r2, #16
 800865e:	fb09 1102 	mla	r1, r9, r2, r1
 8008662:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008666:	4567      	cmp	r7, ip
 8008668:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800866c:	d8e6      	bhi.n	800863c <__multiply+0x10c>
 800866e:	9a01      	ldr	r2, [sp, #4]
 8008670:	50a9      	str	r1, [r5, r2]
 8008672:	3504      	adds	r5, #4
 8008674:	e79a      	b.n	80085ac <__multiply+0x7c>
 8008676:	3e01      	subs	r6, #1
 8008678:	e79c      	b.n	80085b4 <__multiply+0x84>
 800867a:	bf00      	nop
 800867c:	080096a3 	.word	0x080096a3
 8008680:	080096b4 	.word	0x080096b4

08008684 <__pow5mult>:
 8008684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008688:	4615      	mov	r5, r2
 800868a:	f012 0203 	ands.w	r2, r2, #3
 800868e:	4606      	mov	r6, r0
 8008690:	460f      	mov	r7, r1
 8008692:	d007      	beq.n	80086a4 <__pow5mult+0x20>
 8008694:	4c25      	ldr	r4, [pc, #148]	; (800872c <__pow5mult+0xa8>)
 8008696:	3a01      	subs	r2, #1
 8008698:	2300      	movs	r3, #0
 800869a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800869e:	f7ff fe9b 	bl	80083d8 <__multadd>
 80086a2:	4607      	mov	r7, r0
 80086a4:	10ad      	asrs	r5, r5, #2
 80086a6:	d03d      	beq.n	8008724 <__pow5mult+0xa0>
 80086a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086aa:	b97c      	cbnz	r4, 80086cc <__pow5mult+0x48>
 80086ac:	2010      	movs	r0, #16
 80086ae:	f7ff fe1d 	bl	80082ec <malloc>
 80086b2:	4602      	mov	r2, r0
 80086b4:	6270      	str	r0, [r6, #36]	; 0x24
 80086b6:	b928      	cbnz	r0, 80086c4 <__pow5mult+0x40>
 80086b8:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <__pow5mult+0xac>)
 80086ba:	481e      	ldr	r0, [pc, #120]	; (8008734 <__pow5mult+0xb0>)
 80086bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086c0:	f000 fb7c 	bl	8008dbc <__assert_func>
 80086c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c8:	6004      	str	r4, [r0, #0]
 80086ca:	60c4      	str	r4, [r0, #12]
 80086cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d4:	b94c      	cbnz	r4, 80086ea <__pow5mult+0x66>
 80086d6:	f240 2171 	movw	r1, #625	; 0x271
 80086da:	4630      	mov	r0, r6
 80086dc:	f7ff ff12 	bl	8008504 <__i2b>
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80086e6:	4604      	mov	r4, r0
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	07eb      	lsls	r3, r5, #31
 80086f0:	d50a      	bpl.n	8008708 <__pow5mult+0x84>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4622      	mov	r2, r4
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff ff1a 	bl	8008530 <__multiply>
 80086fc:	4639      	mov	r1, r7
 80086fe:	4680      	mov	r8, r0
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff fe47 	bl	8008394 <_Bfree>
 8008706:	4647      	mov	r7, r8
 8008708:	106d      	asrs	r5, r5, #1
 800870a:	d00b      	beq.n	8008724 <__pow5mult+0xa0>
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	b938      	cbnz	r0, 8008720 <__pow5mult+0x9c>
 8008710:	4622      	mov	r2, r4
 8008712:	4621      	mov	r1, r4
 8008714:	4630      	mov	r0, r6
 8008716:	f7ff ff0b 	bl	8008530 <__multiply>
 800871a:	6020      	str	r0, [r4, #0]
 800871c:	f8c0 9000 	str.w	r9, [r0]
 8008720:	4604      	mov	r4, r0
 8008722:	e7e4      	b.n	80086ee <__pow5mult+0x6a>
 8008724:	4638      	mov	r0, r7
 8008726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872a:	bf00      	nop
 800872c:	08009800 	.word	0x08009800
 8008730:	08009631 	.word	0x08009631
 8008734:	080096b4 	.word	0x080096b4

08008738 <__lshift>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	6849      	ldr	r1, [r1, #4]
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	4607      	mov	r7, r0
 800874a:	4691      	mov	r9, r2
 800874c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008750:	f108 0601 	add.w	r6, r8, #1
 8008754:	42b3      	cmp	r3, r6
 8008756:	db0b      	blt.n	8008770 <__lshift+0x38>
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff fddb 	bl	8008314 <_Balloc>
 800875e:	4605      	mov	r5, r0
 8008760:	b948      	cbnz	r0, 8008776 <__lshift+0x3e>
 8008762:	4602      	mov	r2, r0
 8008764:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <__lshift+0xd8>)
 8008766:	482b      	ldr	r0, [pc, #172]	; (8008814 <__lshift+0xdc>)
 8008768:	f240 11d9 	movw	r1, #473	; 0x1d9
 800876c:	f000 fb26 	bl	8008dbc <__assert_func>
 8008770:	3101      	adds	r1, #1
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	e7ee      	b.n	8008754 <__lshift+0x1c>
 8008776:	2300      	movs	r3, #0
 8008778:	f100 0114 	add.w	r1, r0, #20
 800877c:	f100 0210 	add.w	r2, r0, #16
 8008780:	4618      	mov	r0, r3
 8008782:	4553      	cmp	r3, sl
 8008784:	db37      	blt.n	80087f6 <__lshift+0xbe>
 8008786:	6920      	ldr	r0, [r4, #16]
 8008788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800878c:	f104 0314 	add.w	r3, r4, #20
 8008790:	f019 091f 	ands.w	r9, r9, #31
 8008794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800879c:	d02f      	beq.n	80087fe <__lshift+0xc6>
 800879e:	f1c9 0e20 	rsb	lr, r9, #32
 80087a2:	468a      	mov	sl, r1
 80087a4:	f04f 0c00 	mov.w	ip, #0
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	fa02 f209 	lsl.w	r2, r2, r9
 80087ae:	ea42 020c 	orr.w	r2, r2, ip
 80087b2:	f84a 2b04 	str.w	r2, [sl], #4
 80087b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ba:	4298      	cmp	r0, r3
 80087bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087c0:	d8f2      	bhi.n	80087a8 <__lshift+0x70>
 80087c2:	1b03      	subs	r3, r0, r4
 80087c4:	3b15      	subs	r3, #21
 80087c6:	f023 0303 	bic.w	r3, r3, #3
 80087ca:	3304      	adds	r3, #4
 80087cc:	f104 0215 	add.w	r2, r4, #21
 80087d0:	4290      	cmp	r0, r2
 80087d2:	bf38      	it	cc
 80087d4:	2304      	movcc	r3, #4
 80087d6:	f841 c003 	str.w	ip, [r1, r3]
 80087da:	f1bc 0f00 	cmp.w	ip, #0
 80087de:	d001      	beq.n	80087e4 <__lshift+0xac>
 80087e0:	f108 0602 	add.w	r6, r8, #2
 80087e4:	3e01      	subs	r6, #1
 80087e6:	4638      	mov	r0, r7
 80087e8:	612e      	str	r6, [r5, #16]
 80087ea:	4621      	mov	r1, r4
 80087ec:	f7ff fdd2 	bl	8008394 <_Bfree>
 80087f0:	4628      	mov	r0, r5
 80087f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087fa:	3301      	adds	r3, #1
 80087fc:	e7c1      	b.n	8008782 <__lshift+0x4a>
 80087fe:	3904      	subs	r1, #4
 8008800:	f853 2b04 	ldr.w	r2, [r3], #4
 8008804:	f841 2f04 	str.w	r2, [r1, #4]!
 8008808:	4298      	cmp	r0, r3
 800880a:	d8f9      	bhi.n	8008800 <__lshift+0xc8>
 800880c:	e7ea      	b.n	80087e4 <__lshift+0xac>
 800880e:	bf00      	nop
 8008810:	080096a3 	.word	0x080096a3
 8008814:	080096b4 	.word	0x080096b4

08008818 <__mcmp>:
 8008818:	b530      	push	{r4, r5, lr}
 800881a:	6902      	ldr	r2, [r0, #16]
 800881c:	690c      	ldr	r4, [r1, #16]
 800881e:	1b12      	subs	r2, r2, r4
 8008820:	d10e      	bne.n	8008840 <__mcmp+0x28>
 8008822:	f100 0314 	add.w	r3, r0, #20
 8008826:	3114      	adds	r1, #20
 8008828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800882c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008838:	42a5      	cmp	r5, r4
 800883a:	d003      	beq.n	8008844 <__mcmp+0x2c>
 800883c:	d305      	bcc.n	800884a <__mcmp+0x32>
 800883e:	2201      	movs	r2, #1
 8008840:	4610      	mov	r0, r2
 8008842:	bd30      	pop	{r4, r5, pc}
 8008844:	4283      	cmp	r3, r0
 8008846:	d3f3      	bcc.n	8008830 <__mcmp+0x18>
 8008848:	e7fa      	b.n	8008840 <__mcmp+0x28>
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	e7f7      	b.n	8008840 <__mcmp+0x28>

08008850 <__mdiff>:
 8008850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	4606      	mov	r6, r0
 8008858:	4611      	mov	r1, r2
 800885a:	4620      	mov	r0, r4
 800885c:	4690      	mov	r8, r2
 800885e:	f7ff ffdb 	bl	8008818 <__mcmp>
 8008862:	1e05      	subs	r5, r0, #0
 8008864:	d110      	bne.n	8008888 <__mdiff+0x38>
 8008866:	4629      	mov	r1, r5
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff fd53 	bl	8008314 <_Balloc>
 800886e:	b930      	cbnz	r0, 800887e <__mdiff+0x2e>
 8008870:	4b3a      	ldr	r3, [pc, #232]	; (800895c <__mdiff+0x10c>)
 8008872:	4602      	mov	r2, r0
 8008874:	f240 2132 	movw	r1, #562	; 0x232
 8008878:	4839      	ldr	r0, [pc, #228]	; (8008960 <__mdiff+0x110>)
 800887a:	f000 fa9f 	bl	8008dbc <__assert_func>
 800887e:	2301      	movs	r3, #1
 8008880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008888:	bfa4      	itt	ge
 800888a:	4643      	movge	r3, r8
 800888c:	46a0      	movge	r8, r4
 800888e:	4630      	mov	r0, r6
 8008890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008894:	bfa6      	itte	ge
 8008896:	461c      	movge	r4, r3
 8008898:	2500      	movge	r5, #0
 800889a:	2501      	movlt	r5, #1
 800889c:	f7ff fd3a 	bl	8008314 <_Balloc>
 80088a0:	b920      	cbnz	r0, 80088ac <__mdiff+0x5c>
 80088a2:	4b2e      	ldr	r3, [pc, #184]	; (800895c <__mdiff+0x10c>)
 80088a4:	4602      	mov	r2, r0
 80088a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088aa:	e7e5      	b.n	8008878 <__mdiff+0x28>
 80088ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088b0:	6926      	ldr	r6, [r4, #16]
 80088b2:	60c5      	str	r5, [r0, #12]
 80088b4:	f104 0914 	add.w	r9, r4, #20
 80088b8:	f108 0514 	add.w	r5, r8, #20
 80088bc:	f100 0e14 	add.w	lr, r0, #20
 80088c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088c8:	f108 0210 	add.w	r2, r8, #16
 80088cc:	46f2      	mov	sl, lr
 80088ce:	2100      	movs	r1, #0
 80088d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088d8:	fa1f f883 	uxth.w	r8, r3
 80088dc:	fa11 f18b 	uxtah	r1, r1, fp
 80088e0:	0c1b      	lsrs	r3, r3, #16
 80088e2:	eba1 0808 	sub.w	r8, r1, r8
 80088e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088ee:	fa1f f888 	uxth.w	r8, r8
 80088f2:	1419      	asrs	r1, r3, #16
 80088f4:	454e      	cmp	r6, r9
 80088f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088fa:	f84a 3b04 	str.w	r3, [sl], #4
 80088fe:	d8e7      	bhi.n	80088d0 <__mdiff+0x80>
 8008900:	1b33      	subs	r3, r6, r4
 8008902:	3b15      	subs	r3, #21
 8008904:	f023 0303 	bic.w	r3, r3, #3
 8008908:	3304      	adds	r3, #4
 800890a:	3415      	adds	r4, #21
 800890c:	42a6      	cmp	r6, r4
 800890e:	bf38      	it	cc
 8008910:	2304      	movcc	r3, #4
 8008912:	441d      	add	r5, r3
 8008914:	4473      	add	r3, lr
 8008916:	469e      	mov	lr, r3
 8008918:	462e      	mov	r6, r5
 800891a:	4566      	cmp	r6, ip
 800891c:	d30e      	bcc.n	800893c <__mdiff+0xec>
 800891e:	f10c 0203 	add.w	r2, ip, #3
 8008922:	1b52      	subs	r2, r2, r5
 8008924:	f022 0203 	bic.w	r2, r2, #3
 8008928:	3d03      	subs	r5, #3
 800892a:	45ac      	cmp	ip, r5
 800892c:	bf38      	it	cc
 800892e:	2200      	movcc	r2, #0
 8008930:	441a      	add	r2, r3
 8008932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008936:	b17b      	cbz	r3, 8008958 <__mdiff+0x108>
 8008938:	6107      	str	r7, [r0, #16]
 800893a:	e7a3      	b.n	8008884 <__mdiff+0x34>
 800893c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008940:	fa11 f288 	uxtah	r2, r1, r8
 8008944:	1414      	asrs	r4, r2, #16
 8008946:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800894a:	b292      	uxth	r2, r2
 800894c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008950:	f84e 2b04 	str.w	r2, [lr], #4
 8008954:	1421      	asrs	r1, r4, #16
 8008956:	e7e0      	b.n	800891a <__mdiff+0xca>
 8008958:	3f01      	subs	r7, #1
 800895a:	e7ea      	b.n	8008932 <__mdiff+0xe2>
 800895c:	080096a3 	.word	0x080096a3
 8008960:	080096b4 	.word	0x080096b4

08008964 <__d2b>:
 8008964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008968:	4689      	mov	r9, r1
 800896a:	2101      	movs	r1, #1
 800896c:	ec57 6b10 	vmov	r6, r7, d0
 8008970:	4690      	mov	r8, r2
 8008972:	f7ff fccf 	bl	8008314 <_Balloc>
 8008976:	4604      	mov	r4, r0
 8008978:	b930      	cbnz	r0, 8008988 <__d2b+0x24>
 800897a:	4602      	mov	r2, r0
 800897c:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <__d2b+0xb0>)
 800897e:	4826      	ldr	r0, [pc, #152]	; (8008a18 <__d2b+0xb4>)
 8008980:	f240 310a 	movw	r1, #778	; 0x30a
 8008984:	f000 fa1a 	bl	8008dbc <__assert_func>
 8008988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800898c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008990:	bb35      	cbnz	r5, 80089e0 <__d2b+0x7c>
 8008992:	2e00      	cmp	r6, #0
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	d028      	beq.n	80089ea <__d2b+0x86>
 8008998:	4668      	mov	r0, sp
 800899a:	9600      	str	r6, [sp, #0]
 800899c:	f7ff fd82 	bl	80084a4 <__lo0bits>
 80089a0:	9900      	ldr	r1, [sp, #0]
 80089a2:	b300      	cbz	r0, 80089e6 <__d2b+0x82>
 80089a4:	9a01      	ldr	r2, [sp, #4]
 80089a6:	f1c0 0320 	rsb	r3, r0, #32
 80089aa:	fa02 f303 	lsl.w	r3, r2, r3
 80089ae:	430b      	orrs	r3, r1
 80089b0:	40c2      	lsrs	r2, r0
 80089b2:	6163      	str	r3, [r4, #20]
 80089b4:	9201      	str	r2, [sp, #4]
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	61a3      	str	r3, [r4, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bf14      	ite	ne
 80089be:	2202      	movne	r2, #2
 80089c0:	2201      	moveq	r2, #1
 80089c2:	6122      	str	r2, [r4, #16]
 80089c4:	b1d5      	cbz	r5, 80089fc <__d2b+0x98>
 80089c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089ca:	4405      	add	r5, r0
 80089cc:	f8c9 5000 	str.w	r5, [r9]
 80089d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089d4:	f8c8 0000 	str.w	r0, [r8]
 80089d8:	4620      	mov	r0, r4
 80089da:	b003      	add	sp, #12
 80089dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e4:	e7d5      	b.n	8008992 <__d2b+0x2e>
 80089e6:	6161      	str	r1, [r4, #20]
 80089e8:	e7e5      	b.n	80089b6 <__d2b+0x52>
 80089ea:	a801      	add	r0, sp, #4
 80089ec:	f7ff fd5a 	bl	80084a4 <__lo0bits>
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	6163      	str	r3, [r4, #20]
 80089f4:	2201      	movs	r2, #1
 80089f6:	6122      	str	r2, [r4, #16]
 80089f8:	3020      	adds	r0, #32
 80089fa:	e7e3      	b.n	80089c4 <__d2b+0x60>
 80089fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a04:	f8c9 0000 	str.w	r0, [r9]
 8008a08:	6918      	ldr	r0, [r3, #16]
 8008a0a:	f7ff fd2b 	bl	8008464 <__hi0bits>
 8008a0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a12:	e7df      	b.n	80089d4 <__d2b+0x70>
 8008a14:	080096a3 	.word	0x080096a3
 8008a18:	080096b4 	.word	0x080096b4

08008a1c <_calloc_r>:
 8008a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1e:	fba1 2402 	umull	r2, r4, r1, r2
 8008a22:	b94c      	cbnz	r4, 8008a38 <_calloc_r+0x1c>
 8008a24:	4611      	mov	r1, r2
 8008a26:	9201      	str	r2, [sp, #4]
 8008a28:	f7fd ff2e 	bl	8006888 <_malloc_r>
 8008a2c:	9a01      	ldr	r2, [sp, #4]
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b930      	cbnz	r0, 8008a40 <_calloc_r+0x24>
 8008a32:	4628      	mov	r0, r5
 8008a34:	b003      	add	sp, #12
 8008a36:	bd30      	pop	{r4, r5, pc}
 8008a38:	220c      	movs	r2, #12
 8008a3a:	6002      	str	r2, [r0, #0]
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	e7f8      	b.n	8008a32 <_calloc_r+0x16>
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7fd fef8 	bl	8006836 <memset>
 8008a46:	e7f4      	b.n	8008a32 <_calloc_r+0x16>

08008a48 <_free_r>:
 8008a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a4a:	2900      	cmp	r1, #0
 8008a4c:	d044      	beq.n	8008ad8 <_free_r+0x90>
 8008a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a52:	9001      	str	r0, [sp, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f1a1 0404 	sub.w	r4, r1, #4
 8008a5a:	bfb8      	it	lt
 8008a5c:	18e4      	addlt	r4, r4, r3
 8008a5e:	f7ff fc4d 	bl	80082fc <__malloc_lock>
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <_free_r+0x94>)
 8008a64:	9801      	ldr	r0, [sp, #4]
 8008a66:	6813      	ldr	r3, [r2, #0]
 8008a68:	b933      	cbnz	r3, 8008a78 <_free_r+0x30>
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	6014      	str	r4, [r2, #0]
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a74:	f7ff bc48 	b.w	8008308 <__malloc_unlock>
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d908      	bls.n	8008a8e <_free_r+0x46>
 8008a7c:	6825      	ldr	r5, [r4, #0]
 8008a7e:	1961      	adds	r1, r4, r5
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf01      	itttt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	1949      	addeq	r1, r1, r5
 8008a8a:	6021      	streq	r1, [r4, #0]
 8008a8c:	e7ed      	b.n	8008a6a <_free_r+0x22>
 8008a8e:	461a      	mov	r2, r3
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	b10b      	cbz	r3, 8008a98 <_free_r+0x50>
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d9fa      	bls.n	8008a8e <_free_r+0x46>
 8008a98:	6811      	ldr	r1, [r2, #0]
 8008a9a:	1855      	adds	r5, r2, r1
 8008a9c:	42a5      	cmp	r5, r4
 8008a9e:	d10b      	bne.n	8008ab8 <_free_r+0x70>
 8008aa0:	6824      	ldr	r4, [r4, #0]
 8008aa2:	4421      	add	r1, r4
 8008aa4:	1854      	adds	r4, r2, r1
 8008aa6:	42a3      	cmp	r3, r4
 8008aa8:	6011      	str	r1, [r2, #0]
 8008aaa:	d1e0      	bne.n	8008a6e <_free_r+0x26>
 8008aac:	681c      	ldr	r4, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	6053      	str	r3, [r2, #4]
 8008ab2:	4421      	add	r1, r4
 8008ab4:	6011      	str	r1, [r2, #0]
 8008ab6:	e7da      	b.n	8008a6e <_free_r+0x26>
 8008ab8:	d902      	bls.n	8008ac0 <_free_r+0x78>
 8008aba:	230c      	movs	r3, #12
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	e7d6      	b.n	8008a6e <_free_r+0x26>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	1961      	adds	r1, r4, r5
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	bf04      	itt	eq
 8008ac8:	6819      	ldreq	r1, [r3, #0]
 8008aca:	685b      	ldreq	r3, [r3, #4]
 8008acc:	6063      	str	r3, [r4, #4]
 8008ace:	bf04      	itt	eq
 8008ad0:	1949      	addeq	r1, r1, r5
 8008ad2:	6021      	streq	r1, [r4, #0]
 8008ad4:	6054      	str	r4, [r2, #4]
 8008ad6:	e7ca      	b.n	8008a6e <_free_r+0x26>
 8008ad8:	b003      	add	sp, #12
 8008ada:	bd30      	pop	{r4, r5, pc}
 8008adc:	2000437c 	.word	0x2000437c

08008ae0 <__ssputs_r>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	688e      	ldr	r6, [r1, #8]
 8008ae6:	429e      	cmp	r6, r3
 8008ae8:	4682      	mov	sl, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	4690      	mov	r8, r2
 8008aee:	461f      	mov	r7, r3
 8008af0:	d838      	bhi.n	8008b64 <__ssputs_r+0x84>
 8008af2:	898a      	ldrh	r2, [r1, #12]
 8008af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af8:	d032      	beq.n	8008b60 <__ssputs_r+0x80>
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	6909      	ldr	r1, [r1, #16]
 8008afe:	eba5 0901 	sub.w	r9, r5, r1
 8008b02:	6965      	ldr	r5, [r4, #20]
 8008b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	444b      	add	r3, r9
 8008b10:	106d      	asrs	r5, r5, #1
 8008b12:	429d      	cmp	r5, r3
 8008b14:	bf38      	it	cc
 8008b16:	461d      	movcc	r5, r3
 8008b18:	0553      	lsls	r3, r2, #21
 8008b1a:	d531      	bpl.n	8008b80 <__ssputs_r+0xa0>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7fd feb3 	bl	8006888 <_malloc_r>
 8008b22:	4606      	mov	r6, r0
 8008b24:	b950      	cbnz	r0, 8008b3c <__ssputs_r+0x5c>
 8008b26:	230c      	movs	r3, #12
 8008b28:	f8ca 3000 	str.w	r3, [sl]
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	6921      	ldr	r1, [r4, #16]
 8008b3e:	464a      	mov	r2, r9
 8008b40:	f7fd fe6b 	bl	800681a <memcpy>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	6126      	str	r6, [r4, #16]
 8008b52:	6165      	str	r5, [r4, #20]
 8008b54:	444e      	add	r6, r9
 8008b56:	eba5 0509 	sub.w	r5, r5, r9
 8008b5a:	6026      	str	r6, [r4, #0]
 8008b5c:	60a5      	str	r5, [r4, #8]
 8008b5e:	463e      	mov	r6, r7
 8008b60:	42be      	cmp	r6, r7
 8008b62:	d900      	bls.n	8008b66 <__ssputs_r+0x86>
 8008b64:	463e      	mov	r6, r7
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	4632      	mov	r2, r6
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	f000 f968 	bl	8008e40 <memmove>
 8008b70:	68a3      	ldr	r3, [r4, #8]
 8008b72:	1b9b      	subs	r3, r3, r6
 8008b74:	60a3      	str	r3, [r4, #8]
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	4433      	add	r3, r6
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7db      	b.n	8008b38 <__ssputs_r+0x58>
 8008b80:	462a      	mov	r2, r5
 8008b82:	f000 f977 	bl	8008e74 <_realloc_r>
 8008b86:	4606      	mov	r6, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d1e1      	bne.n	8008b50 <__ssputs_r+0x70>
 8008b8c:	6921      	ldr	r1, [r4, #16]
 8008b8e:	4650      	mov	r0, sl
 8008b90:	f7ff ff5a 	bl	8008a48 <_free_r>
 8008b94:	e7c7      	b.n	8008b26 <__ssputs_r+0x46>
	...

08008b98 <_svfiprintf_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	4698      	mov	r8, r3
 8008b9e:	898b      	ldrh	r3, [r1, #12]
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	b09d      	sub	sp, #116	; 0x74
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	460d      	mov	r5, r1
 8008ba8:	4614      	mov	r4, r2
 8008baa:	d50e      	bpl.n	8008bca <_svfiprintf_r+0x32>
 8008bac:	690b      	ldr	r3, [r1, #16]
 8008bae:	b963      	cbnz	r3, 8008bca <_svfiprintf_r+0x32>
 8008bb0:	2140      	movs	r1, #64	; 0x40
 8008bb2:	f7fd fe69 	bl	8006888 <_malloc_r>
 8008bb6:	6028      	str	r0, [r5, #0]
 8008bb8:	6128      	str	r0, [r5, #16]
 8008bba:	b920      	cbnz	r0, 8008bc6 <_svfiprintf_r+0x2e>
 8008bbc:	230c      	movs	r3, #12
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e0d1      	b.n	8008d6a <_svfiprintf_r+0x1d2>
 8008bc6:	2340      	movs	r3, #64	; 0x40
 8008bc8:	616b      	str	r3, [r5, #20]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bce:	2320      	movs	r3, #32
 8008bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd8:	2330      	movs	r3, #48	; 0x30
 8008bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d84 <_svfiprintf_r+0x1ec>
 8008bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be2:	f04f 0901 	mov.w	r9, #1
 8008be6:	4623      	mov	r3, r4
 8008be8:	469a      	mov	sl, r3
 8008bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bee:	b10a      	cbz	r2, 8008bf4 <_svfiprintf_r+0x5c>
 8008bf0:	2a25      	cmp	r2, #37	; 0x25
 8008bf2:	d1f9      	bne.n	8008be8 <_svfiprintf_r+0x50>
 8008bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf8:	d00b      	beq.n	8008c12 <_svfiprintf_r+0x7a>
 8008bfa:	465b      	mov	r3, fp
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ff6d 	bl	8008ae0 <__ssputs_r>
 8008c06:	3001      	adds	r0, #1
 8008c08:	f000 80aa 	beq.w	8008d60 <_svfiprintf_r+0x1c8>
 8008c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c0e:	445a      	add	r2, fp
 8008c10:	9209      	str	r2, [sp, #36]	; 0x24
 8008c12:	f89a 3000 	ldrb.w	r3, [sl]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80a2 	beq.w	8008d60 <_svfiprintf_r+0x1c8>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c26:	f10a 0a01 	add.w	sl, sl, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	9307      	str	r3, [sp, #28]
 8008c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c32:	931a      	str	r3, [sp, #104]	; 0x68
 8008c34:	4654      	mov	r4, sl
 8008c36:	2205      	movs	r2, #5
 8008c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3c:	4851      	ldr	r0, [pc, #324]	; (8008d84 <_svfiprintf_r+0x1ec>)
 8008c3e:	f7f7 fad7 	bl	80001f0 <memchr>
 8008c42:	9a04      	ldr	r2, [sp, #16]
 8008c44:	b9d8      	cbnz	r0, 8008c7e <_svfiprintf_r+0xe6>
 8008c46:	06d0      	lsls	r0, r2, #27
 8008c48:	bf44      	itt	mi
 8008c4a:	2320      	movmi	r3, #32
 8008c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c50:	0711      	lsls	r1, r2, #28
 8008c52:	bf44      	itt	mi
 8008c54:	232b      	movmi	r3, #43	; 0x2b
 8008c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c60:	d015      	beq.n	8008c8e <_svfiprintf_r+0xf6>
 8008c62:	9a07      	ldr	r2, [sp, #28]
 8008c64:	4654      	mov	r4, sl
 8008c66:	2000      	movs	r0, #0
 8008c68:	f04f 0c0a 	mov.w	ip, #10
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c72:	3b30      	subs	r3, #48	; 0x30
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d94e      	bls.n	8008d16 <_svfiprintf_r+0x17e>
 8008c78:	b1b0      	cbz	r0, 8008ca8 <_svfiprintf_r+0x110>
 8008c7a:	9207      	str	r2, [sp, #28]
 8008c7c:	e014      	b.n	8008ca8 <_svfiprintf_r+0x110>
 8008c7e:	eba0 0308 	sub.w	r3, r0, r8
 8008c82:	fa09 f303 	lsl.w	r3, r9, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	46a2      	mov	sl, r4
 8008c8c:	e7d2      	b.n	8008c34 <_svfiprintf_r+0x9c>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	1d19      	adds	r1, r3, #4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	9103      	str	r1, [sp, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bfbb      	ittet	lt
 8008c9a:	425b      	neglt	r3, r3
 8008c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca0:	9307      	strge	r3, [sp, #28]
 8008ca2:	9307      	strlt	r3, [sp, #28]
 8008ca4:	bfb8      	it	lt
 8008ca6:	9204      	strlt	r2, [sp, #16]
 8008ca8:	7823      	ldrb	r3, [r4, #0]
 8008caa:	2b2e      	cmp	r3, #46	; 0x2e
 8008cac:	d10c      	bne.n	8008cc8 <_svfiprintf_r+0x130>
 8008cae:	7863      	ldrb	r3, [r4, #1]
 8008cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb2:	d135      	bne.n	8008d20 <_svfiprintf_r+0x188>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	9203      	str	r2, [sp, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bfb8      	it	lt
 8008cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cc4:	3402      	adds	r4, #2
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d94 <_svfiprintf_r+0x1fc>
 8008ccc:	7821      	ldrb	r1, [r4, #0]
 8008cce:	2203      	movs	r2, #3
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	f7f7 fa8d 	bl	80001f0 <memchr>
 8008cd6:	b140      	cbz	r0, 8008cea <_svfiprintf_r+0x152>
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	eba0 000a 	sub.w	r0, r0, sl
 8008cde:	fa03 f000 	lsl.w	r0, r3, r0
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	4303      	orrs	r3, r0
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4826      	ldr	r0, [pc, #152]	; (8008d88 <_svfiprintf_r+0x1f0>)
 8008cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf4:	2206      	movs	r2, #6
 8008cf6:	f7f7 fa7b 	bl	80001f0 <memchr>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d038      	beq.n	8008d70 <_svfiprintf_r+0x1d8>
 8008cfe:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <_svfiprintf_r+0x1f4>)
 8008d00:	bb1b      	cbnz	r3, 8008d4a <_svfiprintf_r+0x1b2>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	3307      	adds	r3, #7
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	9303      	str	r3, [sp, #12]
 8008d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d10:	4433      	add	r3, r6
 8008d12:	9309      	str	r3, [sp, #36]	; 0x24
 8008d14:	e767      	b.n	8008be6 <_svfiprintf_r+0x4e>
 8008d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	e7a5      	b.n	8008c6c <_svfiprintf_r+0xd4>
 8008d20:	2300      	movs	r3, #0
 8008d22:	3401      	adds	r4, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	4619      	mov	r1, r3
 8008d28:	f04f 0c0a 	mov.w	ip, #10
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d32:	3a30      	subs	r2, #48	; 0x30
 8008d34:	2a09      	cmp	r2, #9
 8008d36:	d903      	bls.n	8008d40 <_svfiprintf_r+0x1a8>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0c5      	beq.n	8008cc8 <_svfiprintf_r+0x130>
 8008d3c:	9105      	str	r1, [sp, #20]
 8008d3e:	e7c3      	b.n	8008cc8 <_svfiprintf_r+0x130>
 8008d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d44:	4604      	mov	r4, r0
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7f0      	b.n	8008d2c <_svfiprintf_r+0x194>
 8008d4a:	ab03      	add	r3, sp, #12
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	462a      	mov	r2, r5
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <_svfiprintf_r+0x1f8>)
 8008d52:	a904      	add	r1, sp, #16
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7fd feab 	bl	8006ab0 <_printf_float>
 8008d5a:	1c42      	adds	r2, r0, #1
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	d1d6      	bne.n	8008d0e <_svfiprintf_r+0x176>
 8008d60:	89ab      	ldrh	r3, [r5, #12]
 8008d62:	065b      	lsls	r3, r3, #25
 8008d64:	f53f af2c 	bmi.w	8008bc0 <_svfiprintf_r+0x28>
 8008d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6a:	b01d      	add	sp, #116	; 0x74
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <_svfiprintf_r+0x1f8>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f7fe f93c 	bl	8006ff8 <_printf_i>
 8008d80:	e7eb      	b.n	8008d5a <_svfiprintf_r+0x1c2>
 8008d82:	bf00      	nop
 8008d84:	0800980c 	.word	0x0800980c
 8008d88:	08009816 	.word	0x08009816
 8008d8c:	08006ab1 	.word	0x08006ab1
 8008d90:	08008ae1 	.word	0x08008ae1
 8008d94:	08009812 	.word	0x08009812

08008d98 <_read_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	; (8008db8 <_read_r+0x20>)
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	602a      	str	r2, [r5, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f7f9 f87e 	bl	8001ea8 <_read>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_read_r+0x1e>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_read_r+0x1e>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	20004384 	.word	0x20004384

08008dbc <__assert_func>:
 8008dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dbe:	4614      	mov	r4, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <__assert_func+0x2c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	68d8      	ldr	r0, [r3, #12]
 8008dca:	b14c      	cbz	r4, 8008de0 <__assert_func+0x24>
 8008dcc:	4b07      	ldr	r3, [pc, #28]	; (8008dec <__assert_func+0x30>)
 8008dce:	9100      	str	r1, [sp, #0]
 8008dd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dd4:	4906      	ldr	r1, [pc, #24]	; (8008df0 <__assert_func+0x34>)
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	f000 f80e 	bl	8008df8 <fiprintf>
 8008ddc:	f000 faa0 	bl	8009320 <abort>
 8008de0:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <__assert_func+0x38>)
 8008de2:	461c      	mov	r4, r3
 8008de4:	e7f3      	b.n	8008dce <__assert_func+0x12>
 8008de6:	bf00      	nop
 8008de8:	20000024 	.word	0x20000024
 8008dec:	0800981d 	.word	0x0800981d
 8008df0:	0800982a 	.word	0x0800982a
 8008df4:	08009858 	.word	0x08009858

08008df8 <fiprintf>:
 8008df8:	b40e      	push	{r1, r2, r3}
 8008dfa:	b503      	push	{r0, r1, lr}
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	ab03      	add	r3, sp, #12
 8008e00:	4805      	ldr	r0, [pc, #20]	; (8008e18 <fiprintf+0x20>)
 8008e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e06:	6800      	ldr	r0, [r0, #0]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f000 f88b 	bl	8008f24 <_vfiprintf_r>
 8008e0e:	b002      	add	sp, #8
 8008e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e14:	b003      	add	sp, #12
 8008e16:	4770      	bx	lr
 8008e18:	20000024 	.word	0x20000024

08008e1c <__ascii_mbtowc>:
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	b901      	cbnz	r1, 8008e22 <__ascii_mbtowc+0x6>
 8008e20:	a901      	add	r1, sp, #4
 8008e22:	b142      	cbz	r2, 8008e36 <__ascii_mbtowc+0x1a>
 8008e24:	b14b      	cbz	r3, 8008e3a <__ascii_mbtowc+0x1e>
 8008e26:	7813      	ldrb	r3, [r2, #0]
 8008e28:	600b      	str	r3, [r1, #0]
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	1e10      	subs	r0, r2, #0
 8008e2e:	bf18      	it	ne
 8008e30:	2001      	movne	r0, #1
 8008e32:	b002      	add	sp, #8
 8008e34:	4770      	bx	lr
 8008e36:	4610      	mov	r0, r2
 8008e38:	e7fb      	b.n	8008e32 <__ascii_mbtowc+0x16>
 8008e3a:	f06f 0001 	mvn.w	r0, #1
 8008e3e:	e7f8      	b.n	8008e32 <__ascii_mbtowc+0x16>

08008e40 <memmove>:
 8008e40:	4288      	cmp	r0, r1
 8008e42:	b510      	push	{r4, lr}
 8008e44:	eb01 0402 	add.w	r4, r1, r2
 8008e48:	d902      	bls.n	8008e50 <memmove+0x10>
 8008e4a:	4284      	cmp	r4, r0
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	d807      	bhi.n	8008e60 <memmove+0x20>
 8008e50:	1e43      	subs	r3, r0, #1
 8008e52:	42a1      	cmp	r1, r4
 8008e54:	d008      	beq.n	8008e68 <memmove+0x28>
 8008e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5e:	e7f8      	b.n	8008e52 <memmove+0x12>
 8008e60:	4402      	add	r2, r0
 8008e62:	4601      	mov	r1, r0
 8008e64:	428a      	cmp	r2, r1
 8008e66:	d100      	bne.n	8008e6a <memmove+0x2a>
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e72:	e7f7      	b.n	8008e64 <memmove+0x24>

08008e74 <_realloc_r>:
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	b921      	cbnz	r1, 8008e8a <_realloc_r+0x16>
 8008e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e84:	4611      	mov	r1, r2
 8008e86:	f7fd bcff 	b.w	8006888 <_malloc_r>
 8008e8a:	b92a      	cbnz	r2, 8008e98 <_realloc_r+0x24>
 8008e8c:	f7ff fddc 	bl	8008a48 <_free_r>
 8008e90:	4625      	mov	r5, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	f000 faae 	bl	80093f8 <_malloc_usable_size_r>
 8008e9c:	4284      	cmp	r4, r0
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	d802      	bhi.n	8008ea8 <_realloc_r+0x34>
 8008ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ea6:	d812      	bhi.n	8008ece <_realloc_r+0x5a>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4640      	mov	r0, r8
 8008eac:	f7fd fcec 	bl	8006888 <_malloc_r>
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d0ed      	beq.n	8008e92 <_realloc_r+0x1e>
 8008eb6:	42bc      	cmp	r4, r7
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4631      	mov	r1, r6
 8008ebc:	bf28      	it	cs
 8008ebe:	463a      	movcs	r2, r7
 8008ec0:	f7fd fcab 	bl	800681a <memcpy>
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f7ff fdbe 	bl	8008a48 <_free_r>
 8008ecc:	e7e1      	b.n	8008e92 <_realloc_r+0x1e>
 8008ece:	4635      	mov	r5, r6
 8008ed0:	e7df      	b.n	8008e92 <_realloc_r+0x1e>

08008ed2 <__sfputc_r>:
 8008ed2:	6893      	ldr	r3, [r2, #8]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	b410      	push	{r4}
 8008eda:	6093      	str	r3, [r2, #8]
 8008edc:	da08      	bge.n	8008ef0 <__sfputc_r+0x1e>
 8008ede:	6994      	ldr	r4, [r2, #24]
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	db01      	blt.n	8008ee8 <__sfputc_r+0x16>
 8008ee4:	290a      	cmp	r1, #10
 8008ee6:	d103      	bne.n	8008ef0 <__sfputc_r+0x1e>
 8008ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eec:	f000 b94a 	b.w	8009184 <__swbuf_r>
 8008ef0:	6813      	ldr	r3, [r2, #0]
 8008ef2:	1c58      	adds	r0, r3, #1
 8008ef4:	6010      	str	r0, [r2, #0]
 8008ef6:	7019      	strb	r1, [r3, #0]
 8008ef8:	4608      	mov	r0, r1
 8008efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <__sfputs_r>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	4606      	mov	r6, r0
 8008f04:	460f      	mov	r7, r1
 8008f06:	4614      	mov	r4, r2
 8008f08:	18d5      	adds	r5, r2, r3
 8008f0a:	42ac      	cmp	r4, r5
 8008f0c:	d101      	bne.n	8008f12 <__sfputs_r+0x12>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e007      	b.n	8008f22 <__sfputs_r+0x22>
 8008f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f16:	463a      	mov	r2, r7
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff ffda 	bl	8008ed2 <__sfputc_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d1f3      	bne.n	8008f0a <__sfputs_r+0xa>
 8008f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f24 <_vfiprintf_r>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	460d      	mov	r5, r1
 8008f2a:	b09d      	sub	sp, #116	; 0x74
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	4698      	mov	r8, r3
 8008f30:	4606      	mov	r6, r0
 8008f32:	b118      	cbz	r0, 8008f3c <_vfiprintf_r+0x18>
 8008f34:	6983      	ldr	r3, [r0, #24]
 8008f36:	b90b      	cbnz	r3, 8008f3c <_vfiprintf_r+0x18>
 8008f38:	f7fd fbaa 	bl	8006690 <__sinit>
 8008f3c:	4b89      	ldr	r3, [pc, #548]	; (8009164 <_vfiprintf_r+0x240>)
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	d11b      	bne.n	8008f7a <_vfiprintf_r+0x56>
 8008f42:	6875      	ldr	r5, [r6, #4]
 8008f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x32>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x32>
 8008f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f52:	f7fd fc60 	bl	8006816 <__retarget_lock_acquire_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	071b      	lsls	r3, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <_vfiprintf_r+0x3c>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	b9eb      	cbnz	r3, 8008f9c <_vfiprintf_r+0x78>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f000 f96e 	bl	8009244 <__swsetup_r>
 8008f68:	b1c0      	cbz	r0, 8008f9c <_vfiprintf_r+0x78>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07dc      	lsls	r4, r3, #31
 8008f6e:	d50e      	bpl.n	8008f8e <_vfiprintf_r+0x6a>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	; 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <_vfiprintf_r+0x244>)
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	d101      	bne.n	8008f84 <_vfiprintf_r+0x60>
 8008f80:	68b5      	ldr	r5, [r6, #8]
 8008f82:	e7df      	b.n	8008f44 <_vfiprintf_r+0x20>
 8008f84:	4b79      	ldr	r3, [pc, #484]	; (800916c <_vfiprintf_r+0x248>)
 8008f86:	429d      	cmp	r5, r3
 8008f88:	bf08      	it	eq
 8008f8a:	68f5      	ldreq	r5, [r6, #12]
 8008f8c:	e7da      	b.n	8008f44 <_vfiprintf_r+0x20>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	0598      	lsls	r0, r3, #22
 8008f92:	d4ed      	bmi.n	8008f70 <_vfiprintf_r+0x4c>
 8008f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f96:	f7fd fc3f 	bl	8006818 <__retarget_lock_release_recursive>
 8008f9a:	e7e9      	b.n	8008f70 <_vfiprintf_r+0x4c>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008faa:	2330      	movs	r3, #48	; 0x30
 8008fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009170 <_vfiprintf_r+0x24c>
 8008fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb4:	f04f 0901 	mov.w	r9, #1
 8008fb8:	4623      	mov	r3, r4
 8008fba:	469a      	mov	sl, r3
 8008fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_vfiprintf_r+0xa2>
 8008fc2:	2a25      	cmp	r2, #37	; 0x25
 8008fc4:	d1f9      	bne.n	8008fba <_vfiprintf_r+0x96>
 8008fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8008fca:	d00b      	beq.n	8008fe4 <_vfiprintf_r+0xc0>
 8008fcc:	465b      	mov	r3, fp
 8008fce:	4622      	mov	r2, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7ff ff94 	bl	8008f00 <__sfputs_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f000 80aa 	beq.w	8009132 <_vfiprintf_r+0x20e>
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	445a      	add	r2, fp
 8008fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80a2 	beq.w	8009132 <_vfiprintf_r+0x20e>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff8:	f10a 0a01 	add.w	sl, sl, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009004:	931a      	str	r3, [sp, #104]	; 0x68
 8009006:	4654      	mov	r4, sl
 8009008:	2205      	movs	r2, #5
 800900a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900e:	4858      	ldr	r0, [pc, #352]	; (8009170 <_vfiprintf_r+0x24c>)
 8009010:	f7f7 f8ee 	bl	80001f0 <memchr>
 8009014:	9a04      	ldr	r2, [sp, #16]
 8009016:	b9d8      	cbnz	r0, 8009050 <_vfiprintf_r+0x12c>
 8009018:	06d1      	lsls	r1, r2, #27
 800901a:	bf44      	itt	mi
 800901c:	2320      	movmi	r3, #32
 800901e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009022:	0713      	lsls	r3, r2, #28
 8009024:	bf44      	itt	mi
 8009026:	232b      	movmi	r3, #43	; 0x2b
 8009028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902c:	f89a 3000 	ldrb.w	r3, [sl]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d015      	beq.n	8009060 <_vfiprintf_r+0x13c>
 8009034:	9a07      	ldr	r2, [sp, #28]
 8009036:	4654      	mov	r4, sl
 8009038:	2000      	movs	r0, #0
 800903a:	f04f 0c0a 	mov.w	ip, #10
 800903e:	4621      	mov	r1, r4
 8009040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009044:	3b30      	subs	r3, #48	; 0x30
 8009046:	2b09      	cmp	r3, #9
 8009048:	d94e      	bls.n	80090e8 <_vfiprintf_r+0x1c4>
 800904a:	b1b0      	cbz	r0, 800907a <_vfiprintf_r+0x156>
 800904c:	9207      	str	r2, [sp, #28]
 800904e:	e014      	b.n	800907a <_vfiprintf_r+0x156>
 8009050:	eba0 0308 	sub.w	r3, r0, r8
 8009054:	fa09 f303 	lsl.w	r3, r9, r3
 8009058:	4313      	orrs	r3, r2
 800905a:	9304      	str	r3, [sp, #16]
 800905c:	46a2      	mov	sl, r4
 800905e:	e7d2      	b.n	8009006 <_vfiprintf_r+0xe2>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	1d19      	adds	r1, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	9103      	str	r1, [sp, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfbb      	ittet	lt
 800906c:	425b      	neglt	r3, r3
 800906e:	f042 0202 	orrlt.w	r2, r2, #2
 8009072:	9307      	strge	r3, [sp, #28]
 8009074:	9307      	strlt	r3, [sp, #28]
 8009076:	bfb8      	it	lt
 8009078:	9204      	strlt	r2, [sp, #16]
 800907a:	7823      	ldrb	r3, [r4, #0]
 800907c:	2b2e      	cmp	r3, #46	; 0x2e
 800907e:	d10c      	bne.n	800909a <_vfiprintf_r+0x176>
 8009080:	7863      	ldrb	r3, [r4, #1]
 8009082:	2b2a      	cmp	r3, #42	; 0x2a
 8009084:	d135      	bne.n	80090f2 <_vfiprintf_r+0x1ce>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	9203      	str	r2, [sp, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	bfb8      	it	lt
 8009092:	f04f 33ff 	movlt.w	r3, #4294967295
 8009096:	3402      	adds	r4, #2
 8009098:	9305      	str	r3, [sp, #20]
 800909a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009180 <_vfiprintf_r+0x25c>
 800909e:	7821      	ldrb	r1, [r4, #0]
 80090a0:	2203      	movs	r2, #3
 80090a2:	4650      	mov	r0, sl
 80090a4:	f7f7 f8a4 	bl	80001f0 <memchr>
 80090a8:	b140      	cbz	r0, 80090bc <_vfiprintf_r+0x198>
 80090aa:	2340      	movs	r3, #64	; 0x40
 80090ac:	eba0 000a 	sub.w	r0, r0, sl
 80090b0:	fa03 f000 	lsl.w	r0, r3, r0
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	4303      	orrs	r3, r0
 80090b8:	3401      	adds	r4, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	482c      	ldr	r0, [pc, #176]	; (8009174 <_vfiprintf_r+0x250>)
 80090c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c6:	2206      	movs	r2, #6
 80090c8:	f7f7 f892 	bl	80001f0 <memchr>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d03f      	beq.n	8009150 <_vfiprintf_r+0x22c>
 80090d0:	4b29      	ldr	r3, [pc, #164]	; (8009178 <_vfiprintf_r+0x254>)
 80090d2:	bb1b      	cbnz	r3, 800911c <_vfiprintf_r+0x1f8>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	3307      	adds	r3, #7
 80090d8:	f023 0307 	bic.w	r3, r3, #7
 80090dc:	3308      	adds	r3, #8
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	443b      	add	r3, r7
 80090e4:	9309      	str	r3, [sp, #36]	; 0x24
 80090e6:	e767      	b.n	8008fb8 <_vfiprintf_r+0x94>
 80090e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ec:	460c      	mov	r4, r1
 80090ee:	2001      	movs	r0, #1
 80090f0:	e7a5      	b.n	800903e <_vfiprintf_r+0x11a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	3401      	adds	r4, #1
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	4619      	mov	r1, r3
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4620      	mov	r0, r4
 8009100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009104:	3a30      	subs	r2, #48	; 0x30
 8009106:	2a09      	cmp	r2, #9
 8009108:	d903      	bls.n	8009112 <_vfiprintf_r+0x1ee>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0c5      	beq.n	800909a <_vfiprintf_r+0x176>
 800910e:	9105      	str	r1, [sp, #20]
 8009110:	e7c3      	b.n	800909a <_vfiprintf_r+0x176>
 8009112:	fb0c 2101 	mla	r1, ip, r1, r2
 8009116:	4604      	mov	r4, r0
 8009118:	2301      	movs	r3, #1
 800911a:	e7f0      	b.n	80090fe <_vfiprintf_r+0x1da>
 800911c:	ab03      	add	r3, sp, #12
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	462a      	mov	r2, r5
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <_vfiprintf_r+0x258>)
 8009124:	a904      	add	r1, sp, #16
 8009126:	4630      	mov	r0, r6
 8009128:	f7fd fcc2 	bl	8006ab0 <_printf_float>
 800912c:	4607      	mov	r7, r0
 800912e:	1c78      	adds	r0, r7, #1
 8009130:	d1d6      	bne.n	80090e0 <_vfiprintf_r+0x1bc>
 8009132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009134:	07d9      	lsls	r1, r3, #31
 8009136:	d405      	bmi.n	8009144 <_vfiprintf_r+0x220>
 8009138:	89ab      	ldrh	r3, [r5, #12]
 800913a:	059a      	lsls	r2, r3, #22
 800913c:	d402      	bmi.n	8009144 <_vfiprintf_r+0x220>
 800913e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009140:	f7fd fb6a 	bl	8006818 <__retarget_lock_release_recursive>
 8009144:	89ab      	ldrh	r3, [r5, #12]
 8009146:	065b      	lsls	r3, r3, #25
 8009148:	f53f af12 	bmi.w	8008f70 <_vfiprintf_r+0x4c>
 800914c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800914e:	e711      	b.n	8008f74 <_vfiprintf_r+0x50>
 8009150:	ab03      	add	r3, sp, #12
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	462a      	mov	r2, r5
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <_vfiprintf_r+0x258>)
 8009158:	a904      	add	r1, sp, #16
 800915a:	4630      	mov	r0, r6
 800915c:	f7fd ff4c 	bl	8006ff8 <_printf_i>
 8009160:	e7e4      	b.n	800912c <_vfiprintf_r+0x208>
 8009162:	bf00      	nop
 8009164:	080095ac 	.word	0x080095ac
 8009168:	080095cc 	.word	0x080095cc
 800916c:	0800958c 	.word	0x0800958c
 8009170:	0800980c 	.word	0x0800980c
 8009174:	08009816 	.word	0x08009816
 8009178:	08006ab1 	.word	0x08006ab1
 800917c:	08008f01 	.word	0x08008f01
 8009180:	08009812 	.word	0x08009812

08009184 <__swbuf_r>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	460e      	mov	r6, r1
 8009188:	4614      	mov	r4, r2
 800918a:	4605      	mov	r5, r0
 800918c:	b118      	cbz	r0, 8009196 <__swbuf_r+0x12>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <__swbuf_r+0x12>
 8009192:	f7fd fa7d 	bl	8006690 <__sinit>
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <__swbuf_r+0x98>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d12b      	bne.n	80091f4 <__swbuf_r+0x70>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	69a3      	ldr	r3, [r4, #24]
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	071a      	lsls	r2, r3, #28
 80091a6:	d52f      	bpl.n	8009208 <__swbuf_r+0x84>
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	b36b      	cbz	r3, 8009208 <__swbuf_r+0x84>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1ac0      	subs	r0, r0, r3
 80091b2:	6963      	ldr	r3, [r4, #20]
 80091b4:	b2f6      	uxtb	r6, r6
 80091b6:	4283      	cmp	r3, r0
 80091b8:	4637      	mov	r7, r6
 80091ba:	dc04      	bgt.n	80091c6 <__swbuf_r+0x42>
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f7ff f842 	bl	8008248 <_fflush_r>
 80091c4:	bb30      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	701e      	strb	r6, [r3, #0]
 80091d4:	6963      	ldr	r3, [r4, #20]
 80091d6:	3001      	adds	r0, #1
 80091d8:	4283      	cmp	r3, r0
 80091da:	d004      	beq.n	80091e6 <__swbuf_r+0x62>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d506      	bpl.n	80091f0 <__swbuf_r+0x6c>
 80091e2:	2e0a      	cmp	r6, #10
 80091e4:	d104      	bne.n	80091f0 <__swbuf_r+0x6c>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f7ff f82d 	bl	8008248 <_fflush_r>
 80091ee:	b988      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091f0:	4638      	mov	r0, r7
 80091f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <__swbuf_r+0x9c>)
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d101      	bne.n	80091fe <__swbuf_r+0x7a>
 80091fa:	68ac      	ldr	r4, [r5, #8]
 80091fc:	e7cf      	b.n	800919e <__swbuf_r+0x1a>
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <__swbuf_r+0xa0>)
 8009200:	429c      	cmp	r4, r3
 8009202:	bf08      	it	eq
 8009204:	68ec      	ldreq	r4, [r5, #12]
 8009206:	e7ca      	b.n	800919e <__swbuf_r+0x1a>
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	f000 f81a 	bl	8009244 <__swsetup_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d0cb      	beq.n	80091ac <__swbuf_r+0x28>
 8009214:	f04f 37ff 	mov.w	r7, #4294967295
 8009218:	e7ea      	b.n	80091f0 <__swbuf_r+0x6c>
 800921a:	bf00      	nop
 800921c:	080095ac 	.word	0x080095ac
 8009220:	080095cc 	.word	0x080095cc
 8009224:	0800958c 	.word	0x0800958c

08009228 <__ascii_wctomb>:
 8009228:	b149      	cbz	r1, 800923e <__ascii_wctomb+0x16>
 800922a:	2aff      	cmp	r2, #255	; 0xff
 800922c:	bf85      	ittet	hi
 800922e:	238a      	movhi	r3, #138	; 0x8a
 8009230:	6003      	strhi	r3, [r0, #0]
 8009232:	700a      	strbls	r2, [r1, #0]
 8009234:	f04f 30ff 	movhi.w	r0, #4294967295
 8009238:	bf98      	it	ls
 800923a:	2001      	movls	r0, #1
 800923c:	4770      	bx	lr
 800923e:	4608      	mov	r0, r1
 8009240:	4770      	bx	lr
	...

08009244 <__swsetup_r>:
 8009244:	4b32      	ldr	r3, [pc, #200]	; (8009310 <__swsetup_r+0xcc>)
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	681d      	ldr	r5, [r3, #0]
 800924a:	4606      	mov	r6, r0
 800924c:	460c      	mov	r4, r1
 800924e:	b125      	cbz	r5, 800925a <__swsetup_r+0x16>
 8009250:	69ab      	ldr	r3, [r5, #24]
 8009252:	b913      	cbnz	r3, 800925a <__swsetup_r+0x16>
 8009254:	4628      	mov	r0, r5
 8009256:	f7fd fa1b 	bl	8006690 <__sinit>
 800925a:	4b2e      	ldr	r3, [pc, #184]	; (8009314 <__swsetup_r+0xd0>)
 800925c:	429c      	cmp	r4, r3
 800925e:	d10f      	bne.n	8009280 <__swsetup_r+0x3c>
 8009260:	686c      	ldr	r4, [r5, #4]
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009268:	0719      	lsls	r1, r3, #28
 800926a:	d42c      	bmi.n	80092c6 <__swsetup_r+0x82>
 800926c:	06dd      	lsls	r5, r3, #27
 800926e:	d411      	bmi.n	8009294 <__swsetup_r+0x50>
 8009270:	2309      	movs	r3, #9
 8009272:	6033      	str	r3, [r6, #0]
 8009274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	e03e      	b.n	80092fe <__swsetup_r+0xba>
 8009280:	4b25      	ldr	r3, [pc, #148]	; (8009318 <__swsetup_r+0xd4>)
 8009282:	429c      	cmp	r4, r3
 8009284:	d101      	bne.n	800928a <__swsetup_r+0x46>
 8009286:	68ac      	ldr	r4, [r5, #8]
 8009288:	e7eb      	b.n	8009262 <__swsetup_r+0x1e>
 800928a:	4b24      	ldr	r3, [pc, #144]	; (800931c <__swsetup_r+0xd8>)
 800928c:	429c      	cmp	r4, r3
 800928e:	bf08      	it	eq
 8009290:	68ec      	ldreq	r4, [r5, #12]
 8009292:	e7e6      	b.n	8009262 <__swsetup_r+0x1e>
 8009294:	0758      	lsls	r0, r3, #29
 8009296:	d512      	bpl.n	80092be <__swsetup_r+0x7a>
 8009298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800929a:	b141      	cbz	r1, 80092ae <__swsetup_r+0x6a>
 800929c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a0:	4299      	cmp	r1, r3
 80092a2:	d002      	beq.n	80092aa <__swsetup_r+0x66>
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff fbcf 	bl	8008a48 <_free_r>
 80092aa:	2300      	movs	r3, #0
 80092ac:	6363      	str	r3, [r4, #52]	; 0x34
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	2300      	movs	r3, #0
 80092b8:	6063      	str	r3, [r4, #4]
 80092ba:	6923      	ldr	r3, [r4, #16]
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f043 0308 	orr.w	r3, r3, #8
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	b94b      	cbnz	r3, 80092de <__swsetup_r+0x9a>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092d4:	d003      	beq.n	80092de <__swsetup_r+0x9a>
 80092d6:	4621      	mov	r1, r4
 80092d8:	4630      	mov	r0, r6
 80092da:	f000 f84d 	bl	8009378 <__smakebuf_r>
 80092de:	89a0      	ldrh	r0, [r4, #12]
 80092e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092e4:	f010 0301 	ands.w	r3, r0, #1
 80092e8:	d00a      	beq.n	8009300 <__swsetup_r+0xbc>
 80092ea:	2300      	movs	r3, #0
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	6963      	ldr	r3, [r4, #20]
 80092f0:	425b      	negs	r3, r3
 80092f2:	61a3      	str	r3, [r4, #24]
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	b943      	cbnz	r3, 800930a <__swsetup_r+0xc6>
 80092f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092fc:	d1ba      	bne.n	8009274 <__swsetup_r+0x30>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	0781      	lsls	r1, r0, #30
 8009302:	bf58      	it	pl
 8009304:	6963      	ldrpl	r3, [r4, #20]
 8009306:	60a3      	str	r3, [r4, #8]
 8009308:	e7f4      	b.n	80092f4 <__swsetup_r+0xb0>
 800930a:	2000      	movs	r0, #0
 800930c:	e7f7      	b.n	80092fe <__swsetup_r+0xba>
 800930e:	bf00      	nop
 8009310:	20000024 	.word	0x20000024
 8009314:	080095ac 	.word	0x080095ac
 8009318:	080095cc 	.word	0x080095cc
 800931c:	0800958c 	.word	0x0800958c

08009320 <abort>:
 8009320:	b508      	push	{r3, lr}
 8009322:	2006      	movs	r0, #6
 8009324:	f000 f898 	bl	8009458 <raise>
 8009328:	2001      	movs	r0, #1
 800932a:	f7f8 fdb3 	bl	8001e94 <_exit>

0800932e <__swhatbuf_r>:
 800932e:	b570      	push	{r4, r5, r6, lr}
 8009330:	460e      	mov	r6, r1
 8009332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009336:	2900      	cmp	r1, #0
 8009338:	b096      	sub	sp, #88	; 0x58
 800933a:	4614      	mov	r4, r2
 800933c:	461d      	mov	r5, r3
 800933e:	da08      	bge.n	8009352 <__swhatbuf_r+0x24>
 8009340:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	602a      	str	r2, [r5, #0]
 8009348:	061a      	lsls	r2, r3, #24
 800934a:	d410      	bmi.n	800936e <__swhatbuf_r+0x40>
 800934c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009350:	e00e      	b.n	8009370 <__swhatbuf_r+0x42>
 8009352:	466a      	mov	r2, sp
 8009354:	f000 f89c 	bl	8009490 <_fstat_r>
 8009358:	2800      	cmp	r0, #0
 800935a:	dbf1      	blt.n	8009340 <__swhatbuf_r+0x12>
 800935c:	9a01      	ldr	r2, [sp, #4]
 800935e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009362:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009366:	425a      	negs	r2, r3
 8009368:	415a      	adcs	r2, r3
 800936a:	602a      	str	r2, [r5, #0]
 800936c:	e7ee      	b.n	800934c <__swhatbuf_r+0x1e>
 800936e:	2340      	movs	r3, #64	; 0x40
 8009370:	2000      	movs	r0, #0
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	b016      	add	sp, #88	; 0x58
 8009376:	bd70      	pop	{r4, r5, r6, pc}

08009378 <__smakebuf_r>:
 8009378:	898b      	ldrh	r3, [r1, #12]
 800937a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800937c:	079d      	lsls	r5, r3, #30
 800937e:	4606      	mov	r6, r0
 8009380:	460c      	mov	r4, r1
 8009382:	d507      	bpl.n	8009394 <__smakebuf_r+0x1c>
 8009384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	6123      	str	r3, [r4, #16]
 800938c:	2301      	movs	r3, #1
 800938e:	6163      	str	r3, [r4, #20]
 8009390:	b002      	add	sp, #8
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	ab01      	add	r3, sp, #4
 8009396:	466a      	mov	r2, sp
 8009398:	f7ff ffc9 	bl	800932e <__swhatbuf_r>
 800939c:	9900      	ldr	r1, [sp, #0]
 800939e:	4605      	mov	r5, r0
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7fd fa71 	bl	8006888 <_malloc_r>
 80093a6:	b948      	cbnz	r0, 80093bc <__smakebuf_r+0x44>
 80093a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ac:	059a      	lsls	r2, r3, #22
 80093ae:	d4ef      	bmi.n	8009390 <__smakebuf_r+0x18>
 80093b0:	f023 0303 	bic.w	r3, r3, #3
 80093b4:	f043 0302 	orr.w	r3, r3, #2
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	e7e3      	b.n	8009384 <__smakebuf_r+0xc>
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <__smakebuf_r+0x7c>)
 80093be:	62b3      	str	r3, [r6, #40]	; 0x28
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	6020      	str	r0, [r4, #0]
 80093c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	9b00      	ldr	r3, [sp, #0]
 80093cc:	6163      	str	r3, [r4, #20]
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	6120      	str	r0, [r4, #16]
 80093d2:	b15b      	cbz	r3, 80093ec <__smakebuf_r+0x74>
 80093d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 f86b 	bl	80094b4 <_isatty_r>
 80093de:	b128      	cbz	r0, 80093ec <__smakebuf_r+0x74>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	89a0      	ldrh	r0, [r4, #12]
 80093ee:	4305      	orrs	r5, r0
 80093f0:	81a5      	strh	r5, [r4, #12]
 80093f2:	e7cd      	b.n	8009390 <__smakebuf_r+0x18>
 80093f4:	08006629 	.word	0x08006629

080093f8 <_malloc_usable_size_r>:
 80093f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fc:	1f18      	subs	r0, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfbc      	itt	lt
 8009402:	580b      	ldrlt	r3, [r1, r0]
 8009404:	18c0      	addlt	r0, r0, r3
 8009406:	4770      	bx	lr

08009408 <_raise_r>:
 8009408:	291f      	cmp	r1, #31
 800940a:	b538      	push	{r3, r4, r5, lr}
 800940c:	4604      	mov	r4, r0
 800940e:	460d      	mov	r5, r1
 8009410:	d904      	bls.n	800941c <_raise_r+0x14>
 8009412:	2316      	movs	r3, #22
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	f04f 30ff 	mov.w	r0, #4294967295
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800941e:	b112      	cbz	r2, 8009426 <_raise_r+0x1e>
 8009420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009424:	b94b      	cbnz	r3, 800943a <_raise_r+0x32>
 8009426:	4620      	mov	r0, r4
 8009428:	f000 f830 	bl	800948c <_getpid_r>
 800942c:	462a      	mov	r2, r5
 800942e:	4601      	mov	r1, r0
 8009430:	4620      	mov	r0, r4
 8009432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009436:	f000 b817 	b.w	8009468 <_kill_r>
 800943a:	2b01      	cmp	r3, #1
 800943c:	d00a      	beq.n	8009454 <_raise_r+0x4c>
 800943e:	1c59      	adds	r1, r3, #1
 8009440:	d103      	bne.n	800944a <_raise_r+0x42>
 8009442:	2316      	movs	r3, #22
 8009444:	6003      	str	r3, [r0, #0]
 8009446:	2001      	movs	r0, #1
 8009448:	e7e7      	b.n	800941a <_raise_r+0x12>
 800944a:	2400      	movs	r4, #0
 800944c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009450:	4628      	mov	r0, r5
 8009452:	4798      	blx	r3
 8009454:	2000      	movs	r0, #0
 8009456:	e7e0      	b.n	800941a <_raise_r+0x12>

08009458 <raise>:
 8009458:	4b02      	ldr	r3, [pc, #8]	; (8009464 <raise+0xc>)
 800945a:	4601      	mov	r1, r0
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	f7ff bfd3 	b.w	8009408 <_raise_r>
 8009462:	bf00      	nop
 8009464:	20000024 	.word	0x20000024

08009468 <_kill_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_kill_r+0x20>)
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	f7f8 fcfd 	bl	8001e74 <_kill>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	d102      	bne.n	8009484 <_kill_r+0x1c>
 800947e:	682b      	ldr	r3, [r5, #0]
 8009480:	b103      	cbz	r3, 8009484 <_kill_r+0x1c>
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	bd38      	pop	{r3, r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	20004384 	.word	0x20004384

0800948c <_getpid_r>:
 800948c:	f7f8 bcea 	b.w	8001e64 <_getpid>

08009490 <_fstat_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_fstat_r+0x20>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	4611      	mov	r1, r2
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	f7f8 fd48 	bl	8001f32 <_fstat>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d102      	bne.n	80094ac <_fstat_r+0x1c>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	b103      	cbz	r3, 80094ac <_fstat_r+0x1c>
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	bd38      	pop	{r3, r4, r5, pc}
 80094ae:	bf00      	nop
 80094b0:	20004384 	.word	0x20004384

080094b4 <_isatty_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d06      	ldr	r5, [pc, #24]	; (80094d0 <_isatty_r+0x1c>)
 80094b8:	2300      	movs	r3, #0
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	602b      	str	r3, [r5, #0]
 80094c0:	f7f8 fd47 	bl	8001f52 <_isatty>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_isatty_r+0x1a>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_isatty_r+0x1a>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	20004384 	.word	0x20004384

080094d4 <_sbrk>:
 80094d4:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <_sbrk+0x14>)
 80094d6:	6811      	ldr	r1, [r2, #0]
 80094d8:	4603      	mov	r3, r0
 80094da:	b909      	cbnz	r1, 80094e0 <_sbrk+0xc>
 80094dc:	4903      	ldr	r1, [pc, #12]	; (80094ec <_sbrk+0x18>)
 80094de:	6011      	str	r1, [r2, #0]
 80094e0:	6810      	ldr	r0, [r2, #0]
 80094e2:	4403      	add	r3, r0
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	4770      	bx	lr
 80094e8:	20004388 	.word	0x20004388
 80094ec:	20004390 	.word	0x20004390

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr

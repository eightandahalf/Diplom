
28.12_balance_stend_plus_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009348  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080094e8  080094e8  000194e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009944  08009944  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800994c  0800994c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004198  200001f4  08009b48  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000438c  08009b48  0002438c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f04  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019899  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014935  00000000  00000000  00051801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ab5  00000000  00000000  00066136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000febeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  000fec3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094d0 	.word	0x080094d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	080094d0 	.word	0x080094d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_I2C1_Init+0x54>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <MX_I2C1_Init+0x58>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_I2C1_Init+0x50>)
 8001006:	f001 fb71 	bl	80026ec <HAL_I2C_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001010:	f000 fe62 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000210 	.word	0x20000210
 800101c:	40005400 	.word	0x40005400
 8001020:	00061a80 	.word	0x00061a80

08001024 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C2_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C2_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C2_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C2_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C2_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C2_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C2_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C2_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C2_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C2_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C2_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C2_Init+0x50>)
 8001062:	f001 fb43 	bl	80026ec <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 fe34 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000264 	.word	0x20000264
 8001078:	40005800 	.word	0x40005800
 800107c:	00061a80 	.word	0x00061a80

08001080 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <HAL_I2C_MspInit+0x108>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12c      	bne.n	80010fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a38      	ldr	r2, [pc, #224]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	482d      	ldr	r0, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0x110>)
 80010da:	f001 f983 	bl	80023e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_I2C_MspInit+0x10c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010fa:	e041      	b.n	8001180 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <HAL_I2C_MspInit+0x114>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d13c      	bne.n	8001180 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_I2C_MspInit+0x10c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_I2C_MspInit+0x10c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_I2C_MspInit+0x10c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001134:	2304      	movs	r3, #4
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <HAL_I2C_MspInit+0x110>)
 8001140:	f001 f950 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001144:	2308      	movs	r3, #8
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001154:	2309      	movs	r3, #9
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <HAL_I2C_MspInit+0x110>)
 8001160:	f001 f940 	bl	80023e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_I2C_MspInit+0x10c>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_I2C_MspInit+0x10c>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_I2C_MspInit+0x10c>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40005400 	.word	0x40005400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020400 	.word	0x40020400
 8001194:	40005800 	.word	0x40005800

08001198 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80011a2:	4a38      	ldr	r2, [pc, #224]	; (8001284 <HD44780_Init+0xec>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <HD44780_Init+0xf0>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <HD44780_Init+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HD44780_Init+0xec>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d907      	bls.n	80011cc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <HD44780_Init+0xf4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <HD44780_Init+0xf4>)
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e006      	b.n	80011da <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HD44780_Init+0xf4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HD44780_Init+0xf4>)
 80011d8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80011da:	f000 f985 	bl	80014e8 <DelayInit>
  HAL_Delay(50);
 80011de:	2032      	movs	r0, #50	; 0x32
 80011e0:	f000 fffa 	bl	80021d8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HD44780_Init+0xf0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f943 	bl	8001474 <ExpanderWrite>
  HAL_Delay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f000 fff1 	bl	80021d8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80011f6:	2030      	movs	r0, #48	; 0x30
 80011f8:	f000 f92b 	bl	8001452 <Write4Bits>
  DelayUS(4500);
 80011fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8001200:	f000 f99c 	bl	800153c <DelayUS>

  Write4Bits(0x03 << 4);
 8001204:	2030      	movs	r0, #48	; 0x30
 8001206:	f000 f924 	bl	8001452 <Write4Bits>
  DelayUS(4500);
 800120a:	f241 1094 	movw	r0, #4500	; 0x1194
 800120e:	f000 f995 	bl	800153c <DelayUS>

  Write4Bits(0x03 << 4);
 8001212:	2030      	movs	r0, #48	; 0x30
 8001214:	f000 f91d 	bl	8001452 <Write4Bits>
  DelayUS(4500);
 8001218:	f241 1094 	movw	r0, #4500	; 0x1194
 800121c:	f000 f98e 	bl	800153c <DelayUS>

  Write4Bits(0x02 << 4);
 8001220:	2020      	movs	r0, #32
 8001222:	f000 f916 	bl	8001452 <Write4Bits>
  DelayUS(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f000 f988 	bl	800153c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HD44780_Init+0xf4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f8ce 	bl	80013d8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HD44780_Init+0xf8>)
 800123e:	2204      	movs	r2, #4
 8001240:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001242:	f000 f875 	bl	8001330 <HD44780_Display>
  HD44780_Clear();
 8001246:	f000 f82b 	bl	80012a0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HD44780_Init+0xfc>)
 800124c:	2202      	movs	r2, #2
 800124e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HD44780_Init+0xfc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f8bc 	bl	80013d8 <SendCommand>
  DelayUS(4500);
 8001260:	f241 1094 	movw	r0, #4500	; 0x1194
 8001264:	f000 f96a 	bl	800153c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001268:	490b      	ldr	r1, [pc, #44]	; (8001298 <HD44780_Init+0x100>)
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f876 	bl	800135c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <HD44780_Init+0x104>)
 8001272:	2001      	movs	r0, #1
 8001274:	f000 f872 	bl	800135c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001278:	f000 f81d 	bl	80012b6 <HD44780_Home>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002bb 	.word	0x200002bb
 8001288:	200002bc 	.word	0x200002bc
 800128c:	200002b8 	.word	0x200002b8
 8001290:	200002b9 	.word	0x200002b9
 8001294:	200002ba 	.word	0x200002ba
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008

080012a0 <HD44780_Clear>:

void HD44780_Clear()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 f897 	bl	80013d8 <SendCommand>
  DelayUS(2000);
 80012aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012ae:	f000 f945 	bl	800153c <DelayUS>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HD44780_Home>:

void HD44780_Home()
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 f88c 	bl	80013d8 <SendCommand>
  DelayUS(2000);
 80012c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012c4:	f000 f93a 	bl	800153c <DelayUS>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HD44780_SetCursor+0x5c>)
 80012de:	f107 0408 	add.w	r4, r7, #8
 80012e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HD44780_SetCursor+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	79ba      	ldrb	r2, [r7, #6]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d303      	bcc.n	80012fa <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HD44780_SetCursor+0x60>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	3318      	adds	r3, #24
 8001300:	443b      	add	r3, r7
 8001302:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4413      	add	r3, r2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f85d 	bl	80013d8 <SendCommand>
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	080094e8 	.word	0x080094e8
 800132c:	200002bb 	.word	0x200002bb

08001330 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HD44780_Display+0x28>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HD44780_Display+0x28>)
 8001340:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HD44780_Display+0x28>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f843 	bl	80013d8 <SendCommand>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002b9 	.word	0x200002b9

0800135c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	b25b      	sxtb	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f82a 	bl	80013d8 <SendCommand>
  for (int i=0; i<8; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e009      	b.n	800139e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f82e 	bl	80013f4 <SendChar>
  for (int i=0; i<8; i++)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	ddf2      	ble.n	800138a <HD44780_CreateSpecialChar+0x2e>
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80013b6:	e006      	b.n	80013c6 <HD44780_PrintStr+0x18>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f817 	bl	80013f4 <SendChar>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f4      	bne.n	80013b8 <HD44780_PrintStr+0xa>
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f812 	bl	8001410 <Send>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f804 	bl	8001410 <Send>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f023 030f 	bic.w	r3, r3, #15
 8001426:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	4313      	orrs	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f80b 	bl	8001452 <Write4Bits>
  Write4Bits((lownib)|mode);
 800143c:	7bba      	ldrb	r2, [r7, #14]
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	4313      	orrs	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f804 	bl	8001452 <Write4Bits>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f808 	bl	8001474 <ExpanderWrite>
  PulseEnable(value);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f820 	bl	80014ac <PulseEnable>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <ExpanderWrite+0x30>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800148a:	f107 020f 	add.w	r2, r7, #15
 800148e:	230a      	movs	r3, #10
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	214e      	movs	r1, #78	; 0x4e
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <ExpanderWrite+0x34>)
 8001498:	f001 fa6c 	bl	8002974 <HAL_I2C_Master_Transmit>
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200002bc 	.word	0x200002bc
 80014a8:	20000264 	.word	0x20000264

080014ac <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffd8 	bl	8001474 <ExpanderWrite>
  DelayUS(20);
 80014c4:	2014      	movs	r0, #20
 80014c6:	f000 f839 	bl	800153c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffce 	bl	8001474 <ExpanderWrite>
  DelayUS(20);
 80014d8:	2014      	movs	r0, #20
 80014da:	f000 f82f 	bl	800153c <DelayUS>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <DelayInit>:

static void DelayInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <DelayInit+0x4c>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a10      	ldr	r2, [pc, #64]	; (8001534 <DelayInit+0x4c>)
 80014f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <DelayInit+0x4c>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <DelayInit+0x4c>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <DelayInit+0x50>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <DelayInit+0x50>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <DelayInit+0x50>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <DelayInit+0x50>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <DelayInit+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001522:	bf00      	nop
  __ASM volatile ("NOP");
 8001524:	bf00      	nop
  __ASM volatile ("NOP");
 8001526:	bf00      	nop
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000edf0 	.word	0xe000edf0
 8001538:	e0001000 	.word	0xe0001000

0800153c <DelayUS>:

static void DelayUS(uint32_t us) {
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <DelayUS+0x44>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <DelayUS+0x48>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9a      	lsrs	r2, r3, #18
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <DelayUS+0x4c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <DelayUS+0x4c>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f6      	bhi.n	800155e <DelayUS+0x22>
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000010 	.word	0x20000010
 8001584:	431bde83 	.word	0x431bde83
 8001588:	e0001000 	.word	0xe0001000

0800158c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800159c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <vApplicationGetIdleTaskMemory+0x30>)
 80015a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200002e0 	.word	0x200002e0
 80015bc:	20000394 	.word	0x20000394

080015c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7f1b      	ldrb	r3, [r3, #28]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d152      	bne.n	8001676 <HAL_TIM_IC_CaptureCallback+0xb6>
	{
		driver_off_flag = 0;
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10d      	bne.n	80015fa <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80015de:	2100      	movs	r1, #0
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f003 facd 	bl	8004b80 <HAL_TIM_ReadCapturedValue>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015ea:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

			GLBL_frequency_counter = 0;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false

			GLBL_frequency_counter++;
		}
	}
}
 80015f8:	e03d      	b.n	8001676 <HAL_TIM_IC_CaptureCallback+0xb6>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80015fa:	2100      	movs	r1, #0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f003 fabf 	bl	8004b80 <HAL_TIM_ReadCapturedValue>
 8001602:	4603      	mov	r3, r0
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001606:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d907      	bls.n	8001624 <HAL_TIM_IC_CaptureCallback+0x64>
				Difference = IC_Val2-IC_Val1;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00d      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x80>
			else if (IC_Val1 > IC_Val2)
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d907      	bls.n	8001640 <HAL_TIM_IC_CaptureCallback+0x80>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	4a15      	ldr	r2, [pc, #84]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800163e:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001642:	60fb      	str	r3, [r7, #12]
			GLBL_frequency = refClock/Difference;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001650:	edd7 6a03 	vldr	s13, [r7, #12]
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_TIM_IC_CaptureCallback+0xdc>)
 800165a:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
			GLBL_frequency_counter++;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002dc 	.word	0x200002dc
 8001684:	200002cc 	.word	0x200002cc
 8001688:	200002c0 	.word	0x200002c0
 800168c:	200002d8 	.word	0x200002d8
 8001690:	200002c4 	.word	0x200002c4
 8001694:	200002c8 	.word	0x200002c8
 8001698:	49771500 	.word	0x49771500
 800169c:	200002d0 	.word	0x200002d0

080016a0 <MPU6050_Init>:

void MPU6050_Init (void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2301      	movs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	2275      	movs	r2, #117	; 0x75
 80016b8:	21d0      	movs	r1, #208	; 0xd0
 80016ba:	482a      	ldr	r0, [pc, #168]	; (8001764 <MPU6050_Init+0xc4>)
 80016bc:	f001 fb52 	bl	8002d64 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b68      	cmp	r3, #104	; 0x68
 80016c4:	d14a      	bne.n	800175c <MPU6050_Init+0xbc>
	{
		// internal accelerometr delay to zero
		Data = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, DLPF_CFG_REG, 1, &Data, 1, 1000);
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	221a      	movs	r2, #26
 80016dc:	21d0      	movs	r1, #208	; 0xd0
 80016de:	4821      	ldr	r0, [pc, #132]	; (8001764 <MPU6050_Init+0xc4>)
 80016e0:	f001 fa46 	bl	8002b70 <HAL_I2C_Mem_Write>

		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	2301      	movs	r3, #1
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	1dbb      	adds	r3, r7, #6
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	226b      	movs	r2, #107	; 0x6b
 80016fa:	21d0      	movs	r1, #208	; 0xd0
 80016fc:	4819      	ldr	r0, [pc, #100]	; (8001764 <MPU6050_Init+0xc4>)
 80016fe:	f001 fa37 	bl	8002b70 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001702:	2307      	movs	r3, #7
 8001704:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	1dbb      	adds	r3, r7, #6
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2219      	movs	r2, #25
 8001718:	21d0      	movs	r1, #208	; 0xd0
 800171a:	4812      	ldr	r0, [pc, #72]	; (8001764 <MPU6050_Init+0xc4>)
 800171c:	f001 fa28 	bl	8002b70 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	1dbb      	adds	r3, r7, #6
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	221c      	movs	r2, #28
 8001736:	21d0      	movs	r1, #208	; 0xd0
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <MPU6050_Init+0xc4>)
 800173a:	f001 fa19 	bl	8002b70 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2301      	movs	r3, #1
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	221b      	movs	r2, #27
 8001754:	21d0      	movs	r1, #208	; 0xd0
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <MPU6050_Init+0xc4>)
 8001758:	f001 fa0a 	bl	8002b70 <HAL_I2C_Mem_Write>
	}
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000210 	.word	0x20000210

08001768 <mpu6050_read_accel>:

void mpu6050_read_accel(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af04      	add	r7, sp, #16
	// RA_ - READ ACCELEROMETR

	// accelerometrs values
	int16_t RA_Accel_X_RAW = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	81fb      	strh	r3, [r7, #14]
	float RA_Ax;
	uint8_t RA_Rec_Data[2];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RA_Rec_Data, 2, 1000);
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2302      	movs	r3, #2
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	223b      	movs	r2, #59	; 0x3b
 8001784:	21d0      	movs	r1, #208	; 0xd0
 8001786:	481b      	ldr	r0, [pc, #108]	; (80017f4 <mpu6050_read_accel+0x8c>)
 8001788:	f001 faec 	bl	8002d64 <HAL_I2C_Mem_Read>

	RA_Accel_X_RAW = (int16_t)(RA_Rec_Data[0] << 8 | RA_Rec_Data [1]);
 800178c:	793b      	ldrb	r3, [r7, #4]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	797b      	ldrb	r3, [r7, #5]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	81fb      	strh	r3, [r7, #14]

	RA_Ax = RA_Accel_X_RAW/16384.0;
 800179a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec8 	bl	8000534 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <mpu6050_read_accel+0x90>)
 80017aa:	f7ff f857 	bl	800085c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff f9ff 	bl	8000bb8 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	60bb      	str	r3, [r7, #8]

	GLBL_act_acc_value = RA_Ax*1000;
 80017be:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017fc <mpu6050_read_accel+0x94>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ce:	ee17 3a90 	vmov	r3, s15
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <mpu6050_read_accel+0x98>)
 80017d6:	801a      	strh	r2, [r3, #0]

	if (GLBL_frequency_counter > 0){
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <mpu6050_read_accel+0x9c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <mpu6050_read_accel+0x82>
			GLBL_frequency_counter++;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <mpu6050_read_accel+0x9c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <mpu6050_read_accel+0x9c>)
 80017e8:	6013      	str	r3, [r2, #0]
		}
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000210 	.word	0x20000210
 80017f8:	40d00000 	.word	0x40d00000
 80017fc:	447a0000 	.word	0x447a0000
 8001800:	200002d4 	.word	0x200002d4
 8001804:	200002d8 	.word	0x200002d8

08001808 <lcd1602_print>:

void lcd1602_print(STRCT_lcd_process* obj_lcd_process)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	// LCDPR_ - LCD PRINT

	driver_off_flag++;
 8001810:	4ba8      	ldr	r3, [pc, #672]	; (8001ab4 <lcd1602_print+0x2ac>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	4ba6      	ldr	r3, [pc, #664]	; (8001ab4 <lcd1602_print+0x2ac>)
 800181a:	801a      	strh	r2, [r3, #0]
	if(driver_off_flag > 200)
 800181c:	4ba5      	ldr	r3, [pc, #660]	; (8001ab4 <lcd1602_print+0x2ac>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	2bc8      	cmp	r3, #200	; 0xc8
 8001822:	d907      	bls.n	8001834 <lcd1602_print+0x2c>
	{
		GLBL_frequency = 0;
 8001824:	4ba4      	ldr	r3, [pc, #656]	; (8001ab8 <lcd1602_print+0x2b0>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
		GLBL_frequency_counter = 0;
 800182c:	4ba3      	ldr	r3, [pc, #652]	; (8001abc <lcd1602_print+0x2b4>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e008      	b.n	8001846 <lcd1602_print+0x3e>
	} else if (GLBL_frequency_counter > 0){
 8001834:	4ba1      	ldr	r3, [pc, #644]	; (8001abc <lcd1602_print+0x2b4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <lcd1602_print+0x3e>
		GLBL_frequency_counter++;
 800183c:	4b9f      	ldr	r3, [pc, #636]	; (8001abc <lcd1602_print+0x2b4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a9e      	ldr	r2, [pc, #632]	; (8001abc <lcd1602_print+0x2b4>)
 8001844:	6013      	str	r3, [r2, #0]
	}

	obj_lcd_process->LCDPR_act_acc_value = GLBL_act_acc_value;
 8001846:	4b9e      	ldr	r3, [pc, #632]	; (8001ac0 <lcd1602_print+0x2b8>)
 8001848:	f9b3 2000 	ldrsh.w	r2, [r3]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	801a      	strh	r2, [r3, #0]
	obj_lcd_process->LCDPR_frequency_counter = GLBL_frequency_counter;
 8001850:	4b9a      	ldr	r3, [pc, #616]	; (8001abc <lcd1602_print+0x2b4>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	611a      	str	r2, [r3, #16]
	obj_lcd_process->LCDPR_frequency = GLBL_frequency;
 8001858:	4b97      	ldr	r3, [pc, #604]	; (8001ab8 <lcd1602_print+0x2b0>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]

	// there were a hard fault because here can be dividing of 360*phase_crockodil to period, and
	// period shouldn't be a zero
	if(obj_lcd_process->LCDPR_prev_acc_value > 0 && obj_lcd_process->LCDPR_act_acc_value <= 0)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dd70      	ble.n	800194c <lcd1602_print+0x144>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001870:	2b00      	cmp	r3, #0
 8001872:	dc6b      	bgt.n	800194c <lcd1602_print+0x144>
	{
		obj_lcd_process->LCDPR_phase_crockodil = obj_lcd_process->LCDPR_frequency_counter;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		obj_lcd_process->LCDPR_phase = 360*(obj_lcd_process->LCDPR_phase_crockodil) / (obj_lcd_process->LCDPR_frequency) / 100;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800188c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001ac4 <lcd1602_print+0x2bc>
 8001890:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7a06 	vldr	s15, [r3, #24]
 800189a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800189e:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001ac8 <lcd1602_print+0x2c0>
 80018a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		(obj_lcd_process->LCDPR_phase_flag)++;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if(obj_lcd_process->LCDPR_phase_flag > 6 && (driver_off_flag > 200 || (obj_lcd_process->LCDPR_frequency_counter > 0 && obj_lcd_process->LCDPR_phase < 600)))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d93b      	bls.n	800193e <lcd1602_print+0x136>
 80018c6:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <lcd1602_print+0x2ac>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	2bc8      	cmp	r3, #200	; 0xc8
 80018cc:	d80d      	bhi.n	80018ea <lcd1602_print+0xe2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d033      	beq.n	800193e <lcd1602_print+0x136>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80018dc:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001acc <lcd1602_print+0x2c4>
 80018e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d529      	bpl.n	800193e <lcd1602_print+0x136>
		{
			// phase
			HD44780_SetCursor(8, 0);
 80018ea:	2100      	movs	r1, #0
 80018ec:	2008      	movs	r0, #8
 80018ee:	f7ff fced 	bl	80012cc <HD44780_SetCursor>
			memset(obj_lcd_process->LCDPR_print_buff, ' ', sizeof(obj_lcd_process->LCDPR_print_buff));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3341      	adds	r3, #65	; 0x41
 80018f6:	2208      	movs	r2, #8
 80018f8:	2120      	movs	r1, #32
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 ff8b 	bl	8006816 <memset>
			HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3341      	adds	r3, #65	; 0x41
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fd52 	bl	80013ae <HD44780_PrintStr>
			HD44780_SetCursor(8, 0);
 800190a:	2100      	movs	r1, #0
 800190c:	2008      	movs	r0, #8
 800190e:	f7ff fcdd 	bl	80012cc <HD44780_SetCursor>
			sprintf(obj_lcd_process->LCDPR_print_buff,"Ph = %u", (unsigned int)obj_lcd_process->LCDPR_phase);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800191e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001922:	ee17 2a90 	vmov	r2, s15
 8001926:	496a      	ldr	r1, [pc, #424]	; (8001ad0 <lcd1602_print+0x2c8>)
 8001928:	f005 fcf6 	bl	8007318 <siprintf>
			HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3341      	adds	r3, #65	; 0x41
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd3c 	bl	80013ae <HD44780_PrintStr>

			obj_lcd_process->LCDPR_phase_flag = 0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}

		obj_lcd_process->LCDPR_frequency_counter = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
		obj_lcd_process->LCDPR_prev_phase_value = obj_lcd_process->LCDPR_phase;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	obj_lcd_process->LCDPR_freq_flag++;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001952:	3301      	adds	r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if(obj_lcd_process->LCDPR_freq_flag > 200)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001962:	2bc8      	cmp	r3, #200	; 0xc8
 8001964:	d929      	bls.n	80019ba <lcd1602_print+0x1b2>
	{
		HD44780_SetCursor(0, 0);
 8001966:	2100      	movs	r1, #0
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fcaf 	bl	80012cc <HD44780_SetCursor>
		memset(obj_lcd_process->LCDPR_print_buff, ' ', sizeof(obj_lcd_process->LCDPR_print_buff));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3341      	adds	r3, #65	; 0x41
 8001972:	2208      	movs	r2, #8
 8001974:	2120      	movs	r1, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f004 ff4d 	bl	8006816 <memset>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3341      	adds	r3, #65	; 0x41
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd14 	bl	80013ae <HD44780_PrintStr>
		HD44780_SetCursor(0, 0);
 8001986:	2100      	movs	r1, #0
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fc9f 	bl	80012cc <HD44780_SetCursor>
		sprintf(obj_lcd_process->LCDPR_print_buff,"F = %u", (unsigned int)obj_lcd_process->LCDPR_frequency);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edd3 7a06 	vldr	s15, [r3, #24]
 800199a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199e:	ee17 2a90 	vmov	r2, s15
 80019a2:	494c      	ldr	r1, [pc, #304]	; (8001ad4 <lcd1602_print+0x2cc>)
 80019a4:	f005 fcb8 	bl	8007318 <siprintf>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3341      	adds	r3, #65	; 0x41
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fcfe 	bl	80013ae <HD44780_PrintStr>

		obj_lcd_process->LCDPR_freq_flag = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	obj_lcd_process->LCDPR_prev_freqency_value = obj_lcd_process->LCDPR_frequency;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	61da      	str	r2, [r3, #28]

	obj_lcd_process->LCDPR_ampl_flag++;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	85da      	strh	r2, [r3, #46]	; 0x2e
	if(obj_lcd_process->LCDPR_ampl_flag < 200)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80019da:	2bc7      	cmp	r3, #199	; 0xc7
 80019dc:	dc1a      	bgt.n	8001a14 <lcd1602_print+0x20c>
	{
		if(obj_lcd_process->LCDPR_act_acc_value >= obj_lcd_process->LCDPR_acc_max_value)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	db04      	blt.n	80019f8 <lcd1602_print+0x1f0>
			obj_lcd_process->LCDPR_acc_max_value = obj_lcd_process->LCDPR_act_acc_value;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	809a      	strh	r2, [r3, #4]
		if(obj_lcd_process->LCDPR_act_acc_value < obj_lcd_process->LCDPR_acc_min_value)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	da4b      	bge.n	8001aa0 <lcd1602_print+0x298>
			obj_lcd_process->LCDPR_acc_min_value = obj_lcd_process->LCDPR_act_acc_value;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	80da      	strh	r2, [r3, #6]
 8001a12:	e045      	b.n	8001aa0 <lcd1602_print+0x298>
	}
	else
	{
		obj_lcd_process->LCDPR_acc_amplitude = obj_lcd_process->LCDPR_acc_max_value - obj_lcd_process->LCDPR_acc_min_value;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edc3 7a02 	vstr	s15, [r3, #8]

		HD44780_SetCursor(0, 1);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fc49 	bl	80012cc <HD44780_SetCursor>
		memset(obj_lcd_process->LCDPR_print_buff, ' ', sizeof(obj_lcd_process->LCDPR_print_buff));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3341      	adds	r3, #65	; 0x41
 8001a3e:	2208      	movs	r2, #8
 8001a40:	2120      	movs	r1, #32
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fee7 	bl	8006816 <memset>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3341      	adds	r3, #65	; 0x41
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fcae 	bl	80013ae <HD44780_PrintStr>
		HD44780_SetCursor(0, 1);
 8001a52:	2101      	movs	r1, #1
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fc39 	bl	80012cc <HD44780_SetCursor>
		sprintf(obj_lcd_process->LCDPR_print_buff,"A = %u", (unsigned int)obj_lcd_process->LCDPR_acc_amplitude);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6a:	ee17 2a90 	vmov	r2, s15
 8001a6e:	491a      	ldr	r1, [pc, #104]	; (8001ad8 <lcd1602_print+0x2d0>)
 8001a70:	f005 fc52 	bl	8007318 <siprintf>
		HD44780_PrintStr (obj_lcd_process->LCDPR_print_buff);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3341      	adds	r3, #65	; 0x41
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fc98 	bl	80013ae <HD44780_PrintStr>

		obj_lcd_process->LCDPR_prev_acc_amplitude = obj_lcd_process->LCDPR_acc_amplitude;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60da      	str	r2, [r3, #12]

		obj_lcd_process->LCDPR_ampl_flag = 0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	85da      	strh	r2, [r3, #46]	; 0x2e
		obj_lcd_process->LCDPR_acc_max_value = obj_lcd_process->LCDPR_act_acc_value;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	809a      	strh	r2, [r3, #4]
		obj_lcd_process->LCDPR_acc_min_value = obj_lcd_process->LCDPR_act_acc_value;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	80da      	strh	r2, [r3, #6]
	}

	obj_lcd_process->LCDPR_prev_acc_value = obj_lcd_process->LCDPR_act_acc_value;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	805a      	strh	r2, [r3, #2]

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200002dc 	.word	0x200002dc
 8001ab8:	200002d0 	.word	0x200002d0
 8001abc:	200002d8 	.word	0x200002d8
 8001ac0:	200002d4 	.word	0x200002d4
 8001ac4:	43b40000 	.word	0x43b40000
 8001ac8:	42c80000 	.word	0x42c80000
 8001acc:	44160000 	.word	0x44160000
 8001ad0:	080094f8 	.word	0x080094f8
 8001ad4:	08009500 	.word	0x08009500
 8001ad8:	08009508 	.word	0x08009508

08001adc <FRRTS_IMU_PROCESS>:

void FRRTS_IMU_PROCESS( void *pvParameters )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul; /* volatile to ensure ul is not optimized away. */
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		mpu6050_read_accel();
 8001ae4:	f7ff fe40 	bl	8001768 <mpu6050_read_accel>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e002      	b.n	8001af4 <FRRTS_IMU_PROCESS+0x18>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001afa:	d3f8      	bcc.n	8001aee <FRRTS_IMU_PROCESS+0x12>
		mpu6050_read_accel();
 8001afc:	e7f2      	b.n	8001ae4 <FRRTS_IMU_PROCESS+0x8>

08001afe <FRRTS_LCD_PRINT>:
		}
	}
}

void FRRTS_LCD_PRINT( void *pvParameters )
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b09a      	sub	sp, #104	; 0x68
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul; /* volatile to ensure ul is not optimized away. */
	/* As per most tasks, this task is implemented in an infinite loop. */

	STRCT_lcd_process obj_lcd_process = {0};
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2258      	movs	r2, #88	; 0x58
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fe81 	bl	8006816 <memset>

	for( ;; )
	{
		lcd1602_print(&obj_lcd_process);
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fe75 	bl	8001808 <lcd1602_print>

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++ )
 8001b1e:	2300      	movs	r3, #0
 8001b20:	667b      	str	r3, [r7, #100]	; 0x64
 8001b22:	e002      	b.n	8001b2a <FRRTS_LCD_PRINT+0x2c>
 8001b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b26:	3301      	adds	r3, #1
 8001b28:	667b      	str	r3, [r7, #100]	; 0x64
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b30:	d3f8      	bcc.n	8001b24 <FRRTS_LCD_PRINT+0x26>
		lcd1602_print(&obj_lcd_process);
 8001b32:	e7ef      	b.n	8001b14 <FRRTS_LCD_PRINT+0x16>

08001b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b3a:	f000 fb0b 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3e:	f000 f84f 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b42:	f7ff fa0b 	bl	8000f5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b46:	f7ff fa3f 	bl	8000fc8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b4a:	f7ff fa6b 	bl	8001024 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001b4e:	f000 fa19 	bl	8001f84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	MPU6050_Init();
 8001b52:	f7ff fda5 	bl	80016a0 <MPU6050_Init>
	// Функция инициализации дисплея
	HD44780_Init(2);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7ff fb1e 	bl	8001198 <HD44780_Init>
	HD44780_Clear();
 8001b5c:	f7ff fba0 	bl	80012a0 <HD44780_Clear>
	HD44780_SetCursor(3,0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	2003      	movs	r0, #3
 8001b64:	f7ff fbb2 	bl	80012cc <HD44780_SetCursor>
	HD44780_PrintStr("WELCOME TO");
 8001b68:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <main+0x90>)
 8001b6a:	f7ff fc20 	bl	80013ae <HD44780_PrintStr>
	HD44780_SetCursor(3,1);
 8001b6e:	2101      	movs	r1, #1
 8001b70:	2003      	movs	r0, #3
 8001b72:	f7ff fbab 	bl	80012cc <HD44780_SetCursor>
	HD44780_PrintStr("BALANCING");
 8001b76:	4814      	ldr	r0, [pc, #80]	; (8001bc8 <main+0x94>)
 8001b78:	f7ff fc19 	bl	80013ae <HD44780_PrintStr>
	HAL_Delay(2000);
 8001b7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b80:	f000 fb2a 	bl	80021d8 <HAL_Delay>

	HD44780_Clear();
 8001b84:	f7ff fb8c 	bl	80012a0 <HD44780_Clear>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4810      	ldr	r0, [pc, #64]	; (8001bcc <main+0x98>)
 8001b8c:	f002 fc84 	bl	8004498 <HAL_TIM_IC_Start_IT>

  /* Create one of the two tasks. Note that a real application should check
   the return value of the xTaskCreate() call to ensure the task was created
   successfully. */

   xTaskCreate(FRRTS_IMU_PROCESS, /* Pointer to the function that implements the task. */
 8001b90:	2300      	movs	r3, #0
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2301      	movs	r3, #1
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b9e:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <main+0x9c>)
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <main+0xa0>)
 8001ba2:	f003 fbe8 	bl	8005376 <xTaskCreate>
   NULL, /* This example does not use the task parameter. */
   1, /* This task will run at priority 1. */
   NULL ); /* This example does not use the task handle. */

   /* Create the other task in exactly the same way and at the same priority. */
   xTaskCreate(FRRTS_LCD_PRINT, "FRRTS_LCD_PRINT", 1000, NULL, 1, NULL );
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb4:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <main+0xa4>)
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <main+0xa8>)
 8001bb8:	f003 fbdd 	bl	8005376 <xTaskCreate>
   /* Start the scheduler so the tasks start executing. */
   vTaskStartScheduler();
 8001bbc:	f003 fd54 	bl	8005668 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x8c>
 8001bc2:	bf00      	nop
 8001bc4:	08009510 	.word	0x08009510
 8001bc8:	0800951c 	.word	0x0800951c
 8001bcc:	200005dc 	.word	0x200005dc
 8001bd0:	08009528 	.word	0x08009528
 8001bd4:	08001add 	.word	0x08001add
 8001bd8:	0800953c 	.word	0x0800953c
 8001bdc:	08001aff 	.word	0x08001aff

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	2230      	movs	r2, #48	; 0x30
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 fe11 	bl	8006816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <SystemClock_Config+0xcc>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <SystemClock_Config+0xcc>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <SystemClock_Config+0xcc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c2c:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c54:	2319      	movs	r3, #25
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c58:	23a8      	movs	r3, #168	; 0xa8
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 fe7f 	bl	800396c <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c74:	f000 f830 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c78:	230f      	movs	r3, #15
 8001c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2102      	movs	r1, #2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 f8e1 	bl	8003e5c <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ca0:	f000 f81a 	bl	8001cd8 <Error_Handler>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc6:	f000 fa67 	bl	8002198 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_MspInit+0x54>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_MspInit+0x54>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_MspInit+0x54>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_MspInit+0x54>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_MspInit+0x54>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_MspInit+0x54>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	210f      	movs	r1, #15
 8001d26:	f06f 0001 	mvn.w	r0, #1
 8001d2a:	f000 fb31 	bl	8002390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	2019      	movs	r0, #25
 8001d52:	f000 fb1d 	bl	8002390 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d56:	2019      	movs	r0, #25
 8001d58:	f000 fb36 	bl	80023c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_InitTick+0xa0>)
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_InitTick+0xa0>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_InitTick+0xa0>)
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d78:	f107 0210 	add.w	r2, r7, #16
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fa4a 	bl	800421c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d88:	f002 fa34 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8001d8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_InitTick+0xa4>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0c9b      	lsrs	r3, r3, #18
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_InitTick+0xa8>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <HAL_InitTick+0xac>)
 8001da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_InitTick+0xa8>)
 8001da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_InitTick+0xa8>)
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_InitTick+0xa8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_InitTick+0xa8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_InitTick+0xa8>)
 8001dbe:	f002 fa5f 	bl	8004280 <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d104      	bne.n	8001dd2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001dc8:	4806      	ldr	r0, [pc, #24]	; (8001de4 <HAL_InitTick+0xa8>)
 8001dca:	f002 faa9 	bl	8004320 <HAL_TIM_Base_Start_IT>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	431bde83 	.word	0x431bde83
 8001de4:	20000594 	.word	0x20000594
 8001de8:	40010000 	.word	0x40010000

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <NMI_Handler+0x4>

08001df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <MemManage_Handler+0x4>

08001dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e1e:	f002 fc4f 	bl	80046c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000594 	.word	0x20000594

08001e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM2_IRQHandler+0x10>)
 8001e32:	f002 fc45 	bl	80046c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200005dc 	.word	0x200005dc

08001e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_kill>:

int _kill(int pid, int sig)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5a:	f004 fbab 	bl	80065b4 <__errno>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2216      	movs	r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
	return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_exit>:

void _exit (int status)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ffe7 	bl	8001e50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e82:	e7fe      	b.n	8001e82 <_exit+0x12>

08001e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e00a      	b.n	8001eac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e96:	f3af 8000 	nop.w
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	60ba      	str	r2, [r7, #8]
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf0      	blt.n	8001e96 <_read+0x12>
	}

return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e009      	b.n	8001ee4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	60ba      	str	r2, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf1      	blt.n	8001ed0 <_write+0x12>
	}
	return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_close>:

int _close(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_isatty>:

int _isatty(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return 1;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fb8:	2253      	movs	r2, #83	; 0x53
 8001fba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd6:	4822      	ldr	r0, [pc, #136]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001fd8:	f002 f952 	bl	8004280 <HAL_TIM_Base_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001fe2:	f7ff fe79 	bl	8001cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481b      	ldr	r0, [pc, #108]	; (8002060 <MX_TIM2_Init+0xdc>)
 8001ff4:	f002 fd00 	bl	80049f8 <HAL_TIM_ConfigClockSource>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ffe:	f7ff fe6b 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002002:	4817      	ldr	r0, [pc, #92]	; (8002060 <MX_TIM2_Init+0xdc>)
 8002004:	f002 f9ee 	bl	80043e4 <HAL_TIM_IC_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800200e:	f7ff fe63 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <MX_TIM2_Init+0xdc>)
 8002022:	f003 f86d 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800202c:	f7ff fe54 	bl	8001cd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002030:	2300      	movs	r3, #0
 8002032:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002034:	2301      	movs	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002040:	463b      	mov	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_TIM2_Init+0xdc>)
 8002048:	f002 fc42 	bl	80048d0 <HAL_TIM_IC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002052:	f7ff fe41 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200005dc 	.word	0x200005dc

08002064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d133      	bne.n	80020ee <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_TIM_Base_MspInit+0x94>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <HAL_TIM_Base_MspInit+0x94>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_TIM_Base_MspInit+0x94>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_TIM_Base_MspInit+0x94>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <HAL_TIM_Base_MspInit+0x94>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_TIM_Base_MspInit+0x94>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020be:	2301      	movs	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ce:	2301      	movs	r3, #1
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <HAL_TIM_Base_MspInit+0x98>)
 80020da:	f000 f983 	bl	80023e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	201c      	movs	r0, #28
 80020e4:	f000 f954 	bl	8002390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e8:	201c      	movs	r0, #28
 80020ea:	f000 f96d 	bl	80023c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <Reset_Handler>:
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x12>
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <LoopFillZerobss+0x16>)
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <LoopFillZerobss+0x1a>)
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <LoopFillZerobss+0x1e>)
 800210a:	2300      	movs	r3, #0
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:
 800210e:	58d4      	ldr	r4, [r2, r3]
 8002110:	50c4      	str	r4, [r0, r3]
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:
 8002114:	18c4      	adds	r4, r0, r3
 8002116:	428c      	cmp	r4, r1
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x22>)
 800211c:	4c0b      	ldr	r4, [pc, #44]	; (800214c <LoopFillZerobss+0x26>)
 800211e:	2300      	movs	r3, #0
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:
 8002126:	42a2      	cmp	r2, r4
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>
 800212a:	f7ff ff19 	bl	8001f60 <SystemInit>
 800212e:	f004 fb3d 	bl	80067ac <__libc_init_array>
 8002132:	f7ff fcff 	bl	8001b34 <main>
 8002136:	4770      	bx	lr
 8002138:	20010000 	.word	0x20010000
 800213c:	20000000 	.word	0x20000000
 8002140:	200001f4 	.word	0x200001f4
 8002144:	08009954 	.word	0x08009954
 8002148:	200001f4 	.word	0x200001f4
 800214c:	2000438c 	.word	0x2000438c

08002150 <ADC_IRQHandler>:
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f8fc 	bl	800237a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	200f      	movs	r0, #15
 8002184:	f7ff fdda 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fdac 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000018 	.word	0x20000018
 80021bc:	20000624 	.word	0x20000624

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000624 	.word	0x20000624

080021d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000018 	.word	0x20000018

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff4c 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a2:	f7ff ff61 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	f7ff ffb1 	bl	8002314 <NVIC_EncodePriority>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff80 	bl	80022c0 <__NVIC_SetPriority>
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff54 	bl	8002284 <__NVIC_EnableIRQ>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e159      	b.n	80026b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8148 	bne.w	80026ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a2 	beq.w	80026ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a56      	ldr	r2, [pc, #344]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_GPIO_Init+0x2f0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x202>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <HAL_GPIO_Init+0x2f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x1fe>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_GPIO_Init+0x2f8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x1fa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_GPIO_Init+0x2fc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x1f6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a45      	ldr	r2, [pc, #276]	; (80026e4 <HAL_GPIO_Init+0x300>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x1f2>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025d6:	2307      	movs	r3, #7
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f8:	4935      	ldr	r1, [pc, #212]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <HAL_GPIO_Init+0x304>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002654:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_GPIO_Init+0x304>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_GPIO_Init+0x304>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f aea2 	bls.w	8002400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e12b      	b.n	8002956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fcb4 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002750:	f001 fd3c 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a81      	ldr	r2, [pc, #516]	; (8002960 <HAL_I2C_Init+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d807      	bhi.n	8002770 <HAL_I2C_Init+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_I2C_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e006      	b.n	800277e <HAL_I2C_Init+0x92>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7d      	ldr	r2, [pc, #500]	; (8002968 <HAL_I2C_Init+0x27c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0e7      	b.n	8002956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a78      	ldr	r2, [pc, #480]	; (800296c <HAL_I2C_Init+0x280>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_I2C_Init+0x274>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d802      	bhi.n	80027c0 <HAL_I2C_Init+0xd4>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_I2C_Init+0xe8>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a69      	ldr	r2, [pc, #420]	; (8002970 <HAL_I2C_Init+0x284>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	495c      	ldr	r1, [pc, #368]	; (8002960 <HAL_I2C_Init+0x274>)
 80027f0:	428b      	cmp	r3, r1
 80027f2:	d819      	bhi.n	8002828 <HAL_I2C_Init+0x13c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_Init+0x138>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	e051      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002824:	2304      	movs	r3, #4
 8002826:	e04f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <HAL_I2C_Init+0x168>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_I2C_Init+0x18e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x196>
 800287e:	2301      	movs	r3, #1
 8002880:	e022      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <HAL_I2C_Init+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e58      	subs	r0, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6911      	ldr	r1, [r2, #16]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	000186a0 	.word	0x000186a0
 8002964:	001e847f 	.word	0x001e847f
 8002968:	003d08ff 	.word	0x003d08ff
 800296c:	431bde83 	.word	0x431bde83
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	461a      	mov	r2, r3
 8002980:	460b      	mov	r3, r1
 8002982:	817b      	strh	r3, [r7, #10]
 8002984:	4613      	mov	r3, r2
 8002986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff fc1a 	bl	80021c0 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	f040 80e0 	bne.w	8002b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2319      	movs	r3, #25
 80029a2:	2201      	movs	r2, #1
 80029a4:	4970      	ldr	r1, [pc, #448]	; (8002b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fe02 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	e0d3      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0x50>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0cc      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x1ea>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d007      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2221      	movs	r2, #33	; 0x21
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2210      	movs	r2, #16
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	893a      	ldrh	r2, [r7, #8]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a50      	ldr	r2, [pc, #320]	; (8002b6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fbbc 	bl	80031b0 <I2C_MasterRequestWrite>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e08d      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a58:	e066      	b.n	8002b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fe7c 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d107      	bne.n	8002a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06b      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d11b      	bne.n	8002afc <HAL_I2C_Master_Transmit+0x188>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d017      	beq.n	8002afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6a39      	ldr	r1, [r7, #32]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fe6c 	bl	80037de <I2C_WaitOnBTFFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d107      	bne.n	8002b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e01a      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d194      	bne.n	8002a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	00100002 	.word	0x00100002
 8002b6c:	ffff0000 	.word	0xffff0000

08002b70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8a:	f7ff fb19 	bl	80021c0 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 80d9 	bne.w	8002d50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	496d      	ldr	r1, [pc, #436]	; (8002d5c <HAL_I2C_Mem_Write+0x1ec>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fd01 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0cc      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Mem_Write+0x56>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0c5      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d007      	beq.n	8002bec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a4d      	ldr	r2, [pc, #308]	; (8002d60 <HAL_I2C_Mem_Write+0x1f0>)
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2e:	88f8      	ldrh	r0, [r7, #6]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fb38 	bl	80032b4 <I2C_RequestMemoryWrite>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d052      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e081      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fd82 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1aa      	bne.n	8002c4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fd6e 	bl	80037de <I2C_WaitOnBTFFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e016      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d7e:	f7ff fa1f 	bl	80021c0 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	f040 8208 	bne.w	80031a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2319      	movs	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	497b      	ldr	r1, [pc, #492]	; (8002f88 <HAL_I2C_Mem_Read+0x224>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fc07 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	e1fb      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Mem_Read+0x56>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e1f4      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d007      	beq.n	8002de0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2222      	movs	r2, #34	; 0x22
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a5b      	ldr	r2, [pc, #364]	; (8002f8c <HAL_I2C_Mem_Read+0x228>)
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e22:	88f8      	ldrh	r0, [r7, #6]
 8002e24:	893a      	ldrh	r2, [r7, #8]
 8002e26:	8979      	ldrh	r1, [r7, #10]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4603      	mov	r3, r0
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fad4 	bl	80033e0 <I2C_RequestMemoryRead>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1b0      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	623b      	str	r3, [r7, #32]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e184      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d11b      	bne.n	8002eb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e164      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	e144      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f08:	e138      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	f200 80f1 	bhi.w	80030f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d123      	bne.n	8002f64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fc9d 	bl	8003860 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e139      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f62:	e10b      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d14e      	bne.n	800300a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2200      	movs	r2, #0
 8002f74:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_I2C_Mem_Read+0x22c>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fb1a 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e10e      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
 8002f86:	bf00      	nop
 8002f88:	00100002 	.word	0x00100002
 8002f8c:	ffff0000 	.word	0xffff0000
 8002f90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003008:	e0b8      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	2200      	movs	r2, #0
 8003012:	4966      	ldr	r1, [pc, #408]	; (80031ac <HAL_I2C_Mem_Read+0x448>)
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 facb 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0bf      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	2200      	movs	r2, #0
 800306e:	494f      	ldr	r1, [pc, #316]	; (80031ac <HAL_I2C_Mem_Read+0x448>)
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fa9d 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e091      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f4:	e042      	b.n	800317c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fbb0 	bl	8003860 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e04c      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d118      	bne.n	800317c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f aec2 	bne.w	8002f0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	00010004 	.word	0x00010004

080031b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	460b      	mov	r3, r1
 80031be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d006      	beq.n	80031da <I2C_MasterRequestWrite+0x2a>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d003      	beq.n	80031da <I2C_MasterRequestWrite+0x2a>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d8:	d108      	bne.n	80031ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e00b      	b.n	8003204 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	2b12      	cmp	r3, #18
 80031f2:	d107      	bne.n	8003204 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f9cd 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322a:	d103      	bne.n	8003234 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e035      	b.n	80032a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003240:	d108      	bne.n	8003254 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003250:	611a      	str	r2, [r3, #16]
 8003252:	e01b      	b.n	800328c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	11db      	asrs	r3, r3, #7
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 0306 	and.w	r3, r3, #6
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f063 030f 	orn	r3, r3, #15
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <I2C_MasterRequestWrite+0xfc>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f9f3 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e010      	b.n	80032a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4907      	ldr	r1, [pc, #28]	; (80032b0 <I2C_MasterRequestWrite+0x100>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f9e3 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	00010008 	.word	0x00010008
 80032b0:	00010002 	.word	0x00010002

080032b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f960 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003304:	d103      	bne.n	800330e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e05f      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	492d      	ldr	r1, [pc, #180]	; (80033dc <I2C_RequestMemoryWrite+0x128>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f998 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e04c      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	6a39      	ldr	r1, [r7, #32]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fa02 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b04      	cmp	r3, #4
 8003364:	d107      	bne.n	8003376 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e02b      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003380:	893b      	ldrh	r3, [r7, #8]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e021      	b.n	80033d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b29b      	uxth	r3, r3
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	6a39      	ldr	r1, [r7, #32]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f9dc 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d107      	bne.n	80033c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e005      	b.n	80033d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033c6:	893b      	ldrh	r3, [r7, #8]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	00010002 	.word	0x00010002

080033e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003408:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2200      	movs	r2, #0
 8003422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f8c2 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003440:	d103      	bne.n	800344a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0aa      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800345c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	4952      	ldr	r1, [pc, #328]	; (80035ac <I2C_RequestMemoryRead+0x1cc>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f8fa 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e097      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f964 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d107      	bne.n	80034b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e076      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e021      	b.n	800350c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f93e 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d107      	bne.n	80034fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e050      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	6a39      	ldr	r1, [r7, #32]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f923 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e035      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003546:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	2200      	movs	r2, #0
 8003550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f82b 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356e:	d103      	bne.n	8003578 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e013      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	4906      	ldr	r1, [pc, #24]	; (80035ac <I2C_RequestMemoryRead+0x1cc>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f863 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	00010002 	.word	0x00010002

080035b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c0:	e025      	b.n	800360e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d021      	beq.n	800360e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe fdf9 	bl	80021c0 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e023      	b.n	8003656 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10d      	bne.n	8003634 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	e00c      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d0b6      	beq.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366c:	e051      	b.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d123      	bne.n	80036c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003696:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e046      	b.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d021      	beq.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ce:	f7fe fd77 	bl	80021c0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d302      	bcc.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e020      	b.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10c      	bne.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	e00b      	b.n	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d18d      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003768:	e02d      	b.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f8ce 	bl	800390c <I2C_IsAcknowledgeFailed>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e02d      	b.n	80037d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d021      	beq.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fe fd1d 	bl	80021c0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e007      	b.n	80037d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d1ca      	bne.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ea:	e02d      	b.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f88d 	bl	800390c <I2C_IsAcknowledgeFailed>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e02d      	b.n	8003858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d021      	beq.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fe fcdc 	bl	80021c0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e007      	b.n	8003858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d1ca      	bne.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800386c:	e042      	b.n	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b10      	cmp	r3, #16
 800387a:	d119      	bne.n	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0210 	mvn.w	r2, #16
 8003884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e029      	b.n	8003904 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b0:	f7fe fc86 	bl	80021c0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e007      	b.n	8003904 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d1b5      	bne.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d11b      	bne.n	800395c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800392c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f043 0204 	orr.w	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e267      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d157      	bne.n	8003a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e242      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x74>
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a75      	ldr	r2, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x98>
 80039ea:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6c      	ldr	r2, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 8003a04:	4b69      	ldr	r3, [pc, #420]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe fbcc 	bl	80021c0 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fbc8 	bl	80021c0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e207      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xc0>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fbb8 	bl	80021c0 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fbb4 	bl	80021c0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1f3      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0xe8>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b44      	ldr	r3, [pc, #272]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1c7      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4937      	ldr	r1, [pc, #220]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	e03a      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fb6d 	bl	80021c0 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fe fb69 	bl	80021c0 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e1a8      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4925      	ldr	r1, [pc, #148]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fb4c 	bl	80021c0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fb48 	bl	80021c0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e187      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d036      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe fb2c 	bl	80021c0 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fe fb28 	bl	80021c0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e167      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x200>
 8003b8a:	e01b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fe fb15 	bl	80021c0 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9a:	f7fe fb11 	bl	80021c0 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d907      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e150      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ea      	bne.n	8003b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a7c      	ldr	r2, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b74      	ldr	r3, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fad1 	bl	80021c0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe facd 	bl	80021c0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e10c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2ea>
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x30c>
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a5e      	ldr	r2, [pc, #376]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c78:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a57      	ldr	r2, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fe fa92 	bl	80021c0 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fa8e 	bl	80021c0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0cb      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ee      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x334>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fa7c 	bl	80021c0 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fe fa78 	bl	80021c0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0b5      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a1 	beq.w	8003e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d05c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d141      	bne.n	8003da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fa4c 	bl	80021c0 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fa48 	bl	80021c0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e087      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	491b      	ldr	r1, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe fa21 	bl	80021c0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fe fa1d 	bl	80021c0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e05c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x416>
 8003da0:	e054      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe fa0a 	bl	80021c0 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe fa06 	bl	80021c0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e045      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x444>
 8003dce:	e03d      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e038      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x4ec>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d028      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d121      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0cc      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e70:	4b68      	ldr	r3, [pc, #416]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90c      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b8      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec8:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	494d      	ldr	r1, [pc, #308]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d119      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e067      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4934      	ldr	r1, [pc, #208]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fe f938 	bl	80021c0 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fe f934 	bl	80021c0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e04f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d20c      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e032      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4916      	ldr	r1, [pc, #88]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490e      	ldr	r1, [pc, #56]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fe2:	f000 f821 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490a      	ldr	r1, [pc, #40]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd fe9a 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00
 8004018:	40023800 	.word	0x40023800
 800401c:	08009554 	.word	0x08009554
 8004020:	20000010 	.word	0x20000010
 8004024:	20000014 	.word	0x20000014

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b090      	sub	sp, #64	; 0x40
 800402e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
 8004034:	2300      	movs	r3, #0
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004038:	2300      	movs	r3, #0
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d00d      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x40>
 800404c:	2b08      	cmp	r3, #8
 800404e:	f200 80a1 	bhi.w	8004194 <HAL_RCC_GetSysClockFreq+0x16c>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004056:	2b04      	cmp	r3, #4
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x3a>
 800405a:	e09b      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_GetSysClockFreq+0x184>)
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004060:	e09b      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004062:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004064:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004066:	e098      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b4f      	ldr	r3, [pc, #316]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d028      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	627a      	str	r2, [r7, #36]	; 0x24
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004090:	2100      	movs	r1, #0
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004094:	fb03 f201 	mul.w	r2, r3, r1
 8004098:	2300      	movs	r3, #0
 800409a:	fb00 f303 	mul.w	r3, r0, r3
 800409e:	4413      	add	r3, r2
 80040a0:	4a43      	ldr	r2, [pc, #268]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040a2:	fba0 1202 	umull	r1, r2, r0, r2
 80040a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a8:	460a      	mov	r2, r1
 80040aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	4413      	add	r3, r2
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	2200      	movs	r2, #0
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040c2:	f7fc fdc9 	bl	8000c58 <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4613      	mov	r3, r2
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ce:	e053      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	2200      	movs	r2, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	617a      	str	r2, [r7, #20]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040e2:	f04f 0b00 	mov.w	fp, #0
 80040e6:	4652      	mov	r2, sl
 80040e8:	465b      	mov	r3, fp
 80040ea:	f04f 0000 	mov.w	r0, #0
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f8:	0150      	lsls	r0, r2, #5
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004102:	eb63 090b 	sbc.w	r9, r3, fp
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004112:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004116:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800411a:	ebb2 0408 	subs.w	r4, r2, r8
 800411e:	eb63 0509 	sbc.w	r5, r3, r9
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	00eb      	lsls	r3, r5, #3
 800412c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004130:	00e2      	lsls	r2, r4, #3
 8004132:	4614      	mov	r4, r2
 8004134:	461d      	mov	r5, r3
 8004136:	eb14 030a 	adds.w	r3, r4, sl
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	eb45 030b 	adc.w	r3, r5, fp
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414e:	4629      	mov	r1, r5
 8004150:	028b      	lsls	r3, r1, #10
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004158:	4621      	mov	r1, r4
 800415a:	028a      	lsls	r2, r1, #10
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	2200      	movs	r2, #0
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	60fa      	str	r2, [r7, #12]
 8004168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800416c:	f7fc fd74 	bl	8000c58 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004192:	e002      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800419c:	4618      	mov	r0, r3
 800419e:	3740      	adds	r7, #64	; 0x40
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	017d7840 	.word	0x017d7840

080041b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000010 	.word	0x20000010

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041d0:	f7ff fff0 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0a9b      	lsrs	r3, r3, #10
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40023800 	.word	0x40023800
 80041f0:	08009564 	.word	0x08009564

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff ffdc 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0b5b      	lsrs	r3, r3, #13
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	; (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	08009564 	.word	0x08009564

0800421c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	220f      	movs	r2, #15
 800422a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RCC_GetClockConfig+0x60>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0207 	and.w	r2, r3, #7
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	40023c00 	.word	0x40023c00

08004280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd fedc 	bl	8002064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fcc0 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d001      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e044      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x6c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d013      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x6c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x6c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x6c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a17      	ldr	r2, [pc, #92]	; (80043dc <HAL_TIM_Base_Start_IT+0xbc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x6c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d111      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d010      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e007      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40014000 	.word	0x40014000

080043e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e041      	b.n	800447a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f839 	bl	8004482 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fc0e 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_IC_Start_IT+0x1a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e013      	b.n	80044da <HAL_TIM_IC_Start_IT+0x42>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_IC_Start_IT+0x2a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e00b      	b.n	80044da <HAL_TIM_IC_Start_IT+0x42>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_IC_Start_IT+0x3a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e003      	b.n	80044da <HAL_TIM_IC_Start_IT+0x42>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_TIM_IC_Start_IT+0x54>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e013      	b.n	8004514 <HAL_TIM_IC_Start_IT+0x7c>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d104      	bne.n	80044fc <HAL_TIM_IC_Start_IT+0x64>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e00b      	b.n	8004514 <HAL_TIM_IC_Start_IT+0x7c>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d104      	bne.n	800450c <HAL_TIM_IC_Start_IT+0x74>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e003      	b.n	8004514 <HAL_TIM_IC_Start_IT+0x7c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004512:	b2db      	uxtb	r3, r3
 8004514:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d102      	bne.n	8004522 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800451c:	7bbb      	ldrb	r3, [r7, #14]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d001      	beq.n	8004526 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0bd      	b.n	80046a2 <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0x9e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004534:	e013      	b.n	800455e <HAL_TIM_IC_Start_IT+0xc6>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0xae>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004544:	e00b      	b.n	800455e <HAL_TIM_IC_Start_IT+0xc6>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d104      	bne.n	8004556 <HAL_TIM_IC_Start_IT+0xbe>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004554:	e003      	b.n	800455e <HAL_TIM_IC_Start_IT+0xc6>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_IC_Start_IT+0xd6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800456c:	e013      	b.n	8004596 <HAL_TIM_IC_Start_IT+0xfe>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d104      	bne.n	800457e <HAL_TIM_IC_Start_IT+0xe6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457c:	e00b      	b.n	8004596 <HAL_TIM_IC_Start_IT+0xfe>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d104      	bne.n	800458e <HAL_TIM_IC_Start_IT+0xf6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458c:	e003      	b.n	8004596 <HAL_TIM_IC_Start_IT+0xfe>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d841      	bhi.n	8004620 <HAL_TIM_IC_Start_IT+0x188>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_TIM_IC_Start_IT+0x10c>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	08004621 	.word	0x08004621
 80045ac:	08004621 	.word	0x08004621
 80045b0:	08004621 	.word	0x08004621
 80045b4:	080045eb 	.word	0x080045eb
 80045b8:	08004621 	.word	0x08004621
 80045bc:	08004621 	.word	0x08004621
 80045c0:	08004621 	.word	0x08004621
 80045c4:	080045fd 	.word	0x080045fd
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004621 	.word	0x08004621
 80045d0:	08004621 	.word	0x08004621
 80045d4:	0800460f 	.word	0x0800460f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0202 	orr.w	r2, r2, #2
 80045e6:	60da      	str	r2, [r3, #12]
      break;
 80045e8:	e01b      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0204 	orr.w	r2, r2, #4
 80045f8:	60da      	str	r2, [r3, #12]
      break;
 80045fa:	e012      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0208 	orr.w	r2, r2, #8
 800460a:	60da      	str	r2, [r3, #12]
      break;
 800460c:	e009      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0210 	orr.w	r2, r2, #16
 800461c:	60da      	str	r2, [r3, #12]
      break;
 800461e:	e000      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004620:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2201      	movs	r2, #1
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd42 	bl	80050b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_TIM_IC_Start_IT+0x214>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x1d4>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d013      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x1d4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_TIM_IC_Start_IT+0x218>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x1d4>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIM_IC_Start_IT+0x21c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x1d4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <HAL_TIM_IC_Start_IT+0x220>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x1d4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <HAL_TIM_IC_Start_IT+0x224>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40014000 	.word	0x40014000

080046c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d122      	bne.n	800471c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d11b      	bne.n	800471c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0202 	mvn.w	r2, #2
 80046ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc ff5c 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa7c 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fa83 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d122      	bne.n	8004770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d11b      	bne.n	8004770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0204 	mvn.w	r2, #4
 8004740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc ff32 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fa52 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fa59 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b08      	cmp	r3, #8
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b08      	cmp	r3, #8
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0208 	mvn.w	r2, #8
 8004794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2204      	movs	r2, #4
 800479a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc ff08 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa28 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fa2f 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0210 	mvn.w	r2, #16
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2208      	movs	r2, #8
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fede 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9fe 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa05 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10e      	bne.n	8004844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0201 	mvn.w	r2, #1
 800483c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd fa38 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b80      	cmp	r3, #128	; 0x80
 8004850:	d10e      	bne.n	8004870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	2b80      	cmp	r3, #128	; 0x80
 800485e:	d107      	bne.n	8004870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fcc0 	bl	80051f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9ca 	bl	8004c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0220 	mvn.w	r2, #32
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fc8a 	bl	80051dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_IC_ConfigChannel+0x1a>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e082      	b.n	80049f0 <HAL_TIM_IC_ConfigChannel+0x120>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f000 fa1c 	bl	8004d44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 020c 	bic.w	r2, r2, #12
 800491a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	619a      	str	r2, [r3, #24]
 800492e:	e05a      	b.n	80049e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d11c      	bne.n	8004970 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f000 fa94 	bl	8004e72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004958:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6999      	ldr	r1, [r3, #24]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	021a      	lsls	r2, r3, #8
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	619a      	str	r2, [r3, #24]
 800496e:	e03a      	b.n	80049e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b08      	cmp	r3, #8
 8004974:	d11b      	bne.n	80049ae <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f000 fae1 	bl	8004f4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 020c 	bic.w	r2, r2, #12
 8004998:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69d9      	ldr	r1, [r3, #28]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	61da      	str	r2, [r3, #28]
 80049ac:	e01b      	b.n	80049e6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f000 fb01 	bl	8004fc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	021a      	lsls	r2, r3, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIM_ConfigClockSource+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e0b3      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x180>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d03e      	beq.n	8004ac8 <HAL_TIM_ConfigClockSource+0xd0>
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	f200 8087 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	f000 8085 	beq.w	8004b64 <HAL_TIM_ConfigClockSource+0x16c>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	d87f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a60:	2b70      	cmp	r3, #112	; 0x70
 8004a62:	d01a      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0xa2>
 8004a64:	2b70      	cmp	r3, #112	; 0x70
 8004a66:	d87b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a68:	2b60      	cmp	r3, #96	; 0x60
 8004a6a:	d050      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x116>
 8004a6c:	2b60      	cmp	r3, #96	; 0x60
 8004a6e:	d877      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a70:	2b50      	cmp	r3, #80	; 0x50
 8004a72:	d03c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0xf6>
 8004a74:	2b50      	cmp	r3, #80	; 0x50
 8004a76:	d873      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d058      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x136>
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d86f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d064      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d86b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d060      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d867      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05c      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d05a      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a98:	e062      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6899      	ldr	r1, [r3, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f000 fae3 	bl	8005074 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004abc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	609a      	str	r2, [r3, #8]
      break;
 8004ac6:	e04e      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f000 facc 	bl	8005074 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aea:	609a      	str	r2, [r3, #8]
      break;
 8004aec:	e03b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 f98a 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2150      	movs	r1, #80	; 0x50
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa99 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e02b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 f9e6 	bl	8004eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2160      	movs	r1, #96	; 0x60
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fa89 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e01b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 f96a 	bl	8004e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa79 	bl	800503e <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e00b      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 fa70 	bl	800503e <TIM_ITRx_SetConfig>
        break;
 8004b5e:	e002      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d831      	bhi.n	8004bf8 <HAL_TIM_ReadCapturedValue+0x78>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004bf9 	.word	0x08004bf9
 8004bcc:	08004bef 	.word	0x08004bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	60fb      	str	r3, [r7, #12]

      break;
 8004bd8:	e00f      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	60fb      	str	r3, [r7, #12]

      break;
 8004be2:	e00a      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	60fb      	str	r3, [r7, #12]

      break;
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	60fb      	str	r3, [r7, #12]

      break;
 8004bf6:	e000      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004bf8:	bf00      	nop
  }

  return tmpreg;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a34      	ldr	r2, [pc, #208]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d00b      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a31      	ldr	r2, [pc, #196]	; (8004d2c <TIM_Base_SetConfig+0xe8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a30      	ldr	r2, [pc, #192]	; (8004d30 <TIM_Base_SetConfig+0xec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0xf0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <TIM_Base_SetConfig+0xe8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <TIM_Base_SetConfig+0xec>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <TIM_Base_SetConfig+0xf0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <TIM_Base_SetConfig+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <TIM_Base_SetConfig+0xf8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_Base_SetConfig+0xfc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <TIM_TI1_SetConfig+0xbc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <TIM_TI1_SetConfig+0x56>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d00f      	beq.n	8004d9a <TIM_TI1_SetConfig+0x56>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <TIM_TI1_SetConfig+0xc0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_TI1_SetConfig+0x56>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <TIM_TI1_SetConfig+0xc4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_TI1_SetConfig+0x56>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <TIM_TI1_SetConfig+0xc8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_TI1_SetConfig+0x56>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <TIM_TI1_SetConfig+0xcc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <TIM_TI1_SetConfig+0x5a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <TIM_TI1_SetConfig+0x5c>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e003      	b.n	8004dbe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f023 030a 	bic.w	r3, r3, #10
 8004dd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 030a 	and.w	r3, r3, #10
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000

08004e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0210 	bic.w	r2, r3, #16
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	031b      	lsls	r3, r3, #12
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f023 0210 	bic.w	r2, r3, #16
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	031b      	lsls	r3, r3, #12
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0303 	bic.w	r3, r3, #3
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005002:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	031b      	lsls	r3, r3, #12
 8005008:	b29b      	uxth	r3, r3
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005016:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	f043 0307 	orr.w	r3, r3, #7
 8005060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	431a      	orrs	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	609a      	str	r2, [r3, #8]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2201      	movs	r2, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	401a      	ands	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	431a      	orrs	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e050      	b.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d013      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10c      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000

080051dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f103 0208 	add.w	r2, r3, #8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f103 0208 	add.w	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 0208 	add.w	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6892      	ldr	r2, [r2, #8]
 8005274:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6852      	ldr	r2, [r2, #4]
 800527e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d103      	bne.n	8005292 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08e      	sub	sp, #56	; 0x38
 80052b6:	af04      	add	r7, sp, #16
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <xTaskCreateStatic+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <xTaskCreateStatic+0x46>
        __asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	61fb      	str	r3, [r7, #28]
    }
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80052f8:	23b4      	movs	r3, #180	; 0xb4
 80052fa:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2bb4      	cmp	r3, #180	; 0xb4
 8005300:	d00a      	beq.n	8005318 <xTaskCreateStatic+0x66>
        __asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	61bb      	str	r3, [r7, #24]
    }
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005318:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d023      	beq.n	8005368 <xTaskCreateStatic+0xb6>
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	2b00      	cmp	r3, #0
 8005324:	d020      	beq.n	8005368 <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800532a:	22b4      	movs	r2, #180	; 0xb4
 800532c:	2100      	movs	r1, #0
 800532e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005330:	f001 fa71 	bl	8006816 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005338:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2202      	movs	r2, #2
 800533e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005342:	2300      	movs	r3, #0
 8005344:	9303      	str	r3, [sp, #12]
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	9302      	str	r3, [sp, #8]
 800534a:	f107 0314 	add.w	r3, r7, #20
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f856 	bl	800540c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005362:	f000 f8ef 	bl	8005544 <prvAddNewTaskToReadyList>
 8005366:	e001      	b.n	800536c <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800536c:	697b      	ldr	r3, [r7, #20]
    }
 800536e:	4618      	mov	r0, r3
 8005370:	3728      	adds	r7, #40	; 0x28
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005376:	b580      	push	{r7, lr}
 8005378:	b08c      	sub	sp, #48	; 0x30
 800537a:	af04      	add	r7, sp, #16
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f000 ff46 	bl	800621c <pvPortMalloc>
 8005390:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005398:	20b4      	movs	r0, #180	; 0xb4
 800539a:	f000 ff3f 	bl	800621c <pvPortMalloc>
 800539e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80053a6:	22b4      	movs	r2, #180	; 0xb4
 80053a8:	2100      	movs	r1, #0
 80053aa:	69f8      	ldr	r0, [r7, #28]
 80053ac:	f001 fa33 	bl	8006816 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
 80053b6:	e005      	b.n	80053c4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80053b8:	6978      	ldr	r0, [r7, #20]
 80053ba:	f000 ffe9 	bl	8006390 <vPortFree>
 80053be:	e001      	b.n	80053c4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d017      	beq.n	80053fa <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	2300      	movs	r3, #0
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f80f 	bl	800540c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80053ee:	69f8      	ldr	r0, [r7, #28]
 80053f0:	f000 f8a8 	bl	8005544 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e002      	b.n	8005400 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005400:	69bb      	ldr	r3, [r7, #24]
    }
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005424:	3b01      	subs	r3, #1
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <prvInitialiseNewTask+0x48>
        __asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
    }
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01e      	beq.n	8005498 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	e012      	b.n	8005486 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	7819      	ldrb	r1, [r3, #0]
 8005468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	3334      	adds	r3, #52	; 0x34
 8005470:	460a      	mov	r2, r1
 8005472:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d006      	beq.n	800548e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	3301      	adds	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b0f      	cmp	r3, #15
 800548a:	d9e9      	bls.n	8005460 <prvInitialiseNewTask+0x54>
 800548c:	e000      	b.n	8005490 <prvInitialiseNewTask+0x84>
            {
                break;
 800548e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	2b06      	cmp	r3, #6
 800549c:	d90a      	bls.n	80054b4 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	613b      	str	r3, [r7, #16]
    }
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d901      	bls.n	80054be <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054ba:	2306      	movs	r3, #6
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff feb8 	bl	8005244 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	3318      	adds	r3, #24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff feb3 	bl	8005244 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f1c3 0207 	rsb	r2, r3, #7
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	334c      	adds	r3, #76	; 0x4c
 80054f8:	2260      	movs	r2, #96	; 0x60
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 f98a 	bl	8006816 <memset>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <prvInitialiseNewTask+0x12c>)
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	4a0c      	ldr	r2, [pc, #48]	; (800553c <prvInitialiseNewTask+0x130>)
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	4a0b      	ldr	r2, [pc, #44]	; (8005540 <prvInitialiseNewTask+0x134>)
 8005512:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	69b8      	ldr	r0, [r7, #24]
 800551a:	f000 fc6f 	bl	8005dfc <pxPortInitialiseStack>
 800551e:	4602      	mov	r2, r0
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005530:	bf00      	nop
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	0800958c 	.word	0x0800958c
 800553c:	080095ac 	.word	0x080095ac
 8005540:	0800956c 	.word	0x0800956c

08005544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800554c:	f000 fd84 	bl	8006058 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005550:	4b3e      	ldr	r3, [pc, #248]	; (800564c <prvAddNewTaskToReadyList+0x108>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a3d      	ldr	r2, [pc, #244]	; (800564c <prvAddNewTaskToReadyList+0x108>)
 8005558:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005562:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005568:	4b38      	ldr	r3, [pc, #224]	; (800564c <prvAddNewTaskToReadyList+0x108>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d110      	bne.n	8005592 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005570:	f000 fb82 	bl	8005c78 <prvInitialiseTaskLists>
 8005574:	e00d      	b.n	8005592 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005576:	4b37      	ldr	r3, [pc, #220]	; (8005654 <prvAddNewTaskToReadyList+0x110>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800557e:	4b34      	ldr	r3, [pc, #208]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d802      	bhi.n	8005592 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005592:	4b31      	ldr	r3, [pc, #196]	; (8005658 <prvAddNewTaskToReadyList+0x114>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <prvAddNewTaskToReadyList+0x114>)
 800559a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	2201      	movs	r2, #1
 80055a2:	409a      	lsls	r2, r3
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <prvAddNewTaskToReadyList+0x118>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	4a2c      	ldr	r2, [pc, #176]	; (800565c <prvAddNewTaskToReadyList+0x118>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	492b      	ldr	r1, [pc, #172]	; (8005660 <prvAddNewTaskToReadyList+0x11c>)
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3304      	adds	r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	3204      	adds	r2, #4
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	609a      	str	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <prvAddNewTaskToReadyList+0x11c>)
 80055f2:	441a      	add	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	615a      	str	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4918      	ldr	r1, [pc, #96]	; (8005660 <prvAddNewTaskToReadyList+0x11c>)
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	4814      	ldr	r0, [pc, #80]	; (8005660 <prvAddNewTaskToReadyList+0x11c>)
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4403      	add	r3, r0
 8005618:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800561a:	f000 fd4d 	bl	80060b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <prvAddNewTaskToReadyList+0x110>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00e      	beq.n	8005644 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d207      	bcs.n	8005644 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <prvAddNewTaskToReadyList+0x120>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000728 	.word	0x20000728
 8005650:	20000628 	.word	0x20000628
 8005654:	20000734 	.word	0x20000734
 8005658:	20000744 	.word	0x20000744
 800565c:	20000730 	.word	0x20000730
 8005660:	2000062c 	.word	0x2000062c
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005676:	463a      	mov	r2, r7
 8005678:	1d39      	adds	r1, r7, #4
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f7fb ff84 	bl	800158c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	9202      	str	r2, [sp, #8]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2300      	movs	r3, #0
 8005694:	460a      	mov	r2, r1
 8005696:	4922      	ldr	r1, [pc, #136]	; (8005720 <vTaskStartScheduler+0xb8>)
 8005698:	4822      	ldr	r0, [pc, #136]	; (8005724 <vTaskStartScheduler+0xbc>)
 800569a:	f7ff fe0a 	bl	80052b2 <xTaskCreateStatic>
 800569e:	4603      	mov	r3, r0
 80056a0:	4a21      	ldr	r2, [pc, #132]	; (8005728 <vTaskStartScheduler+0xc0>)
 80056a2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <vTaskStartScheduler+0xc0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e001      	b.n	80056b6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d11b      	bne.n	80056f4 <vTaskStartScheduler+0x8c>
        __asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
    }
 80056ce:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <vTaskStartScheduler+0xc4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	334c      	adds	r3, #76	; 0x4c
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <vTaskStartScheduler+0xc8>)
 80056d8:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80056da:	4b16      	ldr	r3, [pc, #88]	; (8005734 <vTaskStartScheduler+0xcc>)
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295
 80056e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <vTaskStartScheduler+0xd0>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056e8:	4b14      	ldr	r3, [pc, #80]	; (800573c <vTaskStartScheduler+0xd4>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80056ee:	f000 fc11 	bl	8005f14 <xPortStartScheduler>
 80056f2:	e00e      	b.n	8005712 <vTaskStartScheduler+0xaa>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d10a      	bne.n	8005712 <vTaskStartScheduler+0xaa>
        __asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
    }
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <vTaskStartScheduler+0xa8>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <vTaskStartScheduler+0xd8>)
 8005714:	681b      	ldr	r3, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	0800954c 	.word	0x0800954c
 8005724:	08005c49 	.word	0x08005c49
 8005728:	2000074c 	.word	0x2000074c
 800572c:	20000628 	.word	0x20000628
 8005730:	20000024 	.word	0x20000024
 8005734:	20000748 	.word	0x20000748
 8005738:	20000734 	.word	0x20000734
 800573c:	2000072c 	.word	0x2000072c
 8005740:	2000001c 	.word	0x2000001c

08005744 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <vTaskSuspendAll+0x18>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	4a03      	ldr	r2, [pc, #12]	; (800575c <vTaskSuspendAll+0x18>)
 8005750:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005752:	bf00      	nop
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000750 	.word	0x20000750

08005760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800576e:	4b71      	ldr	r3, [pc, #452]	; (8005934 <xTaskResumeAll+0x1d4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xTaskResumeAll+0x2c>
        __asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	607b      	str	r3, [r7, #4]
    }
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800578c:	f000 fc64 	bl	8006058 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005790:	4b68      	ldr	r3, [pc, #416]	; (8005934 <xTaskResumeAll+0x1d4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	4a67      	ldr	r2, [pc, #412]	; (8005934 <xTaskResumeAll+0x1d4>)
 8005798:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579a:	4b66      	ldr	r3, [pc, #408]	; (8005934 <xTaskResumeAll+0x1d4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 80c0 	bne.w	8005924 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057a4:	4b64      	ldr	r3, [pc, #400]	; (8005938 <xTaskResumeAll+0x1d8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80bb 	beq.w	8005924 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057ae:	e08a      	b.n	80058c6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b0:	4b62      	ldr	r3, [pc, #392]	; (800593c <xTaskResumeAll+0x1dc>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	6a12      	ldr	r2, [r2, #32]
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	69d2      	ldr	r2, [r2, #28]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	3318      	adds	r3, #24
 80057da:	429a      	cmp	r2, r3
 80057dc:	d103      	bne.n	80057e6 <xTaskResumeAll+0x86>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2200      	movs	r2, #0
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	68d2      	ldr	r2, [r2, #12]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3304      	adds	r3, #4
 8005818:	429a      	cmp	r2, r3
 800581a:	d103      	bne.n	8005824 <xTaskResumeAll+0xc4>
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2200      	movs	r2, #0
 8005828:	615a      	str	r2, [r3, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	1e5a      	subs	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	4b40      	ldr	r3, [pc, #256]	; (8005940 <xTaskResumeAll+0x1e0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4313      	orrs	r3, r2
 8005842:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <xTaskResumeAll+0x1e0>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	493e      	ldr	r1, [pc, #248]	; (8005944 <xTaskResumeAll+0x1e4>)
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	3304      	adds	r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	609a      	str	r2, [r3, #8]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	3204      	adds	r2, #4
 8005872:	605a      	str	r2, [r3, #4]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	1d1a      	adds	r2, r3, #4
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4a2e      	ldr	r2, [pc, #184]	; (8005944 <xTaskResumeAll+0x1e4>)
 800588a:	441a      	add	r2, r3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	615a      	str	r2, [r3, #20]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	492b      	ldr	r1, [pc, #172]	; (8005944 <xTaskResumeAll+0x1e4>)
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	4827      	ldr	r0, [pc, #156]	; (8005944 <xTaskResumeAll+0x1e4>)
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4403      	add	r3, r0
 80058b0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <xTaskResumeAll+0x1e8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d302      	bcc.n	80058c6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80058c0:	4b22      	ldr	r3, [pc, #136]	; (800594c <xTaskResumeAll+0x1ec>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <xTaskResumeAll+0x1dc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af70 	bne.w	80057b0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80058d6:	f000 fa75 	bl	8005dc4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058da:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <xTaskResumeAll+0x1f0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d010      	beq.n	8005908 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80058e6:	f000 f837 	bl	8005958 <xTaskIncrementTick>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80058f0:	4b16      	ldr	r3, [pc, #88]	; (800594c <xTaskResumeAll+0x1ec>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f1      	bne.n	80058e6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <xTaskResumeAll+0x1f0>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <xTaskResumeAll+0x1ec>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005914:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <xTaskResumeAll+0x1f4>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005924:	f000 fbc8 	bl	80060b8 <vPortExitCritical>

    return xAlreadyYielded;
 8005928:	69bb      	ldr	r3, [r7, #24]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000750 	.word	0x20000750
 8005938:	20000728 	.word	0x20000728
 800593c:	200006e8 	.word	0x200006e8
 8005940:	20000730 	.word	0x20000730
 8005944:	2000062c 	.word	0x2000062c
 8005948:	20000628 	.word	0x20000628
 800594c:	2000073c 	.word	0x2000073c
 8005950:	20000738 	.word	0x20000738
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	; 0x28
 800595c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005962:	4b7d      	ldr	r3, [pc, #500]	; (8005b58 <xTaskIncrementTick+0x200>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 80ec 	bne.w	8005b44 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800596c:	4b7b      	ldr	r3, [pc, #492]	; (8005b5c <xTaskIncrementTick+0x204>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005974:	4a79      	ldr	r2, [pc, #484]	; (8005b5c <xTaskIncrementTick+0x204>)
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d120      	bne.n	80059c2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005980:	4b77      	ldr	r3, [pc, #476]	; (8005b60 <xTaskIncrementTick+0x208>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <xTaskIncrementTick+0x48>
        __asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	607b      	str	r3, [r7, #4]
    }
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskIncrementTick+0x46>
 80059a0:	4b6f      	ldr	r3, [pc, #444]	; (8005b60 <xTaskIncrementTick+0x208>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	4b6f      	ldr	r3, [pc, #444]	; (8005b64 <xTaskIncrementTick+0x20c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6d      	ldr	r2, [pc, #436]	; (8005b60 <xTaskIncrementTick+0x208>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4a6d      	ldr	r2, [pc, #436]	; (8005b64 <xTaskIncrementTick+0x20c>)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b6c      	ldr	r3, [pc, #432]	; (8005b68 <xTaskIncrementTick+0x210>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	4a6b      	ldr	r2, [pc, #428]	; (8005b68 <xTaskIncrementTick+0x210>)
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	f000 fa01 	bl	8005dc4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059c2:	4b6a      	ldr	r3, [pc, #424]	; (8005b6c <xTaskIncrementTick+0x214>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f0c0 80a6 	bcc.w	8005b1a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ce:	4b64      	ldr	r3, [pc, #400]	; (8005b60 <xTaskIncrementTick+0x208>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d8:	4b64      	ldr	r3, [pc, #400]	; (8005b6c <xTaskIncrementTick+0x214>)
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	601a      	str	r2, [r3, #0]
                    break;
 80059e0:	e09b      	b.n	8005b1a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e2:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <xTaskIncrementTick+0x208>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80059f2:	6a3a      	ldr	r2, [r7, #32]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d203      	bcs.n	8005a02 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80059fa:	4a5c      	ldr	r2, [pc, #368]	; (8005b6c <xTaskIncrementTick+0x214>)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005a00:	e08b      	b.n	8005b1a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	68d2      	ldr	r2, [r2, #12]
 8005a10:	609a      	str	r2, [r3, #8]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	6892      	ldr	r2, [r2, #8]
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3304      	adds	r3, #4
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d103      	bne.n	8005a30 <xTaskIncrementTick+0xd8>
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2200      	movs	r2, #0
 8005a34:	615a      	str	r2, [r3, #20]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1e5a      	subs	r2, r3, #1
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01e      	beq.n	8005a86 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	6a12      	ldr	r2, [r2, #32]
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	69d2      	ldr	r2, [r2, #28]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d103      	bne.n	8005a76 <xTaskIncrementTick+0x11e>
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <xTaskIncrementTick+0x218>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	4a36      	ldr	r2, [pc, #216]	; (8005b70 <xTaskIncrementTick+0x218>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4935      	ldr	r1, [pc, #212]	; (8005b74 <xTaskIncrementTick+0x21c>)
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	3204      	adds	r2, #4
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <xTaskIncrementTick+0x21c>)
 8005adc:	441a      	add	r2, r3
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	615a      	str	r2, [r3, #20]
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	4923      	ldr	r1, [pc, #140]	; (8005b74 <xTaskIncrementTick+0x21c>)
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	1c59      	adds	r1, r3, #1
 8005af6:	481f      	ldr	r0, [pc, #124]	; (8005b74 <xTaskIncrementTick+0x21c>)
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4403      	add	r3, r0
 8005b02:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <xTaskIncrementTick+0x220>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	f67f af5d 	bls.w	80059ce <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b18:	e759      	b.n	80059ce <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <xTaskIncrementTick+0x220>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4914      	ldr	r1, [pc, #80]	; (8005b74 <xTaskIncrementTick+0x21c>)
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d901      	bls.n	8005b36 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005b32:	2301      	movs	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <xTaskIncrementTick+0x224>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	e004      	b.n	8005b4e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <xTaskIncrementTick+0x228>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <xTaskIncrementTick+0x228>)
 8005b4c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3728      	adds	r7, #40	; 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000750 	.word	0x20000750
 8005b5c:	2000072c 	.word	0x2000072c
 8005b60:	200006e0 	.word	0x200006e0
 8005b64:	200006e4 	.word	0x200006e4
 8005b68:	20000740 	.word	0x20000740
 8005b6c:	20000748 	.word	0x20000748
 8005b70:	20000730 	.word	0x20000730
 8005b74:	2000062c 	.word	0x2000062c
 8005b78:	20000628 	.word	0x20000628
 8005b7c:	2000073c 	.word	0x2000073c
 8005b80:	20000738 	.word	0x20000738

08005b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b8a:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <vTaskSwitchContext+0xac>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005b92:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <vTaskSwitchContext+0xb0>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005b98:	e044      	b.n	8005c24 <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <vTaskSwitchContext+0xb0>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <vTaskSwitchContext+0xb4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	fab3 f383 	clz	r3, r3
 8005bac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	f1c3 031f 	rsb	r3, r3, #31
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	4921      	ldr	r1, [pc, #132]	; (8005c3c <vTaskSwitchContext+0xb8>)
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	607b      	str	r3, [r7, #4]
    }
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vTaskSwitchContext+0x5a>
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <vTaskSwitchContext+0xb8>)
 8005bec:	4413      	add	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3308      	adds	r3, #8
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d104      	bne.n	8005c10 <vTaskSwitchContext+0x8c>
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <vTaskSwitchContext+0xbc>)
 8005c18:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <vTaskSwitchContext+0xbc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	334c      	adds	r3, #76	; 0x4c
 8005c20:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <vTaskSwitchContext+0xc0>)
 8005c22:	6013      	str	r3, [r2, #0]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000750 	.word	0x20000750
 8005c34:	2000073c 	.word	0x2000073c
 8005c38:	20000730 	.word	0x20000730
 8005c3c:	2000062c 	.word	0x2000062c
 8005c40:	20000628 	.word	0x20000628
 8005c44:	20000024 	.word	0x20000024

08005c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005c50:	f000 f852 	bl	8005cf8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <prvIdleTask+0x28>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d9f9      	bls.n	8005c50 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <prvIdleTask+0x2c>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005c6c:	e7f0      	b.n	8005c50 <prvIdleTask+0x8>
 8005c6e:	bf00      	nop
 8005c70:	2000062c 	.word	0x2000062c
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	e00c      	b.n	8005c9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <prvInitialiseTaskLists+0x60>)
 8005c90:	4413      	add	r3, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fab6 	bl	8005204 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	d9ef      	bls.n	8005c84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005ca4:	480d      	ldr	r0, [pc, #52]	; (8005cdc <prvInitialiseTaskLists+0x64>)
 8005ca6:	f7ff faad 	bl	8005204 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005caa:	480d      	ldr	r0, [pc, #52]	; (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005cac:	f7ff faaa 	bl	8005204 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005cb0:	480c      	ldr	r0, [pc, #48]	; (8005ce4 <prvInitialiseTaskLists+0x6c>)
 8005cb2:	f7ff faa7 	bl	8005204 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005cb6:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <prvInitialiseTaskLists+0x70>)
 8005cb8:	f7ff faa4 	bl	8005204 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005cbc:	480b      	ldr	r0, [pc, #44]	; (8005cec <prvInitialiseTaskLists+0x74>)
 8005cbe:	f7ff faa1 	bl	8005204 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <prvInitialiseTaskLists+0x78>)
 8005cc4:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <prvInitialiseTaskLists+0x64>)
 8005cc6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <prvInitialiseTaskLists+0x7c>)
 8005cca:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	2000062c 	.word	0x2000062c
 8005cdc:	200006b8 	.word	0x200006b8
 8005ce0:	200006cc 	.word	0x200006cc
 8005ce4:	200006e8 	.word	0x200006e8
 8005ce8:	200006fc 	.word	0x200006fc
 8005cec:	20000714 	.word	0x20000714
 8005cf0:	200006e0 	.word	0x200006e0
 8005cf4:	200006e4 	.word	0x200006e4

08005cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cfe:	e019      	b.n	8005d34 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005d00:	f000 f9aa 	bl	8006058 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <prvCheckTasksWaitingTermination+0x50>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff faa4 	bl	800525e <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4a0b      	ldr	r2, [pc, #44]	; (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d1e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d28:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005d2a:	f000 f9c5 	bl	80060b8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f810 	bl	8005d54 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e1      	bne.n	8005d00 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	200006fc 	.word	0x200006fc
 8005d4c:	20000728 	.word	0x20000728
 8005d50:	20000710 	.word	0x20000710

08005d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005d5c:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <prvDeleteTCB+0x6c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	334c      	adds	r3, #76	; 0x4c
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fa6c 	bl	8007240 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb0a 	bl	8006390 <vPortFree>
                vPortFree( pxTCB );
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fb07 	bl	8006390 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005d82:	e018      	b.n	8005db6 <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d103      	bne.n	8005d96 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fafe 	bl	8006390 <vPortFree>
    }
 8005d94:	e00f      	b.n	8005db6 <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d00a      	beq.n	8005db6 <prvDeleteTCB+0x62>
        __asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
    }
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <prvDeleteTCB+0x60>
    }
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000628 	.word	0x20000628

08005dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <prvResetNextTaskUnblockTime+0x30>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <prvResetNextTaskUnblockTime+0x34>)
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005dda:	e005      	b.n	8005de8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <prvResetNextTaskUnblockTime+0x30>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <prvResetNextTaskUnblockTime+0x34>)
 8005de6:	6013      	str	r3, [r2, #0]
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	200006e0 	.word	0x200006e0
 8005df8:	20000748 	.word	0x20000748

08005dfc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3b04      	subs	r3, #4
 8005e1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3b04      	subs	r3, #4
 8005e2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005e2c:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <pxPortInitialiseStack+0x64>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3b14      	subs	r3, #20
 8005e36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3b04      	subs	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f06f 0202 	mvn.w	r2, #2
 8005e4a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b20      	subs	r3, #32
 8005e50:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005e52:	68fb      	ldr	r3, [r7, #12]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	08005e65 	.word	0x08005e65

08005e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <prvTaskExitError+0x54>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d00a      	beq.n	8005e8e <prvTaskExitError+0x2a>
        __asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	60fb      	str	r3, [r7, #12]
    }
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <prvTaskExitError+0x28>
        __asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	60bb      	str	r3, [r7, #8]
    }
 8005ea0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005ea2:	bf00      	nop
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0fc      	beq.n	8005ea4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	20000020 	.word	0x20000020
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <pxCurrentTCBConst2>)
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	6808      	ldr	r0, [r1, #0]
 8005ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	f380 8809 	msr	PSP, r0
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f380 8811 	msr	BASEPRI, r0
 8005eda:	4770      	bx	lr
 8005edc:	f3af 8000 	nop.w

08005ee0 <pxCurrentTCBConst2>:
 8005ee0:	20000628 	.word	0x20000628
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005ee8:	4808      	ldr	r0, [pc, #32]	; (8005f0c <prvPortStartFirstTask+0x24>)
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	6800      	ldr	r0, [r0, #0]
 8005eee:	f380 8808 	msr	MSP, r0
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8814 	msr	CONTROL, r0
 8005efa:	b662      	cpsie	i
 8005efc:	b661      	cpsie	f
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	df00      	svc	0
 8005f08:	bf00      	nop
 8005f0a:	0000      	.short	0x0000
 8005f0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop

08005f14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f1a:	4b46      	ldr	r3, [pc, #280]	; (8006034 <xPortStartScheduler+0x120>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a46      	ldr	r2, [pc, #280]	; (8006038 <xPortStartScheduler+0x124>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d10a      	bne.n	8005f3a <xPortStartScheduler+0x26>
        __asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	613b      	str	r3, [r7, #16]
    }
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <xPortStartScheduler+0x120>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3f      	ldr	r2, [pc, #252]	; (800603c <xPortStartScheduler+0x128>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d10a      	bne.n	8005f5a <xPortStartScheduler+0x46>
        __asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	60fb      	str	r3, [r7, #12]
    }
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f5a:	4b39      	ldr	r3, [pc, #228]	; (8006040 <xPortStartScheduler+0x12c>)
 8005f5c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	22ff      	movs	r2, #255	; 0xff
 8005f6a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	4b31      	ldr	r3, [pc, #196]	; (8006044 <xPortStartScheduler+0x130>)
 8005f80:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f82:	4b31      	ldr	r3, [pc, #196]	; (8006048 <xPortStartScheduler+0x134>)
 8005f84:	2207      	movs	r2, #7
 8005f86:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f88:	e009      	b.n	8005f9e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <xPortStartScheduler+0x134>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	4a2d      	ldr	r2, [pc, #180]	; (8006048 <xPortStartScheduler+0x134>)
 8005f92:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b80      	cmp	r3, #128	; 0x80
 8005fa8:	d0ef      	beq.n	8005f8a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005faa:	4b27      	ldr	r3, [pc, #156]	; (8006048 <xPortStartScheduler+0x134>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1c3 0307 	rsb	r3, r3, #7
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d00a      	beq.n	8005fcc <xPortStartScheduler+0xb8>
        __asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60bb      	str	r3, [r7, #8]
    }
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <xPortStartScheduler+0x134>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <xPortStartScheduler+0x134>)
 8005fd4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fde:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <xPortStartScheduler+0x134>)
 8005fe0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <xPortStartScheduler+0x138>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <xPortStartScheduler+0x138>)
 8005ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ff4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005ff6:	4b15      	ldr	r3, [pc, #84]	; (800604c <xPortStartScheduler+0x138>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a14      	ldr	r2, [pc, #80]	; (800604c <xPortStartScheduler+0x138>)
 8005ffc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006000:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006002:	f000 f8db 	bl	80061bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <xPortStartScheduler+0x13c>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800600c:	f000 f8fa 	bl	8006204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <xPortStartScheduler+0x140>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a0f      	ldr	r2, [pc, #60]	; (8006054 <xPortStartScheduler+0x140>)
 8006016:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800601a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800601c:	f7ff ff64 	bl	8005ee8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006020:	f7ff fdb0 	bl	8005b84 <vTaskSwitchContext>
    prvTaskExitError();
 8006024:	f7ff ff1e 	bl	8005e64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	e000ed00 	.word	0xe000ed00
 8006038:	410fc271 	.word	0x410fc271
 800603c:	410fc270 	.word	0x410fc270
 8006040:	e000e400 	.word	0xe000e400
 8006044:	20000754 	.word	0x20000754
 8006048:	20000758 	.word	0x20000758
 800604c:	e000ed20 	.word	0xe000ed20
 8006050:	20000020 	.word	0x20000020
 8006054:	e000ef34 	.word	0xe000ef34

08006058 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
        __asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
    }
 8006070:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <vPortEnterCritical+0x58>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <vPortEnterCritical+0x58>)
 800607a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <vPortEnterCritical+0x58>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10f      	bne.n	80060a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <vPortEnterCritical+0x5c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	603b      	str	r3, [r7, #0]
    }
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vPortEnterCritical+0x4a>
    }
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000020 	.word	0x20000020
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <vPortExitCritical+0x50>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <vPortExitCritical+0x24>
        __asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	607b      	str	r3, [r7, #4]
    }
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <vPortExitCritical+0x50>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	4a09      	ldr	r2, [pc, #36]	; (8006108 <vPortExitCritical+0x50>)
 80060e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <vPortExitCritical+0x50>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d105      	bne.n	80060fa <vPortExitCritical+0x42>
 80060ee:	2300      	movs	r3, #0
 80060f0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80060f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000020 	.word	0x20000020
 800610c:	00000000 	.word	0x00000000

08006110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006110:	f3ef 8009 	mrs	r0, PSP
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <pxCurrentTCBConst>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	f01e 0f10 	tst.w	lr, #16
 8006120:	bf08      	it	eq
 8006122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	6010      	str	r0, [r2, #0]
 800612c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006134:	f380 8811 	msr	BASEPRI, r0
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f7ff fd20 	bl	8005b84 <vTaskSwitchContext>
 8006144:	f04f 0000 	mov.w	r0, #0
 8006148:	f380 8811 	msr	BASEPRI, r0
 800614c:	bc09      	pop	{r0, r3}
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	6808      	ldr	r0, [r1, #0]
 8006152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006156:	f01e 0f10 	tst.w	lr, #16
 800615a:	bf08      	it	eq
 800615c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006160:	f380 8809 	msr	PSP, r0
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w

08006170 <pxCurrentTCBConst>:
 8006170:	20000628 	.word	0x20000628
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
        __asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
    }
 8006190:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006192:	f7ff fbe1 	bl	8005958 <xTaskIncrementTick>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <SysTick_Handler+0x40>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f383 8811 	msr	BASEPRI, r3
    }
 80061ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <vPortSetupTimerInterrupt+0x34>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <vPortSetupTimerInterrupt+0x38>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <vPortSetupTimerInterrupt+0x3c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <vPortSetupTimerInterrupt+0x40>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	099b      	lsrs	r3, r3, #6
 80061d8:	4a09      	ldr	r2, [pc, #36]	; (8006200 <vPortSetupTimerInterrupt+0x44>)
 80061da:	3b01      	subs	r3, #1
 80061dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061de:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <vPortSetupTimerInterrupt+0x34>)
 80061e0:	2207      	movs	r2, #7
 80061e2:	601a      	str	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	e000e010 	.word	0xe000e010
 80061f4:	e000e018 	.word	0xe000e018
 80061f8:	20000010 	.word	0x20000010
 80061fc:	10624dd3 	.word	0x10624dd3
 8006200:	e000e014 	.word	0xe000e014

08006204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006214 <vPortEnableVFP+0x10>
 8006208:	6801      	ldr	r1, [r0, #0]
 800620a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800620e:	6001      	str	r1, [r0, #0]
 8006210:	4770      	bx	lr
 8006212:	0000      	.short	0x0000
 8006214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop

0800621c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006228:	f7ff fa8c 	bl	8005744 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800622c:	4b53      	ldr	r3, [pc, #332]	; (800637c <pvPortMalloc+0x160>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006234:	f000 f908 	bl	8006448 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d012      	beq.n	8006264 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800623e:	2208      	movs	r2, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	3308      	adds	r3, #8
 800624a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	43db      	mvns	r3, r3
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d804      	bhi.n	8006260 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	4413      	add	r3, r2
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	e001      	b.n	8006264 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	db70      	blt.n	800634c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d06d      	beq.n	800634c <pvPortMalloc+0x130>
 8006270:	4b43      	ldr	r3, [pc, #268]	; (8006380 <pvPortMalloc+0x164>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d868      	bhi.n	800634c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800627a:	4b42      	ldr	r3, [pc, #264]	; (8006384 <pvPortMalloc+0x168>)
 800627c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800627e:	4b41      	ldr	r3, [pc, #260]	; (8006384 <pvPortMalloc+0x168>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006284:	e004      	b.n	8006290 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <pvPortMalloc+0x86>
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f1      	bne.n	8006286 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <pvPortMalloc+0x160>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d04f      	beq.n	800634c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2208      	movs	r2, #8
 80062b2:	4413      	add	r3, r2
 80062b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	2308      	movs	r3, #8
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d91f      	bls.n	800630e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <pvPortMalloc+0xda>
        __asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
    }
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1ad2      	subs	r2, r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006308:	6978      	ldr	r0, [r7, #20]
 800630a:	f000 f8f9 	bl	8006500 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <pvPortMalloc+0x164>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	4a19      	ldr	r2, [pc, #100]	; (8006380 <pvPortMalloc+0x164>)
 800631a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <pvPortMalloc+0x164>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b19      	ldr	r3, [pc, #100]	; (8006388 <pvPortMalloc+0x16c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d203      	bcs.n	8006330 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <pvPortMalloc+0x164>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a16      	ldr	r2, [pc, #88]	; (8006388 <pvPortMalloc+0x16c>)
 800632e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <pvPortMalloc+0x170>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	4a10      	ldr	r2, [pc, #64]	; (800638c <pvPortMalloc+0x170>)
 800634a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800634c:	f7ff fa08 	bl	8005760 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <pvPortMalloc+0x154>
        __asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60fb      	str	r3, [r7, #12]
    }
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <pvPortMalloc+0x152>
    return pvReturn;
 8006370:	69fb      	ldr	r3, [r7, #28]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3728      	adds	r7, #40	; 0x28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20004364 	.word	0x20004364
 8006380:	20004368 	.word	0x20004368
 8006384:	2000435c 	.word	0x2000435c
 8006388:	2000436c 	.word	0x2000436c
 800638c:	20004370 	.word	0x20004370

08006390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d049      	beq.n	8006436 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80063a2:	2308      	movs	r3, #8
 80063a4:	425b      	negs	r3, r3
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db0a      	blt.n	80063ce <vPortFree+0x3e>
        __asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
    }
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <vPortFree+0x5c>
        __asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60bb      	str	r3, [r7, #8]
    }
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	0fdb      	lsrs	r3, r3, #31
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01c      	beq.n	8006436 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d118      	bne.n	8006436 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006410:	f7ff f998 	bl	8005744 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <vPortFree+0xb0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4413      	add	r3, r2
 800641e:	4a08      	ldr	r2, [pc, #32]	; (8006440 <vPortFree+0xb0>)
 8006420:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006422:	6938      	ldr	r0, [r7, #16]
 8006424:	f000 f86c 	bl	8006500 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <vPortFree+0xb4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	4a05      	ldr	r2, [pc, #20]	; (8006444 <vPortFree+0xb4>)
 8006430:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006432:	f7ff f995 	bl	8005760 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006436:	bf00      	nop
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20004368 	.word	0x20004368
 8006444:	20004374 	.word	0x20004374

08006448 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800644e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006452:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <prvHeapInit+0xa4>)
 8006456:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3307      	adds	r3, #7
 8006466:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0307 	bic.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <prvHeapInit+0xa4>)
 8006478:	4413      	add	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <prvHeapInit+0xa8>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <prvHeapInit+0xa8>)
 8006488:	2200      	movs	r2, #0
 800648a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006494:	2208      	movs	r2, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <prvHeapInit+0xac>)
 80064a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <prvHeapInit+0xac>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <prvHeapInit+0xac>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <prvHeapInit+0xac>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4a08      	ldr	r2, [pc, #32]	; (80064f8 <prvHeapInit+0xb0>)
 80064d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a07      	ldr	r2, [pc, #28]	; (80064fc <prvHeapInit+0xb4>)
 80064de:	6013      	str	r3, [r2, #0]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000075c 	.word	0x2000075c
 80064f0:	2000435c 	.word	0x2000435c
 80064f4:	20004364 	.word	0x20004364
 80064f8:	2000436c 	.word	0x2000436c
 80064fc:	20004368 	.word	0x20004368

08006500 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006508:	4b28      	ldr	r3, [pc, #160]	; (80065ac <prvInsertBlockIntoFreeList+0xac>)
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e002      	b.n	8006514 <prvInsertBlockIntoFreeList+0x14>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	d8f7      	bhi.n	800650e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4413      	add	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d108      	bne.n	8006542 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	441a      	add	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	441a      	add	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d118      	bne.n	8006588 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <prvInsertBlockIntoFreeList+0xb0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d00d      	beq.n	800657e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	441a      	add	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e008      	b.n	8006590 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e003      	b.n	8006590 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d002      	beq.n	800659e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	2000435c 	.word	0x2000435c
 80065b0:	20004364 	.word	0x20004364

080065b4 <__errno>:
 80065b4:	4b01      	ldr	r3, [pc, #4]	; (80065bc <__errno+0x8>)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000024 	.word	0x20000024

080065c0 <std>:
 80065c0:	2300      	movs	r3, #0
 80065c2:	b510      	push	{r4, lr}
 80065c4:	4604      	mov	r4, r0
 80065c6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ce:	6083      	str	r3, [r0, #8]
 80065d0:	8181      	strh	r1, [r0, #12]
 80065d2:	6643      	str	r3, [r0, #100]	; 0x64
 80065d4:	81c2      	strh	r2, [r0, #14]
 80065d6:	6183      	str	r3, [r0, #24]
 80065d8:	4619      	mov	r1, r3
 80065da:	2208      	movs	r2, #8
 80065dc:	305c      	adds	r0, #92	; 0x5c
 80065de:	f000 f91a 	bl	8006816 <memset>
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <std+0x38>)
 80065e4:	6263      	str	r3, [r4, #36]	; 0x24
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <std+0x3c>)
 80065e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <std+0x40>)
 80065ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x44>)
 80065f0:	6224      	str	r4, [r4, #32]
 80065f2:	6323      	str	r3, [r4, #48]	; 0x30
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	bf00      	nop
 80065f8:	08007359 	.word	0x08007359
 80065fc:	0800737b 	.word	0x0800737b
 8006600:	080073b3 	.word	0x080073b3
 8006604:	080073d7 	.word	0x080073d7

08006608 <_cleanup_r>:
 8006608:	4901      	ldr	r1, [pc, #4]	; (8006610 <_cleanup_r+0x8>)
 800660a:	f000 b8af 	b.w	800676c <_fwalk_reent>
 800660e:	bf00      	nop
 8006610:	08008229 	.word	0x08008229

08006614 <__sfmoreglue>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	2268      	movs	r2, #104	; 0x68
 8006618:	1e4d      	subs	r5, r1, #1
 800661a:	4355      	muls	r5, r2
 800661c:	460e      	mov	r6, r1
 800661e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006622:	f000 f921 	bl	8006868 <_malloc_r>
 8006626:	4604      	mov	r4, r0
 8006628:	b140      	cbz	r0, 800663c <__sfmoreglue+0x28>
 800662a:	2100      	movs	r1, #0
 800662c:	e9c0 1600 	strd	r1, r6, [r0]
 8006630:	300c      	adds	r0, #12
 8006632:	60a0      	str	r0, [r4, #8]
 8006634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006638:	f000 f8ed 	bl	8006816 <memset>
 800663c:	4620      	mov	r0, r4
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__sfp_lock_acquire>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__sfp_lock_acquire+0x8>)
 8006642:	f000 b8d8 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 8006646:	bf00      	nop
 8006648:	20004379 	.word	0x20004379

0800664c <__sfp_lock_release>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_release+0x8>)
 800664e:	f000 b8d3 	b.w	80067f8 <__retarget_lock_release_recursive>
 8006652:	bf00      	nop
 8006654:	20004379 	.word	0x20004379

08006658 <__sinit_lock_acquire>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sinit_lock_acquire+0x8>)
 800665a:	f000 b8cc 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 800665e:	bf00      	nop
 8006660:	2000437a 	.word	0x2000437a

08006664 <__sinit_lock_release>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sinit_lock_release+0x8>)
 8006666:	f000 b8c7 	b.w	80067f8 <__retarget_lock_release_recursive>
 800666a:	bf00      	nop
 800666c:	2000437a 	.word	0x2000437a

08006670 <__sinit>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4604      	mov	r4, r0
 8006674:	f7ff fff0 	bl	8006658 <__sinit_lock_acquire>
 8006678:	69a3      	ldr	r3, [r4, #24]
 800667a:	b11b      	cbz	r3, 8006684 <__sinit+0x14>
 800667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006680:	f7ff bff0 	b.w	8006664 <__sinit_lock_release>
 8006684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006688:	6523      	str	r3, [r4, #80]	; 0x50
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <__sinit+0x68>)
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <__sinit+0x6c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	62a2      	str	r2, [r4, #40]	; 0x28
 8006692:	42a3      	cmp	r3, r4
 8006694:	bf04      	itt	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	61a3      	streq	r3, [r4, #24]
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f820 	bl	80066e0 <__sfp>
 80066a0:	6060      	str	r0, [r4, #4]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f81c 	bl	80066e0 <__sfp>
 80066a8:	60a0      	str	r0, [r4, #8]
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f818 	bl	80066e0 <__sfp>
 80066b0:	2200      	movs	r2, #0
 80066b2:	60e0      	str	r0, [r4, #12]
 80066b4:	2104      	movs	r1, #4
 80066b6:	6860      	ldr	r0, [r4, #4]
 80066b8:	f7ff ff82 	bl	80065c0 <std>
 80066bc:	68a0      	ldr	r0, [r4, #8]
 80066be:	2201      	movs	r2, #1
 80066c0:	2109      	movs	r1, #9
 80066c2:	f7ff ff7d 	bl	80065c0 <std>
 80066c6:	68e0      	ldr	r0, [r4, #12]
 80066c8:	2202      	movs	r2, #2
 80066ca:	2112      	movs	r1, #18
 80066cc:	f7ff ff78 	bl	80065c0 <std>
 80066d0:	2301      	movs	r3, #1
 80066d2:	61a3      	str	r3, [r4, #24]
 80066d4:	e7d2      	b.n	800667c <__sinit+0xc>
 80066d6:	bf00      	nop
 80066d8:	080095cc 	.word	0x080095cc
 80066dc:	08006609 	.word	0x08006609

080066e0 <__sfp>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	4607      	mov	r7, r0
 80066e4:	f7ff ffac 	bl	8006640 <__sfp_lock_acquire>
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <__sfp+0x84>)
 80066ea:	681e      	ldr	r6, [r3, #0]
 80066ec:	69b3      	ldr	r3, [r6, #24]
 80066ee:	b913      	cbnz	r3, 80066f6 <__sfp+0x16>
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff ffbd 	bl	8006670 <__sinit>
 80066f6:	3648      	adds	r6, #72	; 0x48
 80066f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	d503      	bpl.n	8006708 <__sfp+0x28>
 8006700:	6833      	ldr	r3, [r6, #0]
 8006702:	b30b      	cbz	r3, 8006748 <__sfp+0x68>
 8006704:	6836      	ldr	r6, [r6, #0]
 8006706:	e7f7      	b.n	80066f8 <__sfp+0x18>
 8006708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800670c:	b9d5      	cbnz	r5, 8006744 <__sfp+0x64>
 800670e:	4b16      	ldr	r3, [pc, #88]	; (8006768 <__sfp+0x88>)
 8006710:	60e3      	str	r3, [r4, #12]
 8006712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006716:	6665      	str	r5, [r4, #100]	; 0x64
 8006718:	f000 f86c 	bl	80067f4 <__retarget_lock_init_recursive>
 800671c:	f7ff ff96 	bl	800664c <__sfp_lock_release>
 8006720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006728:	6025      	str	r5, [r4, #0]
 800672a:	61a5      	str	r5, [r4, #24]
 800672c:	2208      	movs	r2, #8
 800672e:	4629      	mov	r1, r5
 8006730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006734:	f000 f86f 	bl	8006816 <memset>
 8006738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800673c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006740:	4620      	mov	r0, r4
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006744:	3468      	adds	r4, #104	; 0x68
 8006746:	e7d9      	b.n	80066fc <__sfp+0x1c>
 8006748:	2104      	movs	r1, #4
 800674a:	4638      	mov	r0, r7
 800674c:	f7ff ff62 	bl	8006614 <__sfmoreglue>
 8006750:	4604      	mov	r4, r0
 8006752:	6030      	str	r0, [r6, #0]
 8006754:	2800      	cmp	r0, #0
 8006756:	d1d5      	bne.n	8006704 <__sfp+0x24>
 8006758:	f7ff ff78 	bl	800664c <__sfp_lock_release>
 800675c:	230c      	movs	r3, #12
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	e7ee      	b.n	8006740 <__sfp+0x60>
 8006762:	bf00      	nop
 8006764:	080095cc 	.word	0x080095cc
 8006768:	ffff0001 	.word	0xffff0001

0800676c <_fwalk_reent>:
 800676c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006770:	4606      	mov	r6, r0
 8006772:	4688      	mov	r8, r1
 8006774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006778:	2700      	movs	r7, #0
 800677a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800677e:	f1b9 0901 	subs.w	r9, r9, #1
 8006782:	d505      	bpl.n	8006790 <_fwalk_reent+0x24>
 8006784:	6824      	ldr	r4, [r4, #0]
 8006786:	2c00      	cmp	r4, #0
 8006788:	d1f7      	bne.n	800677a <_fwalk_reent+0xe>
 800678a:	4638      	mov	r0, r7
 800678c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006790:	89ab      	ldrh	r3, [r5, #12]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d907      	bls.n	80067a6 <_fwalk_reent+0x3a>
 8006796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800679a:	3301      	adds	r3, #1
 800679c:	d003      	beq.n	80067a6 <_fwalk_reent+0x3a>
 800679e:	4629      	mov	r1, r5
 80067a0:	4630      	mov	r0, r6
 80067a2:	47c0      	blx	r8
 80067a4:	4307      	orrs	r7, r0
 80067a6:	3568      	adds	r5, #104	; 0x68
 80067a8:	e7e9      	b.n	800677e <_fwalk_reent+0x12>
	...

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4d0d      	ldr	r5, [pc, #52]	; (80067e4 <__libc_init_array+0x38>)
 80067b0:	4c0d      	ldr	r4, [pc, #52]	; (80067e8 <__libc_init_array+0x3c>)
 80067b2:	1b64      	subs	r4, r4, r5
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	2600      	movs	r6, #0
 80067b8:	42a6      	cmp	r6, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4d0b      	ldr	r5, [pc, #44]	; (80067ec <__libc_init_array+0x40>)
 80067be:	4c0c      	ldr	r4, [pc, #48]	; (80067f0 <__libc_init_array+0x44>)
 80067c0:	f002 fe86 	bl	80094d0 <_init>
 80067c4:	1b64      	subs	r4, r4, r5
 80067c6:	10a4      	asrs	r4, r4, #2
 80067c8:	2600      	movs	r6, #0
 80067ca:	42a6      	cmp	r6, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d4:	4798      	blx	r3
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f855 3b04 	ldr.w	r3, [r5], #4
 80067de:	4798      	blx	r3
 80067e0:	3601      	adds	r6, #1
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	0800994c 	.word	0x0800994c
 80067e8:	0800994c 	.word	0x0800994c
 80067ec:	0800994c 	.word	0x0800994c
 80067f0:	08009950 	.word	0x08009950

080067f4 <__retarget_lock_init_recursive>:
 80067f4:	4770      	bx	lr

080067f6 <__retarget_lock_acquire_recursive>:
 80067f6:	4770      	bx	lr

080067f8 <__retarget_lock_release_recursive>:
 80067f8:	4770      	bx	lr

080067fa <memcpy>:
 80067fa:	440a      	add	r2, r1
 80067fc:	4291      	cmp	r1, r2
 80067fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006802:	d100      	bne.n	8006806 <memcpy+0xc>
 8006804:	4770      	bx	lr
 8006806:	b510      	push	{r4, lr}
 8006808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800680c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006810:	4291      	cmp	r1, r2
 8006812:	d1f9      	bne.n	8006808 <memcpy+0xe>
 8006814:	bd10      	pop	{r4, pc}

08006816 <memset>:
 8006816:	4402      	add	r2, r0
 8006818:	4603      	mov	r3, r0
 800681a:	4293      	cmp	r3, r2
 800681c:	d100      	bne.n	8006820 <memset+0xa>
 800681e:	4770      	bx	lr
 8006820:	f803 1b01 	strb.w	r1, [r3], #1
 8006824:	e7f9      	b.n	800681a <memset+0x4>
	...

08006828 <sbrk_aligned>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0e      	ldr	r6, [pc, #56]	; (8006864 <sbrk_aligned+0x3c>)
 800682c:	460c      	mov	r4, r1
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	4605      	mov	r5, r0
 8006832:	b911      	cbnz	r1, 800683a <sbrk_aligned+0x12>
 8006834:	f000 fd60 	bl	80072f8 <_sbrk_r>
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 fd5b 	bl	80072f8 <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d00a      	beq.n	800685c <sbrk_aligned+0x34>
 8006846:	1cc4      	adds	r4, r0, #3
 8006848:	f024 0403 	bic.w	r4, r4, #3
 800684c:	42a0      	cmp	r0, r4
 800684e:	d007      	beq.n	8006860 <sbrk_aligned+0x38>
 8006850:	1a21      	subs	r1, r4, r0
 8006852:	4628      	mov	r0, r5
 8006854:	f000 fd50 	bl	80072f8 <_sbrk_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d101      	bne.n	8006860 <sbrk_aligned+0x38>
 800685c:	f04f 34ff 	mov.w	r4, #4294967295
 8006860:	4620      	mov	r0, r4
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	20004380 	.word	0x20004380

08006868 <_malloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	1ccd      	adds	r5, r1, #3
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	2d00      	cmp	r5, #0
 800687c:	4607      	mov	r7, r0
 800687e:	db01      	blt.n	8006884 <_malloc_r+0x1c>
 8006880:	42a9      	cmp	r1, r5
 8006882:	d905      	bls.n	8006890 <_malloc_r+0x28>
 8006884:	230c      	movs	r3, #12
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	2600      	movs	r6, #0
 800688a:	4630      	mov	r0, r6
 800688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006890:	4e2e      	ldr	r6, [pc, #184]	; (800694c <_malloc_r+0xe4>)
 8006892:	f001 fd23 	bl	80082dc <__malloc_lock>
 8006896:	6833      	ldr	r3, [r6, #0]
 8006898:	461c      	mov	r4, r3
 800689a:	bb34      	cbnz	r4, 80068ea <_malloc_r+0x82>
 800689c:	4629      	mov	r1, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff ffc2 	bl	8006828 <sbrk_aligned>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	4604      	mov	r4, r0
 80068a8:	d14d      	bne.n	8006946 <_malloc_r+0xde>
 80068aa:	6834      	ldr	r4, [r6, #0]
 80068ac:	4626      	mov	r6, r4
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d140      	bne.n	8006934 <_malloc_r+0xcc>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4638      	mov	r0, r7
 80068b8:	eb04 0803 	add.w	r8, r4, r3
 80068bc:	f000 fd1c 	bl	80072f8 <_sbrk_r>
 80068c0:	4580      	cmp	r8, r0
 80068c2:	d13a      	bne.n	800693a <_malloc_r+0xd2>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	3503      	adds	r5, #3
 80068c8:	1a6d      	subs	r5, r5, r1
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	4629      	mov	r1, r5
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff ffa5 	bl	8006828 <sbrk_aligned>
 80068de:	3001      	adds	r0, #1
 80068e0:	d02b      	beq.n	800693a <_malloc_r+0xd2>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	442b      	add	r3, r5
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	e00e      	b.n	8006908 <_malloc_r+0xa0>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	1b52      	subs	r2, r2, r5
 80068ee:	d41e      	bmi.n	800692e <_malloc_r+0xc6>
 80068f0:	2a0b      	cmp	r2, #11
 80068f2:	d916      	bls.n	8006922 <_malloc_r+0xba>
 80068f4:	1961      	adds	r1, r4, r5
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	6025      	str	r5, [r4, #0]
 80068fa:	bf18      	it	ne
 80068fc:	6059      	strne	r1, [r3, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	bf08      	it	eq
 8006902:	6031      	streq	r1, [r6, #0]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4638      	mov	r0, r7
 800690a:	f104 060b 	add.w	r6, r4, #11
 800690e:	f001 fceb 	bl	80082e8 <__malloc_unlock>
 8006912:	f026 0607 	bic.w	r6, r6, #7
 8006916:	1d23      	adds	r3, r4, #4
 8006918:	1af2      	subs	r2, r6, r3
 800691a:	d0b6      	beq.n	800688a <_malloc_r+0x22>
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	50a3      	str	r3, [r4, r2]
 8006920:	e7b3      	b.n	800688a <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	6032      	streq	r2, [r6, #0]
 800692a:	605a      	strne	r2, [r3, #4]
 800692c:	e7ec      	b.n	8006908 <_malloc_r+0xa0>
 800692e:	4623      	mov	r3, r4
 8006930:	6864      	ldr	r4, [r4, #4]
 8006932:	e7b2      	b.n	800689a <_malloc_r+0x32>
 8006934:	4634      	mov	r4, r6
 8006936:	6876      	ldr	r6, [r6, #4]
 8006938:	e7b9      	b.n	80068ae <_malloc_r+0x46>
 800693a:	230c      	movs	r3, #12
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4638      	mov	r0, r7
 8006940:	f001 fcd2 	bl	80082e8 <__malloc_unlock>
 8006944:	e7a1      	b.n	800688a <_malloc_r+0x22>
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa0>
 800694a:	bf00      	nop
 800694c:	2000437c 	.word	0x2000437c

08006950 <__cvt>:
 8006950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	ec55 4b10 	vmov	r4, r5, d0
 8006958:	2d00      	cmp	r5, #0
 800695a:	460e      	mov	r6, r1
 800695c:	4619      	mov	r1, r3
 800695e:	462b      	mov	r3, r5
 8006960:	bfbb      	ittet	lt
 8006962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006966:	461d      	movlt	r5, r3
 8006968:	2300      	movge	r3, #0
 800696a:	232d      	movlt	r3, #45	; 0x2d
 800696c:	700b      	strb	r3, [r1, #0]
 800696e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006970:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006974:	4691      	mov	r9, r2
 8006976:	f023 0820 	bic.w	r8, r3, #32
 800697a:	bfbc      	itt	lt
 800697c:	4622      	movlt	r2, r4
 800697e:	4614      	movlt	r4, r2
 8006980:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006984:	d005      	beq.n	8006992 <__cvt+0x42>
 8006986:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800698a:	d100      	bne.n	800698e <__cvt+0x3e>
 800698c:	3601      	adds	r6, #1
 800698e:	2102      	movs	r1, #2
 8006990:	e000      	b.n	8006994 <__cvt+0x44>
 8006992:	2103      	movs	r1, #3
 8006994:	ab03      	add	r3, sp, #12
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	ab02      	add	r3, sp, #8
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	ec45 4b10 	vmov	d0, r4, r5
 80069a0:	4653      	mov	r3, sl
 80069a2:	4632      	mov	r2, r6
 80069a4:	f000 fdcc 	bl	8007540 <_dtoa_r>
 80069a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069ac:	4607      	mov	r7, r0
 80069ae:	d102      	bne.n	80069b6 <__cvt+0x66>
 80069b0:	f019 0f01 	tst.w	r9, #1
 80069b4:	d022      	beq.n	80069fc <__cvt+0xac>
 80069b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069ba:	eb07 0906 	add.w	r9, r7, r6
 80069be:	d110      	bne.n	80069e2 <__cvt+0x92>
 80069c0:	783b      	ldrb	r3, [r7, #0]
 80069c2:	2b30      	cmp	r3, #48	; 0x30
 80069c4:	d10a      	bne.n	80069dc <__cvt+0x8c>
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	4620      	mov	r0, r4
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7fa f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80069d2:	b918      	cbnz	r0, 80069dc <__cvt+0x8c>
 80069d4:	f1c6 0601 	rsb	r6, r6, #1
 80069d8:	f8ca 6000 	str.w	r6, [sl]
 80069dc:	f8da 3000 	ldr.w	r3, [sl]
 80069e0:	4499      	add	r9, r3
 80069e2:	2200      	movs	r2, #0
 80069e4:	2300      	movs	r3, #0
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80069ee:	b108      	cbz	r0, 80069f4 <__cvt+0xa4>
 80069f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80069f4:	2230      	movs	r2, #48	; 0x30
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	454b      	cmp	r3, r9
 80069fa:	d307      	bcc.n	8006a0c <__cvt+0xbc>
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a00:	1bdb      	subs	r3, r3, r7
 8006a02:	4638      	mov	r0, r7
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	b004      	add	sp, #16
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	1c59      	adds	r1, r3, #1
 8006a0e:	9103      	str	r1, [sp, #12]
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	e7f0      	b.n	80069f6 <__cvt+0xa6>

08006a14 <__exponent>:
 8006a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a16:	4603      	mov	r3, r0
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	bfb8      	it	lt
 8006a1c:	4249      	neglt	r1, r1
 8006a1e:	f803 2b02 	strb.w	r2, [r3], #2
 8006a22:	bfb4      	ite	lt
 8006a24:	222d      	movlt	r2, #45	; 0x2d
 8006a26:	222b      	movge	r2, #43	; 0x2b
 8006a28:	2909      	cmp	r1, #9
 8006a2a:	7042      	strb	r2, [r0, #1]
 8006a2c:	dd2a      	ble.n	8006a84 <__exponent+0x70>
 8006a2e:	f10d 0407 	add.w	r4, sp, #7
 8006a32:	46a4      	mov	ip, r4
 8006a34:	270a      	movs	r7, #10
 8006a36:	46a6      	mov	lr, r4
 8006a38:	460a      	mov	r2, r1
 8006a3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a3e:	fb07 1516 	mls	r5, r7, r6, r1
 8006a42:	3530      	adds	r5, #48	; 0x30
 8006a44:	2a63      	cmp	r2, #99	; 0x63
 8006a46:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	dcf1      	bgt.n	8006a36 <__exponent+0x22>
 8006a52:	3130      	adds	r1, #48	; 0x30
 8006a54:	f1ae 0502 	sub.w	r5, lr, #2
 8006a58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a5c:	1c44      	adds	r4, r0, #1
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4561      	cmp	r1, ip
 8006a62:	d30a      	bcc.n	8006a7a <__exponent+0x66>
 8006a64:	f10d 0209 	add.w	r2, sp, #9
 8006a68:	eba2 020e 	sub.w	r2, r2, lr
 8006a6c:	4565      	cmp	r5, ip
 8006a6e:	bf88      	it	hi
 8006a70:	2200      	movhi	r2, #0
 8006a72:	4413      	add	r3, r2
 8006a74:	1a18      	subs	r0, r3, r0
 8006a76:	b003      	add	sp, #12
 8006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a82:	e7ed      	b.n	8006a60 <__exponent+0x4c>
 8006a84:	2330      	movs	r3, #48	; 0x30
 8006a86:	3130      	adds	r1, #48	; 0x30
 8006a88:	7083      	strb	r3, [r0, #2]
 8006a8a:	70c1      	strb	r1, [r0, #3]
 8006a8c:	1d03      	adds	r3, r0, #4
 8006a8e:	e7f1      	b.n	8006a74 <__exponent+0x60>

08006a90 <_printf_float>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	ed2d 8b02 	vpush	{d8}
 8006a98:	b08d      	sub	sp, #52	; 0x34
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006aa0:	4616      	mov	r6, r2
 8006aa2:	461f      	mov	r7, r3
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	f001 fbfb 	bl	80082a0 <_localeconv_r>
 8006aaa:	f8d0 a000 	ldr.w	sl, [r0]
 8006aae:	4650      	mov	r0, sl
 8006ab0:	f7f9 fb96 	bl	80001e0 <strlen>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	9305      	str	r3, [sp, #20]
 8006abc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	f023 0307 	bic.w	r3, r3, #7
 8006aca:	f103 0208 	add.w	r2, r3, #8
 8006ace:	f8c8 2000 	str.w	r2, [r8]
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ada:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ade:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ae2:	9307      	str	r3, [sp, #28]
 8006ae4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ae8:	ee08 0a10 	vmov	s16, r0
 8006aec:	4b9f      	ldr	r3, [pc, #636]	; (8006d6c <_printf_float+0x2dc>)
 8006aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	f7fa f821 	bl	8000b3c <__aeabi_dcmpun>
 8006afa:	bb88      	cbnz	r0, 8006b60 <_printf_float+0xd0>
 8006afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b00:	4b9a      	ldr	r3, [pc, #616]	; (8006d6c <_printf_float+0x2dc>)
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	f7f9 fffb 	bl	8000b00 <__aeabi_dcmple>
 8006b0a:	bb48      	cbnz	r0, 8006b60 <_printf_float+0xd0>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4640      	mov	r0, r8
 8006b12:	4649      	mov	r1, r9
 8006b14:	f7f9 ffea 	bl	8000aec <__aeabi_dcmplt>
 8006b18:	b110      	cbz	r0, 8006b20 <_printf_float+0x90>
 8006b1a:	232d      	movs	r3, #45	; 0x2d
 8006b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b20:	4b93      	ldr	r3, [pc, #588]	; (8006d70 <_printf_float+0x2e0>)
 8006b22:	4894      	ldr	r0, [pc, #592]	; (8006d74 <_printf_float+0x2e4>)
 8006b24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b28:	bf94      	ite	ls
 8006b2a:	4698      	movls	r8, r3
 8006b2c:	4680      	movhi	r8, r0
 8006b2e:	2303      	movs	r3, #3
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	9b05      	ldr	r3, [sp, #20]
 8006b34:	f023 0204 	bic.w	r2, r3, #4
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	9700      	str	r7, [sp, #0]
 8006b40:	4633      	mov	r3, r6
 8006b42:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 f9d8 	bl	8006efc <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f040 8090 	bne.w	8006c72 <_printf_float+0x1e2>
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295
 8006b56:	b00d      	add	sp, #52	; 0x34
 8006b58:	ecbd 8b02 	vpop	{d8}
 8006b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 ffe8 	bl	8000b3c <__aeabi_dcmpun>
 8006b6c:	b140      	cbz	r0, 8006b80 <_printf_float+0xf0>
 8006b6e:	464b      	mov	r3, r9
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bfbc      	itt	lt
 8006b74:	232d      	movlt	r3, #45	; 0x2d
 8006b76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b7a:	487f      	ldr	r0, [pc, #508]	; (8006d78 <_printf_float+0x2e8>)
 8006b7c:	4b7f      	ldr	r3, [pc, #508]	; (8006d7c <_printf_float+0x2ec>)
 8006b7e:	e7d1      	b.n	8006b24 <_printf_float+0x94>
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b86:	9206      	str	r2, [sp, #24]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	d13f      	bne.n	8006c0c <_printf_float+0x17c>
 8006b8c:	2306      	movs	r3, #6
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	9b05      	ldr	r3, [sp, #20]
 8006b92:	6861      	ldr	r1, [r4, #4]
 8006b94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9303      	str	r3, [sp, #12]
 8006b9c:	ab0a      	add	r3, sp, #40	; 0x28
 8006b9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ba2:	ab09      	add	r3, sp, #36	; 0x24
 8006ba4:	ec49 8b10 	vmov	d0, r8, r9
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f7ff fecd 	bl	8006950 <__cvt>
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bba:	2b47      	cmp	r3, #71	; 0x47
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	d108      	bne.n	8006bd2 <_printf_float+0x142>
 8006bc0:	1cc8      	adds	r0, r1, #3
 8006bc2:	db02      	blt.n	8006bca <_printf_float+0x13a>
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	4299      	cmp	r1, r3
 8006bc8:	dd41      	ble.n	8006c4e <_printf_float+0x1be>
 8006bca:	f1ab 0b02 	sub.w	fp, fp, #2
 8006bce:	fa5f fb8b 	uxtb.w	fp, fp
 8006bd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bd6:	d820      	bhi.n	8006c1a <_printf_float+0x18a>
 8006bd8:	3901      	subs	r1, #1
 8006bda:	465a      	mov	r2, fp
 8006bdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006be0:	9109      	str	r1, [sp, #36]	; 0x24
 8006be2:	f7ff ff17 	bl	8006a14 <__exponent>
 8006be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006be8:	1813      	adds	r3, r2, r0
 8006bea:	2a01      	cmp	r2, #1
 8006bec:	4681      	mov	r9, r0
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	dc02      	bgt.n	8006bf8 <_printf_float+0x168>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	07d2      	lsls	r2, r2, #31
 8006bf6:	d501      	bpl.n	8006bfc <_printf_float+0x16c>
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d09c      	beq.n	8006b3e <_printf_float+0xae>
 8006c04:	232d      	movs	r3, #45	; 0x2d
 8006c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0a:	e798      	b.n	8006b3e <_printf_float+0xae>
 8006c0c:	9a06      	ldr	r2, [sp, #24]
 8006c0e:	2a47      	cmp	r2, #71	; 0x47
 8006c10:	d1be      	bne.n	8006b90 <_printf_float+0x100>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1bc      	bne.n	8006b90 <_printf_float+0x100>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e7b9      	b.n	8006b8e <_printf_float+0xfe>
 8006c1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c1e:	d118      	bne.n	8006c52 <_printf_float+0x1c2>
 8006c20:	2900      	cmp	r1, #0
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	dd0b      	ble.n	8006c3e <_printf_float+0x1ae>
 8006c26:	6121      	str	r1, [r4, #16]
 8006c28:	b913      	cbnz	r3, 8006c30 <_printf_float+0x1a0>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	07d0      	lsls	r0, r2, #31
 8006c2e:	d502      	bpl.n	8006c36 <_printf_float+0x1a6>
 8006c30:	3301      	adds	r3, #1
 8006c32:	440b      	add	r3, r1
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c38:	f04f 0900 	mov.w	r9, #0
 8006c3c:	e7de      	b.n	8006bfc <_printf_float+0x16c>
 8006c3e:	b913      	cbnz	r3, 8006c46 <_printf_float+0x1b6>
 8006c40:	6822      	ldr	r2, [r4, #0]
 8006c42:	07d2      	lsls	r2, r2, #31
 8006c44:	d501      	bpl.n	8006c4a <_printf_float+0x1ba>
 8006c46:	3302      	adds	r3, #2
 8006c48:	e7f4      	b.n	8006c34 <_printf_float+0x1a4>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e7f2      	b.n	8006c34 <_printf_float+0x1a4>
 8006c4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c54:	4299      	cmp	r1, r3
 8006c56:	db05      	blt.n	8006c64 <_printf_float+0x1d4>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	6121      	str	r1, [r4, #16]
 8006c5c:	07d8      	lsls	r0, r3, #31
 8006c5e:	d5ea      	bpl.n	8006c36 <_printf_float+0x1a6>
 8006c60:	1c4b      	adds	r3, r1, #1
 8006c62:	e7e7      	b.n	8006c34 <_printf_float+0x1a4>
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfd4      	ite	le
 8006c68:	f1c1 0202 	rsble	r2, r1, #2
 8006c6c:	2201      	movgt	r2, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	e7e0      	b.n	8006c34 <_printf_float+0x1a4>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	055a      	lsls	r2, r3, #21
 8006c76:	d407      	bmi.n	8006c88 <_printf_float+0x1f8>
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	d12c      	bne.n	8006ce0 <_printf_float+0x250>
 8006c86:	e764      	b.n	8006b52 <_printf_float+0xc2>
 8006c88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c8c:	f240 80e0 	bls.w	8006e50 <_printf_float+0x3c0>
 8006c90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	f7f9 ff1e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d034      	beq.n	8006d0a <_printf_float+0x27a>
 8006ca0:	4a37      	ldr	r2, [pc, #220]	; (8006d80 <_printf_float+0x2f0>)
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f af51 	beq.w	8006b52 <_printf_float+0xc2>
 8006cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	db02      	blt.n	8006cbe <_printf_float+0x22e>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	07d8      	lsls	r0, r3, #31
 8006cbc:	d510      	bpl.n	8006ce0 <_printf_float+0x250>
 8006cbe:	ee18 3a10 	vmov	r3, s16
 8006cc2:	4652      	mov	r2, sl
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f43f af41 	beq.w	8006b52 <_printf_float+0xc2>
 8006cd0:	f04f 0800 	mov.w	r8, #0
 8006cd4:	f104 091a 	add.w	r9, r4, #26
 8006cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	dc09      	bgt.n	8006cf4 <_printf_float+0x264>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	079b      	lsls	r3, r3, #30
 8006ce4:	f100 8105 	bmi.w	8006ef2 <_printf_float+0x462>
 8006ce8:	68e0      	ldr	r0, [r4, #12]
 8006cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cec:	4298      	cmp	r0, r3
 8006cee:	bfb8      	it	lt
 8006cf0:	4618      	movlt	r0, r3
 8006cf2:	e730      	b.n	8006b56 <_printf_float+0xc6>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	464a      	mov	r2, r9
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f43f af27 	beq.w	8006b52 <_printf_float+0xc2>
 8006d04:	f108 0801 	add.w	r8, r8, #1
 8006d08:	e7e6      	b.n	8006cd8 <_printf_float+0x248>
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	dc39      	bgt.n	8006d84 <_printf_float+0x2f4>
 8006d10:	4a1b      	ldr	r2, [pc, #108]	; (8006d80 <_printf_float+0x2f0>)
 8006d12:	2301      	movs	r3, #1
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f af19 	beq.w	8006b52 <_printf_float+0xc2>
 8006d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d102      	bne.n	8006d2e <_printf_float+0x29e>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	d5d8      	bpl.n	8006ce0 <_printf_float+0x250>
 8006d2e:	ee18 3a10 	vmov	r3, s16
 8006d32:	4652      	mov	r2, sl
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af09 	beq.w	8006b52 <_printf_float+0xc2>
 8006d40:	f04f 0900 	mov.w	r9, #0
 8006d44:	f104 0a1a 	add.w	sl, r4, #26
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	454b      	cmp	r3, r9
 8006d4e:	dc01      	bgt.n	8006d54 <_printf_float+0x2c4>
 8006d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d52:	e792      	b.n	8006c7a <_printf_float+0x1ea>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4652      	mov	r2, sl
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f43f aef7 	beq.w	8006b52 <_printf_float+0xc2>
 8006d64:	f109 0901 	add.w	r9, r9, #1
 8006d68:	e7ee      	b.n	8006d48 <_printf_float+0x2b8>
 8006d6a:	bf00      	nop
 8006d6c:	7fefffff 	.word	0x7fefffff
 8006d70:	080095d0 	.word	0x080095d0
 8006d74:	080095d4 	.word	0x080095d4
 8006d78:	080095dc 	.word	0x080095dc
 8006d7c:	080095d8 	.word	0x080095d8
 8006d80:	080095e0 	.word	0x080095e0
 8006d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bfa8      	it	ge
 8006d8c:	461a      	movge	r2, r3
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	4691      	mov	r9, r2
 8006d92:	dc37      	bgt.n	8006e04 <_printf_float+0x374>
 8006d94:	f04f 0b00 	mov.w	fp, #0
 8006d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d9c:	f104 021a 	add.w	r2, r4, #26
 8006da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	eba3 0309 	sub.w	r3, r3, r9
 8006da8:	455b      	cmp	r3, fp
 8006daa:	dc33      	bgt.n	8006e14 <_printf_float+0x384>
 8006dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db0:	429a      	cmp	r2, r3
 8006db2:	db3b      	blt.n	8006e2c <_printf_float+0x39c>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	07da      	lsls	r2, r3, #31
 8006db8:	d438      	bmi.n	8006e2c <_printf_float+0x39c>
 8006dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbc:	9a05      	ldr	r2, [sp, #20]
 8006dbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dc0:	1a9a      	subs	r2, r3, r2
 8006dc2:	eba3 0901 	sub.w	r9, r3, r1
 8006dc6:	4591      	cmp	r9, r2
 8006dc8:	bfa8      	it	ge
 8006dca:	4691      	movge	r9, r2
 8006dcc:	f1b9 0f00 	cmp.w	r9, #0
 8006dd0:	dc35      	bgt.n	8006e3e <_printf_float+0x3ae>
 8006dd2:	f04f 0800 	mov.w	r8, #0
 8006dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dda:	f104 0a1a 	add.w	sl, r4, #26
 8006dde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	eba3 0309 	sub.w	r3, r3, r9
 8006de8:	4543      	cmp	r3, r8
 8006dea:	f77f af79 	ble.w	8006ce0 <_printf_float+0x250>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4652      	mov	r2, sl
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f aeaa 	beq.w	8006b52 <_printf_float+0xc2>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	e7ec      	b.n	8006dde <_printf_float+0x34e>
 8006e04:	4613      	mov	r3, r2
 8006e06:	4631      	mov	r1, r6
 8006e08:	4642      	mov	r2, r8
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d1c0      	bne.n	8006d94 <_printf_float+0x304>
 8006e12:	e69e      	b.n	8006b52 <_printf_float+0xc2>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4631      	mov	r1, r6
 8006e18:	4628      	mov	r0, r5
 8006e1a:	9205      	str	r2, [sp, #20]
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f ae97 	beq.w	8006b52 <_printf_float+0xc2>
 8006e24:	9a05      	ldr	r2, [sp, #20]
 8006e26:	f10b 0b01 	add.w	fp, fp, #1
 8006e2a:	e7b9      	b.n	8006da0 <_printf_float+0x310>
 8006e2c:	ee18 3a10 	vmov	r3, s16
 8006e30:	4652      	mov	r2, sl
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1be      	bne.n	8006dba <_printf_float+0x32a>
 8006e3c:	e689      	b.n	8006b52 <_printf_float+0xc2>
 8006e3e:	9a05      	ldr	r2, [sp, #20]
 8006e40:	464b      	mov	r3, r9
 8006e42:	4442      	add	r2, r8
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d1c1      	bne.n	8006dd2 <_printf_float+0x342>
 8006e4e:	e680      	b.n	8006b52 <_printf_float+0xc2>
 8006e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e52:	2a01      	cmp	r2, #1
 8006e54:	dc01      	bgt.n	8006e5a <_printf_float+0x3ca>
 8006e56:	07db      	lsls	r3, r3, #31
 8006e58:	d538      	bpl.n	8006ecc <_printf_float+0x43c>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae74 	beq.w	8006b52 <_printf_float+0xc2>
 8006e6a:	ee18 3a10 	vmov	r3, s16
 8006e6e:	4652      	mov	r2, sl
 8006e70:	4631      	mov	r1, r6
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f ae6b 	beq.w	8006b52 <_printf_float+0xc2>
 8006e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	f7f9 fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e88:	b9d8      	cbnz	r0, 8006ec2 <_printf_float+0x432>
 8006e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8c:	f108 0201 	add.w	r2, r8, #1
 8006e90:	3b01      	subs	r3, #1
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d10e      	bne.n	8006eba <_printf_float+0x42a>
 8006e9c:	e659      	b.n	8006b52 <_printf_float+0xc2>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f ae52 	beq.w	8006b52 <_printf_float+0xc2>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	4543      	cmp	r3, r8
 8006eb8:	dcf1      	bgt.n	8006e9e <_printf_float+0x40e>
 8006eba:	464b      	mov	r3, r9
 8006ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ec0:	e6dc      	b.n	8006c7c <_printf_float+0x1ec>
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	f104 0a1a 	add.w	sl, r4, #26
 8006eca:	e7f2      	b.n	8006eb2 <_printf_float+0x422>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4642      	mov	r2, r8
 8006ed0:	e7df      	b.n	8006e92 <_printf_float+0x402>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	464a      	mov	r2, r9
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f ae38 	beq.w	8006b52 <_printf_float+0xc2>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	68e3      	ldr	r3, [r4, #12]
 8006ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eea:	1a5b      	subs	r3, r3, r1
 8006eec:	4543      	cmp	r3, r8
 8006eee:	dcf0      	bgt.n	8006ed2 <_printf_float+0x442>
 8006ef0:	e6fa      	b.n	8006ce8 <_printf_float+0x258>
 8006ef2:	f04f 0800 	mov.w	r8, #0
 8006ef6:	f104 0919 	add.w	r9, r4, #25
 8006efa:	e7f4      	b.n	8006ee6 <_printf_float+0x456>

08006efc <_printf_common>:
 8006efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f00:	4616      	mov	r6, r2
 8006f02:	4699      	mov	r9, r3
 8006f04:	688a      	ldr	r2, [r1, #8]
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	bfb8      	it	lt
 8006f10:	4613      	movlt	r3, r2
 8006f12:	6033      	str	r3, [r6, #0]
 8006f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f18:	4607      	mov	r7, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	b10a      	cbz	r2, 8006f22 <_printf_common+0x26>
 8006f1e:	3301      	adds	r3, #1
 8006f20:	6033      	str	r3, [r6, #0]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	0699      	lsls	r1, r3, #26
 8006f26:	bf42      	ittt	mi
 8006f28:	6833      	ldrmi	r3, [r6, #0]
 8006f2a:	3302      	addmi	r3, #2
 8006f2c:	6033      	strmi	r3, [r6, #0]
 8006f2e:	6825      	ldr	r5, [r4, #0]
 8006f30:	f015 0506 	ands.w	r5, r5, #6
 8006f34:	d106      	bne.n	8006f44 <_printf_common+0x48>
 8006f36:	f104 0a19 	add.w	sl, r4, #25
 8006f3a:	68e3      	ldr	r3, [r4, #12]
 8006f3c:	6832      	ldr	r2, [r6, #0]
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	42ab      	cmp	r3, r5
 8006f42:	dc26      	bgt.n	8006f92 <_printf_common+0x96>
 8006f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f48:	1e13      	subs	r3, r2, #0
 8006f4a:	6822      	ldr	r2, [r4, #0]
 8006f4c:	bf18      	it	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	0692      	lsls	r2, r2, #26
 8006f52:	d42b      	bmi.n	8006fac <_printf_common+0xb0>
 8006f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f58:	4649      	mov	r1, r9
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	47c0      	blx	r8
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d01e      	beq.n	8006fa0 <_printf_common+0xa4>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	68e5      	ldr	r5, [r4, #12]
 8006f66:	6832      	ldr	r2, [r6, #0]
 8006f68:	f003 0306 	and.w	r3, r3, #6
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	bf08      	it	eq
 8006f70:	1aad      	subeq	r5, r5, r2
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	6922      	ldr	r2, [r4, #16]
 8006f76:	bf0c      	ite	eq
 8006f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f7c:	2500      	movne	r5, #0
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	bfc4      	itt	gt
 8006f82:	1a9b      	subgt	r3, r3, r2
 8006f84:	18ed      	addgt	r5, r5, r3
 8006f86:	2600      	movs	r6, #0
 8006f88:	341a      	adds	r4, #26
 8006f8a:	42b5      	cmp	r5, r6
 8006f8c:	d11a      	bne.n	8006fc4 <_printf_common+0xc8>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e008      	b.n	8006fa4 <_printf_common+0xa8>
 8006f92:	2301      	movs	r3, #1
 8006f94:	4652      	mov	r2, sl
 8006f96:	4649      	mov	r1, r9
 8006f98:	4638      	mov	r0, r7
 8006f9a:	47c0      	blx	r8
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d103      	bne.n	8006fa8 <_printf_common+0xac>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	3501      	adds	r5, #1
 8006faa:	e7c6      	b.n	8006f3a <_printf_common+0x3e>
 8006fac:	18e1      	adds	r1, r4, r3
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	2030      	movs	r0, #48	; 0x30
 8006fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fb6:	4422      	add	r2, r4
 8006fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	e7c7      	b.n	8006f54 <_printf_common+0x58>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4622      	mov	r2, r4
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4638      	mov	r0, r7
 8006fcc:	47c0      	blx	r8
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d0e6      	beq.n	8006fa0 <_printf_common+0xa4>
 8006fd2:	3601      	adds	r6, #1
 8006fd4:	e7d9      	b.n	8006f8a <_printf_common+0x8e>
	...

08006fd8 <_printf_i>:
 8006fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fdc:	7e0f      	ldrb	r7, [r1, #24]
 8006fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fe0:	2f78      	cmp	r7, #120	; 0x78
 8006fe2:	4691      	mov	r9, r2
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	469a      	mov	sl, r3
 8006fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fee:	d807      	bhi.n	8007000 <_printf_i+0x28>
 8006ff0:	2f62      	cmp	r7, #98	; 0x62
 8006ff2:	d80a      	bhi.n	800700a <_printf_i+0x32>
 8006ff4:	2f00      	cmp	r7, #0
 8006ff6:	f000 80d8 	beq.w	80071aa <_printf_i+0x1d2>
 8006ffa:	2f58      	cmp	r7, #88	; 0x58
 8006ffc:	f000 80a3 	beq.w	8007146 <_printf_i+0x16e>
 8007000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007008:	e03a      	b.n	8007080 <_printf_i+0xa8>
 800700a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800700e:	2b15      	cmp	r3, #21
 8007010:	d8f6      	bhi.n	8007000 <_printf_i+0x28>
 8007012:	a101      	add	r1, pc, #4	; (adr r1, 8007018 <_printf_i+0x40>)
 8007014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007018:	08007071 	.word	0x08007071
 800701c:	08007085 	.word	0x08007085
 8007020:	08007001 	.word	0x08007001
 8007024:	08007001 	.word	0x08007001
 8007028:	08007001 	.word	0x08007001
 800702c:	08007001 	.word	0x08007001
 8007030:	08007085 	.word	0x08007085
 8007034:	08007001 	.word	0x08007001
 8007038:	08007001 	.word	0x08007001
 800703c:	08007001 	.word	0x08007001
 8007040:	08007001 	.word	0x08007001
 8007044:	08007191 	.word	0x08007191
 8007048:	080070b5 	.word	0x080070b5
 800704c:	08007173 	.word	0x08007173
 8007050:	08007001 	.word	0x08007001
 8007054:	08007001 	.word	0x08007001
 8007058:	080071b3 	.word	0x080071b3
 800705c:	08007001 	.word	0x08007001
 8007060:	080070b5 	.word	0x080070b5
 8007064:	08007001 	.word	0x08007001
 8007068:	08007001 	.word	0x08007001
 800706c:	0800717b 	.word	0x0800717b
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	1d1a      	adds	r2, r3, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	602a      	str	r2, [r5, #0]
 8007078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800707c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007080:	2301      	movs	r3, #1
 8007082:	e0a3      	b.n	80071cc <_printf_i+0x1f4>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	6829      	ldr	r1, [r5, #0]
 8007088:	0606      	lsls	r6, r0, #24
 800708a:	f101 0304 	add.w	r3, r1, #4
 800708e:	d50a      	bpl.n	80070a6 <_printf_i+0xce>
 8007090:	680e      	ldr	r6, [r1, #0]
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	2e00      	cmp	r6, #0
 8007096:	da03      	bge.n	80070a0 <_printf_i+0xc8>
 8007098:	232d      	movs	r3, #45	; 0x2d
 800709a:	4276      	negs	r6, r6
 800709c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a0:	485e      	ldr	r0, [pc, #376]	; (800721c <_printf_i+0x244>)
 80070a2:	230a      	movs	r3, #10
 80070a4:	e019      	b.n	80070da <_printf_i+0x102>
 80070a6:	680e      	ldr	r6, [r1, #0]
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ae:	bf18      	it	ne
 80070b0:	b236      	sxthne	r6, r6
 80070b2:	e7ef      	b.n	8007094 <_printf_i+0xbc>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	6029      	str	r1, [r5, #0]
 80070bc:	0601      	lsls	r1, r0, #24
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0xec>
 80070c0:	681e      	ldr	r6, [r3, #0]
 80070c2:	e002      	b.n	80070ca <_printf_i+0xf2>
 80070c4:	0646      	lsls	r6, r0, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0xe8>
 80070c8:	881e      	ldrh	r6, [r3, #0]
 80070ca:	4854      	ldr	r0, [pc, #336]	; (800721c <_printf_i+0x244>)
 80070cc:	2f6f      	cmp	r7, #111	; 0x6f
 80070ce:	bf0c      	ite	eq
 80070d0:	2308      	moveq	r3, #8
 80070d2:	230a      	movne	r3, #10
 80070d4:	2100      	movs	r1, #0
 80070d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070da:	6865      	ldr	r5, [r4, #4]
 80070dc:	60a5      	str	r5, [r4, #8]
 80070de:	2d00      	cmp	r5, #0
 80070e0:	bfa2      	ittt	ge
 80070e2:	6821      	ldrge	r1, [r4, #0]
 80070e4:	f021 0104 	bicge.w	r1, r1, #4
 80070e8:	6021      	strge	r1, [r4, #0]
 80070ea:	b90e      	cbnz	r6, 80070f0 <_printf_i+0x118>
 80070ec:	2d00      	cmp	r5, #0
 80070ee:	d04d      	beq.n	800718c <_printf_i+0x1b4>
 80070f0:	4615      	mov	r5, r2
 80070f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070f6:	fb03 6711 	mls	r7, r3, r1, r6
 80070fa:	5dc7      	ldrb	r7, [r0, r7]
 80070fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007100:	4637      	mov	r7, r6
 8007102:	42bb      	cmp	r3, r7
 8007104:	460e      	mov	r6, r1
 8007106:	d9f4      	bls.n	80070f2 <_printf_i+0x11a>
 8007108:	2b08      	cmp	r3, #8
 800710a:	d10b      	bne.n	8007124 <_printf_i+0x14c>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	07de      	lsls	r6, r3, #31
 8007110:	d508      	bpl.n	8007124 <_printf_i+0x14c>
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	6861      	ldr	r1, [r4, #4]
 8007116:	4299      	cmp	r1, r3
 8007118:	bfde      	ittt	le
 800711a:	2330      	movle	r3, #48	; 0x30
 800711c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007120:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007124:	1b52      	subs	r2, r2, r5
 8007126:	6122      	str	r2, [r4, #16]
 8007128:	f8cd a000 	str.w	sl, [sp]
 800712c:	464b      	mov	r3, r9
 800712e:	aa03      	add	r2, sp, #12
 8007130:	4621      	mov	r1, r4
 8007132:	4640      	mov	r0, r8
 8007134:	f7ff fee2 	bl	8006efc <_printf_common>
 8007138:	3001      	adds	r0, #1
 800713a:	d14c      	bne.n	80071d6 <_printf_i+0x1fe>
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	b004      	add	sp, #16
 8007142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007146:	4835      	ldr	r0, [pc, #212]	; (800721c <_printf_i+0x244>)
 8007148:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800714c:	6829      	ldr	r1, [r5, #0]
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	f851 6b04 	ldr.w	r6, [r1], #4
 8007154:	6029      	str	r1, [r5, #0]
 8007156:	061d      	lsls	r5, r3, #24
 8007158:	d514      	bpl.n	8007184 <_printf_i+0x1ac>
 800715a:	07df      	lsls	r7, r3, #31
 800715c:	bf44      	itt	mi
 800715e:	f043 0320 	orrmi.w	r3, r3, #32
 8007162:	6023      	strmi	r3, [r4, #0]
 8007164:	b91e      	cbnz	r6, 800716e <_printf_i+0x196>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	f023 0320 	bic.w	r3, r3, #32
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	2310      	movs	r3, #16
 8007170:	e7b0      	b.n	80070d4 <_printf_i+0xfc>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	f043 0320 	orr.w	r3, r3, #32
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	2378      	movs	r3, #120	; 0x78
 800717c:	4828      	ldr	r0, [pc, #160]	; (8007220 <_printf_i+0x248>)
 800717e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007182:	e7e3      	b.n	800714c <_printf_i+0x174>
 8007184:	0659      	lsls	r1, r3, #25
 8007186:	bf48      	it	mi
 8007188:	b2b6      	uxthmi	r6, r6
 800718a:	e7e6      	b.n	800715a <_printf_i+0x182>
 800718c:	4615      	mov	r5, r2
 800718e:	e7bb      	b.n	8007108 <_printf_i+0x130>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	6826      	ldr	r6, [r4, #0]
 8007194:	6961      	ldr	r1, [r4, #20]
 8007196:	1d18      	adds	r0, r3, #4
 8007198:	6028      	str	r0, [r5, #0]
 800719a:	0635      	lsls	r5, r6, #24
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0x1cc>
 80071a0:	6019      	str	r1, [r3, #0]
 80071a2:	e002      	b.n	80071aa <_printf_i+0x1d2>
 80071a4:	0670      	lsls	r0, r6, #25
 80071a6:	d5fb      	bpl.n	80071a0 <_printf_i+0x1c8>
 80071a8:	8019      	strh	r1, [r3, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	4615      	mov	r5, r2
 80071b0:	e7ba      	b.n	8007128 <_printf_i+0x150>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	1d1a      	adds	r2, r3, #4
 80071b6:	602a      	str	r2, [r5, #0]
 80071b8:	681d      	ldr	r5, [r3, #0]
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	2100      	movs	r1, #0
 80071be:	4628      	mov	r0, r5
 80071c0:	f7f9 f816 	bl	80001f0 <memchr>
 80071c4:	b108      	cbz	r0, 80071ca <_printf_i+0x1f2>
 80071c6:	1b40      	subs	r0, r0, r5
 80071c8:	6060      	str	r0, [r4, #4]
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	2300      	movs	r3, #0
 80071d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d4:	e7a8      	b.n	8007128 <_printf_i+0x150>
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	462a      	mov	r2, r5
 80071da:	4649      	mov	r1, r9
 80071dc:	4640      	mov	r0, r8
 80071de:	47d0      	blx	sl
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0ab      	beq.n	800713c <_printf_i+0x164>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	079b      	lsls	r3, r3, #30
 80071e8:	d413      	bmi.n	8007212 <_printf_i+0x23a>
 80071ea:	68e0      	ldr	r0, [r4, #12]
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	4298      	cmp	r0, r3
 80071f0:	bfb8      	it	lt
 80071f2:	4618      	movlt	r0, r3
 80071f4:	e7a4      	b.n	8007140 <_printf_i+0x168>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4632      	mov	r2, r6
 80071fa:	4649      	mov	r1, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	47d0      	blx	sl
 8007200:	3001      	adds	r0, #1
 8007202:	d09b      	beq.n	800713c <_printf_i+0x164>
 8007204:	3501      	adds	r5, #1
 8007206:	68e3      	ldr	r3, [r4, #12]
 8007208:	9903      	ldr	r1, [sp, #12]
 800720a:	1a5b      	subs	r3, r3, r1
 800720c:	42ab      	cmp	r3, r5
 800720e:	dcf2      	bgt.n	80071f6 <_printf_i+0x21e>
 8007210:	e7eb      	b.n	80071ea <_printf_i+0x212>
 8007212:	2500      	movs	r5, #0
 8007214:	f104 0619 	add.w	r6, r4, #25
 8007218:	e7f5      	b.n	8007206 <_printf_i+0x22e>
 800721a:	bf00      	nop
 800721c:	080095e2 	.word	0x080095e2
 8007220:	080095f3 	.word	0x080095f3

08007224 <cleanup_glue>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	460c      	mov	r4, r1
 8007228:	6809      	ldr	r1, [r1, #0]
 800722a:	4605      	mov	r5, r0
 800722c:	b109      	cbz	r1, 8007232 <cleanup_glue+0xe>
 800722e:	f7ff fff9 	bl	8007224 <cleanup_glue>
 8007232:	4621      	mov	r1, r4
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800723a:	f001 bbf5 	b.w	8008a28 <_free_r>
	...

08007240 <_reclaim_reent>:
 8007240:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <_reclaim_reent+0xb4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4283      	cmp	r3, r0
 8007246:	b570      	push	{r4, r5, r6, lr}
 8007248:	4604      	mov	r4, r0
 800724a:	d051      	beq.n	80072f0 <_reclaim_reent+0xb0>
 800724c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800724e:	b143      	cbz	r3, 8007262 <_reclaim_reent+0x22>
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d14a      	bne.n	80072ec <_reclaim_reent+0xac>
 8007256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007258:	6819      	ldr	r1, [r3, #0]
 800725a:	b111      	cbz	r1, 8007262 <_reclaim_reent+0x22>
 800725c:	4620      	mov	r0, r4
 800725e:	f001 fbe3 	bl	8008a28 <_free_r>
 8007262:	6961      	ldr	r1, [r4, #20]
 8007264:	b111      	cbz	r1, 800726c <_reclaim_reent+0x2c>
 8007266:	4620      	mov	r0, r4
 8007268:	f001 fbde 	bl	8008a28 <_free_r>
 800726c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800726e:	b111      	cbz	r1, 8007276 <_reclaim_reent+0x36>
 8007270:	4620      	mov	r0, r4
 8007272:	f001 fbd9 	bl	8008a28 <_free_r>
 8007276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007278:	b111      	cbz	r1, 8007280 <_reclaim_reent+0x40>
 800727a:	4620      	mov	r0, r4
 800727c:	f001 fbd4 	bl	8008a28 <_free_r>
 8007280:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007282:	b111      	cbz	r1, 800728a <_reclaim_reent+0x4a>
 8007284:	4620      	mov	r0, r4
 8007286:	f001 fbcf 	bl	8008a28 <_free_r>
 800728a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800728c:	b111      	cbz	r1, 8007294 <_reclaim_reent+0x54>
 800728e:	4620      	mov	r0, r4
 8007290:	f001 fbca 	bl	8008a28 <_free_r>
 8007294:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007296:	b111      	cbz	r1, 800729e <_reclaim_reent+0x5e>
 8007298:	4620      	mov	r0, r4
 800729a:	f001 fbc5 	bl	8008a28 <_free_r>
 800729e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80072a0:	b111      	cbz	r1, 80072a8 <_reclaim_reent+0x68>
 80072a2:	4620      	mov	r0, r4
 80072a4:	f001 fbc0 	bl	8008a28 <_free_r>
 80072a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072aa:	b111      	cbz	r1, 80072b2 <_reclaim_reent+0x72>
 80072ac:	4620      	mov	r0, r4
 80072ae:	f001 fbbb 	bl	8008a28 <_free_r>
 80072b2:	69a3      	ldr	r3, [r4, #24]
 80072b4:	b1e3      	cbz	r3, 80072f0 <_reclaim_reent+0xb0>
 80072b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072b8:	4620      	mov	r0, r4
 80072ba:	4798      	blx	r3
 80072bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072be:	b1b9      	cbz	r1, 80072f0 <_reclaim_reent+0xb0>
 80072c0:	4620      	mov	r0, r4
 80072c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072c6:	f7ff bfad 	b.w	8007224 <cleanup_glue>
 80072ca:	5949      	ldr	r1, [r1, r5]
 80072cc:	b941      	cbnz	r1, 80072e0 <_reclaim_reent+0xa0>
 80072ce:	3504      	adds	r5, #4
 80072d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d2:	2d80      	cmp	r5, #128	; 0x80
 80072d4:	68d9      	ldr	r1, [r3, #12]
 80072d6:	d1f8      	bne.n	80072ca <_reclaim_reent+0x8a>
 80072d8:	4620      	mov	r0, r4
 80072da:	f001 fba5 	bl	8008a28 <_free_r>
 80072de:	e7ba      	b.n	8007256 <_reclaim_reent+0x16>
 80072e0:	680e      	ldr	r6, [r1, #0]
 80072e2:	4620      	mov	r0, r4
 80072e4:	f001 fba0 	bl	8008a28 <_free_r>
 80072e8:	4631      	mov	r1, r6
 80072ea:	e7ef      	b.n	80072cc <_reclaim_reent+0x8c>
 80072ec:	2500      	movs	r5, #0
 80072ee:	e7ef      	b.n	80072d0 <_reclaim_reent+0x90>
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	bf00      	nop
 80072f4:	20000024 	.word	0x20000024

080072f8 <_sbrk_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4d06      	ldr	r5, [pc, #24]	; (8007314 <_sbrk_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4604      	mov	r4, r0
 8007300:	4608      	mov	r0, r1
 8007302:	602b      	str	r3, [r5, #0]
 8007304:	f002 f8d6 	bl	80094b4 <_sbrk>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_sbrk_r+0x1a>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_sbrk_r+0x1a>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20004384 	.word	0x20004384

08007318 <siprintf>:
 8007318:	b40e      	push	{r1, r2, r3}
 800731a:	b500      	push	{lr}
 800731c:	b09c      	sub	sp, #112	; 0x70
 800731e:	ab1d      	add	r3, sp, #116	; 0x74
 8007320:	9002      	str	r0, [sp, #8]
 8007322:	9006      	str	r0, [sp, #24]
 8007324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <siprintf+0x38>)
 800732a:	9107      	str	r1, [sp, #28]
 800732c:	9104      	str	r1, [sp, #16]
 800732e:	4909      	ldr	r1, [pc, #36]	; (8007354 <siprintf+0x3c>)
 8007330:	f853 2b04 	ldr.w	r2, [r3], #4
 8007334:	9105      	str	r1, [sp, #20]
 8007336:	6800      	ldr	r0, [r0, #0]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	a902      	add	r1, sp, #8
 800733c:	f001 fc1c 	bl	8008b78 <_svfiprintf_r>
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	b01c      	add	sp, #112	; 0x70
 8007348:	f85d eb04 	ldr.w	lr, [sp], #4
 800734c:	b003      	add	sp, #12
 800734e:	4770      	bx	lr
 8007350:	20000024 	.word	0x20000024
 8007354:	ffff0208 	.word	0xffff0208

08007358 <__sread>:
 8007358:	b510      	push	{r4, lr}
 800735a:	460c      	mov	r4, r1
 800735c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007360:	f001 fd0a 	bl	8008d78 <_read_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	bfab      	itete	ge
 8007368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800736a:	89a3      	ldrhlt	r3, [r4, #12]
 800736c:	181b      	addge	r3, r3, r0
 800736e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007372:	bfac      	ite	ge
 8007374:	6563      	strge	r3, [r4, #84]	; 0x54
 8007376:	81a3      	strhlt	r3, [r4, #12]
 8007378:	bd10      	pop	{r4, pc}

0800737a <__swrite>:
 800737a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800737e:	461f      	mov	r7, r3
 8007380:	898b      	ldrh	r3, [r1, #12]
 8007382:	05db      	lsls	r3, r3, #23
 8007384:	4605      	mov	r5, r0
 8007386:	460c      	mov	r4, r1
 8007388:	4616      	mov	r6, r2
 800738a:	d505      	bpl.n	8007398 <__swrite+0x1e>
 800738c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007390:	2302      	movs	r3, #2
 8007392:	2200      	movs	r2, #0
 8007394:	f000 ff88 	bl	80082a8 <_lseek_r>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800739e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	4632      	mov	r2, r6
 80073a6:	463b      	mov	r3, r7
 80073a8:	4628      	mov	r0, r5
 80073aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	f000 b817 	b.w	80073e0 <_write_r>

080073b2 <__sseek>:
 80073b2:	b510      	push	{r4, lr}
 80073b4:	460c      	mov	r4, r1
 80073b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ba:	f000 ff75 	bl	80082a8 <_lseek_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	bf15      	itete	ne
 80073c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ce:	81a3      	strheq	r3, [r4, #12]
 80073d0:	bf18      	it	ne
 80073d2:	81a3      	strhne	r3, [r4, #12]
 80073d4:	bd10      	pop	{r4, pc}

080073d6 <__sclose>:
 80073d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073da:	f000 b813 	b.w	8007404 <_close_r>
	...

080073e0 <_write_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d07      	ldr	r5, [pc, #28]	; (8007400 <_write_r+0x20>)
 80073e4:	4604      	mov	r4, r0
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	2200      	movs	r2, #0
 80073ec:	602a      	str	r2, [r5, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f7fa fd65 	bl	8001ebe <_write>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_write_r+0x1e>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_write_r+0x1e>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	20004384 	.word	0x20004384

08007404 <_close_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d06      	ldr	r5, [pc, #24]	; (8007420 <_close_r+0x1c>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	f7fa fd71 	bl	8001ef6 <_close>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_close_r+0x1a>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_close_r+0x1a>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20004384 	.word	0x20004384

08007424 <quorem>:
 8007424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	6903      	ldr	r3, [r0, #16]
 800742a:	690c      	ldr	r4, [r1, #16]
 800742c:	42a3      	cmp	r3, r4
 800742e:	4607      	mov	r7, r0
 8007430:	f2c0 8081 	blt.w	8007536 <quorem+0x112>
 8007434:	3c01      	subs	r4, #1
 8007436:	f101 0814 	add.w	r8, r1, #20
 800743a:	f100 0514 	add.w	r5, r0, #20
 800743e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800744c:	3301      	adds	r3, #1
 800744e:	429a      	cmp	r2, r3
 8007450:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007458:	fbb2 f6f3 	udiv	r6, r2, r3
 800745c:	d331      	bcc.n	80074c2 <quorem+0x9e>
 800745e:	f04f 0e00 	mov.w	lr, #0
 8007462:	4640      	mov	r0, r8
 8007464:	46ac      	mov	ip, r5
 8007466:	46f2      	mov	sl, lr
 8007468:	f850 2b04 	ldr.w	r2, [r0], #4
 800746c:	b293      	uxth	r3, r2
 800746e:	fb06 e303 	mla	r3, r6, r3, lr
 8007472:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007476:	b29b      	uxth	r3, r3
 8007478:	ebaa 0303 	sub.w	r3, sl, r3
 800747c:	f8dc a000 	ldr.w	sl, [ip]
 8007480:	0c12      	lsrs	r2, r2, #16
 8007482:	fa13 f38a 	uxtah	r3, r3, sl
 8007486:	fb06 e202 	mla	r2, r6, r2, lr
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	9b00      	ldr	r3, [sp, #0]
 800748e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007492:	b292      	uxth	r2, r2
 8007494:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800749c:	f8bd 3000 	ldrh.w	r3, [sp]
 80074a0:	4581      	cmp	r9, r0
 80074a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a6:	f84c 3b04 	str.w	r3, [ip], #4
 80074aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074ae:	d2db      	bcs.n	8007468 <quorem+0x44>
 80074b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80074b4:	b92b      	cbnz	r3, 80074c2 <quorem+0x9e>
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	429d      	cmp	r5, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	d32e      	bcc.n	800751e <quorem+0xfa>
 80074c0:	613c      	str	r4, [r7, #16]
 80074c2:	4638      	mov	r0, r7
 80074c4:	f001 f998 	bl	80087f8 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	db24      	blt.n	8007516 <quorem+0xf2>
 80074cc:	3601      	adds	r6, #1
 80074ce:	4628      	mov	r0, r5
 80074d0:	f04f 0c00 	mov.w	ip, #0
 80074d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80074d8:	f8d0 e000 	ldr.w	lr, [r0]
 80074dc:	b293      	uxth	r3, r2
 80074de:	ebac 0303 	sub.w	r3, ip, r3
 80074e2:	0c12      	lsrs	r2, r2, #16
 80074e4:	fa13 f38e 	uxtah	r3, r3, lr
 80074e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074f6:	45c1      	cmp	r9, r8
 80074f8:	f840 3b04 	str.w	r3, [r0], #4
 80074fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007500:	d2e8      	bcs.n	80074d4 <quorem+0xb0>
 8007502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800750a:	b922      	cbnz	r2, 8007516 <quorem+0xf2>
 800750c:	3b04      	subs	r3, #4
 800750e:	429d      	cmp	r5, r3
 8007510:	461a      	mov	r2, r3
 8007512:	d30a      	bcc.n	800752a <quorem+0x106>
 8007514:	613c      	str	r4, [r7, #16]
 8007516:	4630      	mov	r0, r6
 8007518:	b003      	add	sp, #12
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	3b04      	subs	r3, #4
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1cc      	bne.n	80074c0 <quorem+0x9c>
 8007526:	3c01      	subs	r4, #1
 8007528:	e7c7      	b.n	80074ba <quorem+0x96>
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	3b04      	subs	r3, #4
 800752e:	2a00      	cmp	r2, #0
 8007530:	d1f0      	bne.n	8007514 <quorem+0xf0>
 8007532:	3c01      	subs	r4, #1
 8007534:	e7eb      	b.n	800750e <quorem+0xea>
 8007536:	2000      	movs	r0, #0
 8007538:	e7ee      	b.n	8007518 <quorem+0xf4>
 800753a:	0000      	movs	r0, r0
 800753c:	0000      	movs	r0, r0
	...

08007540 <_dtoa_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ed2d 8b04 	vpush	{d8-d9}
 8007548:	ec57 6b10 	vmov	r6, r7, d0
 800754c:	b093      	sub	sp, #76	; 0x4c
 800754e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007550:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007554:	9106      	str	r1, [sp, #24]
 8007556:	ee10 aa10 	vmov	sl, s0
 800755a:	4604      	mov	r4, r0
 800755c:	9209      	str	r2, [sp, #36]	; 0x24
 800755e:	930c      	str	r3, [sp, #48]	; 0x30
 8007560:	46bb      	mov	fp, r7
 8007562:	b975      	cbnz	r5, 8007582 <_dtoa_r+0x42>
 8007564:	2010      	movs	r0, #16
 8007566:	f000 feb1 	bl	80082cc <malloc>
 800756a:	4602      	mov	r2, r0
 800756c:	6260      	str	r0, [r4, #36]	; 0x24
 800756e:	b920      	cbnz	r0, 800757a <_dtoa_r+0x3a>
 8007570:	4ba7      	ldr	r3, [pc, #668]	; (8007810 <_dtoa_r+0x2d0>)
 8007572:	21ea      	movs	r1, #234	; 0xea
 8007574:	48a7      	ldr	r0, [pc, #668]	; (8007814 <_dtoa_r+0x2d4>)
 8007576:	f001 fc11 	bl	8008d9c <__assert_func>
 800757a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800757e:	6005      	str	r5, [r0, #0]
 8007580:	60c5      	str	r5, [r0, #12]
 8007582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007584:	6819      	ldr	r1, [r3, #0]
 8007586:	b151      	cbz	r1, 800759e <_dtoa_r+0x5e>
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	604a      	str	r2, [r1, #4]
 800758c:	2301      	movs	r3, #1
 800758e:	4093      	lsls	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
 8007592:	4620      	mov	r0, r4
 8007594:	f000 feee 	bl	8008374 <_Bfree>
 8007598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	1e3b      	subs	r3, r7, #0
 80075a0:	bfaa      	itet	ge
 80075a2:	2300      	movge	r3, #0
 80075a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80075a8:	f8c8 3000 	strge.w	r3, [r8]
 80075ac:	4b9a      	ldr	r3, [pc, #616]	; (8007818 <_dtoa_r+0x2d8>)
 80075ae:	bfbc      	itt	lt
 80075b0:	2201      	movlt	r2, #1
 80075b2:	f8c8 2000 	strlt.w	r2, [r8]
 80075b6:	ea33 030b 	bics.w	r3, r3, fp
 80075ba:	d11b      	bne.n	80075f4 <_dtoa_r+0xb4>
 80075bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075be:	f242 730f 	movw	r3, #9999	; 0x270f
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075c8:	4333      	orrs	r3, r6
 80075ca:	f000 8592 	beq.w	80080f2 <_dtoa_r+0xbb2>
 80075ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d0:	b963      	cbnz	r3, 80075ec <_dtoa_r+0xac>
 80075d2:	4b92      	ldr	r3, [pc, #584]	; (800781c <_dtoa_r+0x2dc>)
 80075d4:	e022      	b.n	800761c <_dtoa_r+0xdc>
 80075d6:	4b92      	ldr	r3, [pc, #584]	; (8007820 <_dtoa_r+0x2e0>)
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	3308      	adds	r3, #8
 80075dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	9801      	ldr	r0, [sp, #4]
 80075e2:	b013      	add	sp, #76	; 0x4c
 80075e4:	ecbd 8b04 	vpop	{d8-d9}
 80075e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	4b8b      	ldr	r3, [pc, #556]	; (800781c <_dtoa_r+0x2dc>)
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	3303      	adds	r3, #3
 80075f2:	e7f3      	b.n	80075dc <_dtoa_r+0x9c>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4650      	mov	r0, sl
 80075fa:	4659      	mov	r1, fp
 80075fc:	f7f9 fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007600:	ec4b ab19 	vmov	d9, sl, fp
 8007604:	4680      	mov	r8, r0
 8007606:	b158      	cbz	r0, 8007620 <_dtoa_r+0xe0>
 8007608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800760a:	2301      	movs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 856b 	beq.w	80080ec <_dtoa_r+0xbac>
 8007616:	4883      	ldr	r0, [pc, #524]	; (8007824 <_dtoa_r+0x2e4>)
 8007618:	6018      	str	r0, [r3, #0]
 800761a:	1e43      	subs	r3, r0, #1
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	e7df      	b.n	80075e0 <_dtoa_r+0xa0>
 8007620:	ec4b ab10 	vmov	d0, sl, fp
 8007624:	aa10      	add	r2, sp, #64	; 0x40
 8007626:	a911      	add	r1, sp, #68	; 0x44
 8007628:	4620      	mov	r0, r4
 800762a:	f001 f98b 	bl	8008944 <__d2b>
 800762e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007632:	ee08 0a10 	vmov	s16, r0
 8007636:	2d00      	cmp	r5, #0
 8007638:	f000 8084 	beq.w	8007744 <_dtoa_r+0x204>
 800763c:	ee19 3a90 	vmov	r3, s19
 8007640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007644:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007648:	4656      	mov	r6, sl
 800764a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800764e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007652:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007656:	4b74      	ldr	r3, [pc, #464]	; (8007828 <_dtoa_r+0x2e8>)
 8007658:	2200      	movs	r2, #0
 800765a:	4630      	mov	r0, r6
 800765c:	4639      	mov	r1, r7
 800765e:	f7f8 fe1b 	bl	8000298 <__aeabi_dsub>
 8007662:	a365      	add	r3, pc, #404	; (adr r3, 80077f8 <_dtoa_r+0x2b8>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 ffce 	bl	8000608 <__aeabi_dmul>
 800766c:	a364      	add	r3, pc, #400	; (adr r3, 8007800 <_dtoa_r+0x2c0>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 fe13 	bl	800029c <__adddf3>
 8007676:	4606      	mov	r6, r0
 8007678:	4628      	mov	r0, r5
 800767a:	460f      	mov	r7, r1
 800767c:	f7f8 ff5a 	bl	8000534 <__aeabi_i2d>
 8007680:	a361      	add	r3, pc, #388	; (adr r3, 8007808 <_dtoa_r+0x2c8>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 ffbf 	bl	8000608 <__aeabi_dmul>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4630      	mov	r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	f7f8 fe03 	bl	800029c <__adddf3>
 8007696:	4606      	mov	r6, r0
 8007698:	460f      	mov	r7, r1
 800769a:	f7f9 fa65 	bl	8000b68 <__aeabi_d2iz>
 800769e:	2200      	movs	r2, #0
 80076a0:	9000      	str	r0, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	f7f9 fa20 	bl	8000aec <__aeabi_dcmplt>
 80076ac:	b150      	cbz	r0, 80076c4 <_dtoa_r+0x184>
 80076ae:	9800      	ldr	r0, [sp, #0]
 80076b0:	f7f8 ff40 	bl	8000534 <__aeabi_i2d>
 80076b4:	4632      	mov	r2, r6
 80076b6:	463b      	mov	r3, r7
 80076b8:	f7f9 fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80076bc:	b910      	cbnz	r0, 80076c4 <_dtoa_r+0x184>
 80076be:	9b00      	ldr	r3, [sp, #0]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	2b16      	cmp	r3, #22
 80076c8:	d85a      	bhi.n	8007780 <_dtoa_r+0x240>
 80076ca:	9a00      	ldr	r2, [sp, #0]
 80076cc:	4b57      	ldr	r3, [pc, #348]	; (800782c <_dtoa_r+0x2ec>)
 80076ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	ec51 0b19 	vmov	r0, r1, d9
 80076da:	f7f9 fa07 	bl	8000aec <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d050      	beq.n	8007784 <_dtoa_r+0x244>
 80076e2:	9b00      	ldr	r3, [sp, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2300      	movs	r3, #0
 80076ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076ee:	1b5d      	subs	r5, r3, r5
 80076f0:	1e6b      	subs	r3, r5, #1
 80076f2:	9305      	str	r3, [sp, #20]
 80076f4:	bf45      	ittet	mi
 80076f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80076fa:	9304      	strmi	r3, [sp, #16]
 80076fc:	2300      	movpl	r3, #0
 80076fe:	2300      	movmi	r3, #0
 8007700:	bf4c      	ite	mi
 8007702:	9305      	strmi	r3, [sp, #20]
 8007704:	9304      	strpl	r3, [sp, #16]
 8007706:	9b00      	ldr	r3, [sp, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	db3d      	blt.n	8007788 <_dtoa_r+0x248>
 800770c:	9b05      	ldr	r3, [sp, #20]
 800770e:	9a00      	ldr	r2, [sp, #0]
 8007710:	920a      	str	r2, [sp, #40]	; 0x28
 8007712:	4413      	add	r3, r2
 8007714:	9305      	str	r3, [sp, #20]
 8007716:	2300      	movs	r3, #0
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	2b09      	cmp	r3, #9
 800771e:	f200 8089 	bhi.w	8007834 <_dtoa_r+0x2f4>
 8007722:	2b05      	cmp	r3, #5
 8007724:	bfc4      	itt	gt
 8007726:	3b04      	subgt	r3, #4
 8007728:	9306      	strgt	r3, [sp, #24]
 800772a:	9b06      	ldr	r3, [sp, #24]
 800772c:	f1a3 0302 	sub.w	r3, r3, #2
 8007730:	bfcc      	ite	gt
 8007732:	2500      	movgt	r5, #0
 8007734:	2501      	movle	r5, #1
 8007736:	2b03      	cmp	r3, #3
 8007738:	f200 8087 	bhi.w	800784a <_dtoa_r+0x30a>
 800773c:	e8df f003 	tbb	[pc, r3]
 8007740:	59383a2d 	.word	0x59383a2d
 8007744:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007748:	441d      	add	r5, r3
 800774a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800774e:	2b20      	cmp	r3, #32
 8007750:	bfc1      	itttt	gt
 8007752:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007756:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800775a:	fa0b f303 	lslgt.w	r3, fp, r3
 800775e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007762:	bfda      	itte	le
 8007764:	f1c3 0320 	rsble	r3, r3, #32
 8007768:	fa06 f003 	lslle.w	r0, r6, r3
 800776c:	4318      	orrgt	r0, r3
 800776e:	f7f8 fed1 	bl	8000514 <__aeabi_ui2d>
 8007772:	2301      	movs	r3, #1
 8007774:	4606      	mov	r6, r0
 8007776:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800777a:	3d01      	subs	r5, #1
 800777c:	930e      	str	r3, [sp, #56]	; 0x38
 800777e:	e76a      	b.n	8007656 <_dtoa_r+0x116>
 8007780:	2301      	movs	r3, #1
 8007782:	e7b2      	b.n	80076ea <_dtoa_r+0x1aa>
 8007784:	900b      	str	r0, [sp, #44]	; 0x2c
 8007786:	e7b1      	b.n	80076ec <_dtoa_r+0x1ac>
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	9a00      	ldr	r2, [sp, #0]
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	4253      	negs	r3, r2
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	2300      	movs	r3, #0
 8007796:	930a      	str	r3, [sp, #40]	; 0x28
 8007798:	e7bf      	b.n	800771a <_dtoa_r+0x1da>
 800779a:	2300      	movs	r3, #0
 800779c:	9308      	str	r3, [sp, #32]
 800779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	dc55      	bgt.n	8007850 <_dtoa_r+0x310>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077aa:	461a      	mov	r2, r3
 80077ac:	9209      	str	r2, [sp, #36]	; 0x24
 80077ae:	e00c      	b.n	80077ca <_dtoa_r+0x28a>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7f3      	b.n	800779c <_dtoa_r+0x25c>
 80077b4:	2300      	movs	r3, #0
 80077b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b8:	9308      	str	r3, [sp, #32]
 80077ba:	9b00      	ldr	r3, [sp, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	9302      	str	r3, [sp, #8]
 80077c0:	3301      	adds	r3, #1
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	9303      	str	r3, [sp, #12]
 80077c6:	bfb8      	it	lt
 80077c8:	2301      	movlt	r3, #1
 80077ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077cc:	2200      	movs	r2, #0
 80077ce:	6042      	str	r2, [r0, #4]
 80077d0:	2204      	movs	r2, #4
 80077d2:	f102 0614 	add.w	r6, r2, #20
 80077d6:	429e      	cmp	r6, r3
 80077d8:	6841      	ldr	r1, [r0, #4]
 80077da:	d93d      	bls.n	8007858 <_dtoa_r+0x318>
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fd89 	bl	80082f4 <_Balloc>
 80077e2:	9001      	str	r0, [sp, #4]
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d13b      	bne.n	8007860 <_dtoa_r+0x320>
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <_dtoa_r+0x2f0>)
 80077ea:	4602      	mov	r2, r0
 80077ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077f0:	e6c0      	b.n	8007574 <_dtoa_r+0x34>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e7df      	b.n	80077b6 <_dtoa_r+0x276>
 80077f6:	bf00      	nop
 80077f8:	636f4361 	.word	0x636f4361
 80077fc:	3fd287a7 	.word	0x3fd287a7
 8007800:	8b60c8b3 	.word	0x8b60c8b3
 8007804:	3fc68a28 	.word	0x3fc68a28
 8007808:	509f79fb 	.word	0x509f79fb
 800780c:	3fd34413 	.word	0x3fd34413
 8007810:	08009611 	.word	0x08009611
 8007814:	08009628 	.word	0x08009628
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	0800960d 	.word	0x0800960d
 8007820:	08009604 	.word	0x08009604
 8007824:	080095e1 	.word	0x080095e1
 8007828:	3ff80000 	.word	0x3ff80000
 800782c:	08009718 	.word	0x08009718
 8007830:	08009683 	.word	0x08009683
 8007834:	2501      	movs	r5, #1
 8007836:	2300      	movs	r3, #0
 8007838:	9306      	str	r3, [sp, #24]
 800783a:	9508      	str	r5, [sp, #32]
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
 8007840:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	2312      	movs	r3, #18
 8007848:	e7b0      	b.n	80077ac <_dtoa_r+0x26c>
 800784a:	2301      	movs	r3, #1
 800784c:	9308      	str	r3, [sp, #32]
 800784e:	e7f5      	b.n	800783c <_dtoa_r+0x2fc>
 8007850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007852:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007856:	e7b8      	b.n	80077ca <_dtoa_r+0x28a>
 8007858:	3101      	adds	r1, #1
 800785a:	6041      	str	r1, [r0, #4]
 800785c:	0052      	lsls	r2, r2, #1
 800785e:	e7b8      	b.n	80077d2 <_dtoa_r+0x292>
 8007860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007862:	9a01      	ldr	r2, [sp, #4]
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	2b0e      	cmp	r3, #14
 800786a:	f200 809d 	bhi.w	80079a8 <_dtoa_r+0x468>
 800786e:	2d00      	cmp	r5, #0
 8007870:	f000 809a 	beq.w	80079a8 <_dtoa_r+0x468>
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	dd32      	ble.n	80078e0 <_dtoa_r+0x3a0>
 800787a:	4ab7      	ldr	r2, [pc, #732]	; (8007b58 <_dtoa_r+0x618>)
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007884:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007888:	9b00      	ldr	r3, [sp, #0]
 800788a:	05d8      	lsls	r0, r3, #23
 800788c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007890:	d516      	bpl.n	80078c0 <_dtoa_r+0x380>
 8007892:	4bb2      	ldr	r3, [pc, #712]	; (8007b5c <_dtoa_r+0x61c>)
 8007894:	ec51 0b19 	vmov	r0, r1, d9
 8007898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800789c:	f7f8 ffde 	bl	800085c <__aeabi_ddiv>
 80078a0:	f007 070f 	and.w	r7, r7, #15
 80078a4:	4682      	mov	sl, r0
 80078a6:	468b      	mov	fp, r1
 80078a8:	2503      	movs	r5, #3
 80078aa:	4eac      	ldr	r6, [pc, #688]	; (8007b5c <_dtoa_r+0x61c>)
 80078ac:	b957      	cbnz	r7, 80078c4 <_dtoa_r+0x384>
 80078ae:	4642      	mov	r2, r8
 80078b0:	464b      	mov	r3, r9
 80078b2:	4650      	mov	r0, sl
 80078b4:	4659      	mov	r1, fp
 80078b6:	f7f8 ffd1 	bl	800085c <__aeabi_ddiv>
 80078ba:	4682      	mov	sl, r0
 80078bc:	468b      	mov	fp, r1
 80078be:	e028      	b.n	8007912 <_dtoa_r+0x3d2>
 80078c0:	2502      	movs	r5, #2
 80078c2:	e7f2      	b.n	80078aa <_dtoa_r+0x36a>
 80078c4:	07f9      	lsls	r1, r7, #31
 80078c6:	d508      	bpl.n	80078da <_dtoa_r+0x39a>
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078d0:	f7f8 fe9a 	bl	8000608 <__aeabi_dmul>
 80078d4:	3501      	adds	r5, #1
 80078d6:	4680      	mov	r8, r0
 80078d8:	4689      	mov	r9, r1
 80078da:	107f      	asrs	r7, r7, #1
 80078dc:	3608      	adds	r6, #8
 80078de:	e7e5      	b.n	80078ac <_dtoa_r+0x36c>
 80078e0:	f000 809b 	beq.w	8007a1a <_dtoa_r+0x4da>
 80078e4:	9b00      	ldr	r3, [sp, #0]
 80078e6:	4f9d      	ldr	r7, [pc, #628]	; (8007b5c <_dtoa_r+0x61c>)
 80078e8:	425e      	negs	r6, r3
 80078ea:	4b9b      	ldr	r3, [pc, #620]	; (8007b58 <_dtoa_r+0x618>)
 80078ec:	f006 020f 	and.w	r2, r6, #15
 80078f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	ec51 0b19 	vmov	r0, r1, d9
 80078fc:	f7f8 fe84 	bl	8000608 <__aeabi_dmul>
 8007900:	1136      	asrs	r6, r6, #4
 8007902:	4682      	mov	sl, r0
 8007904:	468b      	mov	fp, r1
 8007906:	2300      	movs	r3, #0
 8007908:	2502      	movs	r5, #2
 800790a:	2e00      	cmp	r6, #0
 800790c:	d17a      	bne.n	8007a04 <_dtoa_r+0x4c4>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1d3      	bne.n	80078ba <_dtoa_r+0x37a>
 8007912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8082 	beq.w	8007a1e <_dtoa_r+0x4de>
 800791a:	4b91      	ldr	r3, [pc, #580]	; (8007b60 <_dtoa_r+0x620>)
 800791c:	2200      	movs	r2, #0
 800791e:	4650      	mov	r0, sl
 8007920:	4659      	mov	r1, fp
 8007922:	f7f9 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	d079      	beq.n	8007a1e <_dtoa_r+0x4de>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d076      	beq.n	8007a1e <_dtoa_r+0x4de>
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd36      	ble.n	80079a4 <_dtoa_r+0x464>
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	4650      	mov	r0, sl
 800793a:	4659      	mov	r1, fp
 800793c:	1e5f      	subs	r7, r3, #1
 800793e:	2200      	movs	r2, #0
 8007940:	4b88      	ldr	r3, [pc, #544]	; (8007b64 <_dtoa_r+0x624>)
 8007942:	f7f8 fe61 	bl	8000608 <__aeabi_dmul>
 8007946:	9e02      	ldr	r6, [sp, #8]
 8007948:	4682      	mov	sl, r0
 800794a:	468b      	mov	fp, r1
 800794c:	3501      	adds	r5, #1
 800794e:	4628      	mov	r0, r5
 8007950:	f7f8 fdf0 	bl	8000534 <__aeabi_i2d>
 8007954:	4652      	mov	r2, sl
 8007956:	465b      	mov	r3, fp
 8007958:	f7f8 fe56 	bl	8000608 <__aeabi_dmul>
 800795c:	4b82      	ldr	r3, [pc, #520]	; (8007b68 <_dtoa_r+0x628>)
 800795e:	2200      	movs	r2, #0
 8007960:	f7f8 fc9c 	bl	800029c <__adddf3>
 8007964:	46d0      	mov	r8, sl
 8007966:	46d9      	mov	r9, fp
 8007968:	4682      	mov	sl, r0
 800796a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800796e:	2e00      	cmp	r6, #0
 8007970:	d158      	bne.n	8007a24 <_dtoa_r+0x4e4>
 8007972:	4b7e      	ldr	r3, [pc, #504]	; (8007b6c <_dtoa_r+0x62c>)
 8007974:	2200      	movs	r2, #0
 8007976:	4640      	mov	r0, r8
 8007978:	4649      	mov	r1, r9
 800797a:	f7f8 fc8d 	bl	8000298 <__aeabi_dsub>
 800797e:	4652      	mov	r2, sl
 8007980:	465b      	mov	r3, fp
 8007982:	4680      	mov	r8, r0
 8007984:	4689      	mov	r9, r1
 8007986:	f7f9 f8cf 	bl	8000b28 <__aeabi_dcmpgt>
 800798a:	2800      	cmp	r0, #0
 800798c:	f040 8295 	bne.w	8007eba <_dtoa_r+0x97a>
 8007990:	4652      	mov	r2, sl
 8007992:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f9 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	f040 8289 	bne.w	8007eb6 <_dtoa_r+0x976>
 80079a4:	ec5b ab19 	vmov	sl, fp, d9
 80079a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f2c0 8148 	blt.w	8007c40 <_dtoa_r+0x700>
 80079b0:	9a00      	ldr	r2, [sp, #0]
 80079b2:	2a0e      	cmp	r2, #14
 80079b4:	f300 8144 	bgt.w	8007c40 <_dtoa_r+0x700>
 80079b8:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <_dtoa_r+0x618>)
 80079ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f280 80d5 	bge.w	8007b74 <_dtoa_r+0x634>
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f300 80d1 	bgt.w	8007b74 <_dtoa_r+0x634>
 80079d2:	f040 826f 	bne.w	8007eb4 <_dtoa_r+0x974>
 80079d6:	4b65      	ldr	r3, [pc, #404]	; (8007b6c <_dtoa_r+0x62c>)
 80079d8:	2200      	movs	r2, #0
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f8 fe13 	bl	8000608 <__aeabi_dmul>
 80079e2:	4652      	mov	r2, sl
 80079e4:	465b      	mov	r3, fp
 80079e6:	f7f9 f895 	bl	8000b14 <__aeabi_dcmpge>
 80079ea:	9e03      	ldr	r6, [sp, #12]
 80079ec:	4637      	mov	r7, r6
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f040 8245 	bne.w	8007e7e <_dtoa_r+0x93e>
 80079f4:	9d01      	ldr	r5, [sp, #4]
 80079f6:	2331      	movs	r3, #49	; 0x31
 80079f8:	f805 3b01 	strb.w	r3, [r5], #1
 80079fc:	9b00      	ldr	r3, [sp, #0]
 80079fe:	3301      	adds	r3, #1
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	e240      	b.n	8007e86 <_dtoa_r+0x946>
 8007a04:	07f2      	lsls	r2, r6, #31
 8007a06:	d505      	bpl.n	8007a14 <_dtoa_r+0x4d4>
 8007a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0c:	f7f8 fdfc 	bl	8000608 <__aeabi_dmul>
 8007a10:	3501      	adds	r5, #1
 8007a12:	2301      	movs	r3, #1
 8007a14:	1076      	asrs	r6, r6, #1
 8007a16:	3708      	adds	r7, #8
 8007a18:	e777      	b.n	800790a <_dtoa_r+0x3ca>
 8007a1a:	2502      	movs	r5, #2
 8007a1c:	e779      	b.n	8007912 <_dtoa_r+0x3d2>
 8007a1e:	9f00      	ldr	r7, [sp, #0]
 8007a20:	9e03      	ldr	r6, [sp, #12]
 8007a22:	e794      	b.n	800794e <_dtoa_r+0x40e>
 8007a24:	9901      	ldr	r1, [sp, #4]
 8007a26:	4b4c      	ldr	r3, [pc, #304]	; (8007b58 <_dtoa_r+0x618>)
 8007a28:	4431      	add	r1, r6
 8007a2a:	910d      	str	r1, [sp, #52]	; 0x34
 8007a2c:	9908      	ldr	r1, [sp, #32]
 8007a2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a36:	2900      	cmp	r1, #0
 8007a38:	d043      	beq.n	8007ac2 <_dtoa_r+0x582>
 8007a3a:	494d      	ldr	r1, [pc, #308]	; (8007b70 <_dtoa_r+0x630>)
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7f8 ff0d 	bl	800085c <__aeabi_ddiv>
 8007a42:	4652      	mov	r2, sl
 8007a44:	465b      	mov	r3, fp
 8007a46:	f7f8 fc27 	bl	8000298 <__aeabi_dsub>
 8007a4a:	9d01      	ldr	r5, [sp, #4]
 8007a4c:	4682      	mov	sl, r0
 8007a4e:	468b      	mov	fp, r1
 8007a50:	4649      	mov	r1, r9
 8007a52:	4640      	mov	r0, r8
 8007a54:	f7f9 f888 	bl	8000b68 <__aeabi_d2iz>
 8007a58:	4606      	mov	r6, r0
 8007a5a:	f7f8 fd6b 	bl	8000534 <__aeabi_i2d>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4640      	mov	r0, r8
 8007a64:	4649      	mov	r1, r9
 8007a66:	f7f8 fc17 	bl	8000298 <__aeabi_dsub>
 8007a6a:	3630      	adds	r6, #48	; 0x30
 8007a6c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a70:	4652      	mov	r2, sl
 8007a72:	465b      	mov	r3, fp
 8007a74:	4680      	mov	r8, r0
 8007a76:	4689      	mov	r9, r1
 8007a78:	f7f9 f838 	bl	8000aec <__aeabi_dcmplt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d163      	bne.n	8007b48 <_dtoa_r+0x608>
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	4936      	ldr	r1, [pc, #216]	; (8007b60 <_dtoa_r+0x620>)
 8007a86:	2000      	movs	r0, #0
 8007a88:	f7f8 fc06 	bl	8000298 <__aeabi_dsub>
 8007a8c:	4652      	mov	r2, sl
 8007a8e:	465b      	mov	r3, fp
 8007a90:	f7f9 f82c 	bl	8000aec <__aeabi_dcmplt>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f040 80b5 	bne.w	8007c04 <_dtoa_r+0x6c4>
 8007a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a9c:	429d      	cmp	r5, r3
 8007a9e:	d081      	beq.n	80079a4 <_dtoa_r+0x464>
 8007aa0:	4b30      	ldr	r3, [pc, #192]	; (8007b64 <_dtoa_r+0x624>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	4659      	mov	r1, fp
 8007aa8:	f7f8 fdae 	bl	8000608 <__aeabi_dmul>
 8007aac:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <_dtoa_r+0x624>)
 8007aae:	4682      	mov	sl, r0
 8007ab0:	468b      	mov	fp, r1
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f7f8 fda6 	bl	8000608 <__aeabi_dmul>
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	e7c6      	b.n	8007a50 <_dtoa_r+0x510>
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	4659      	mov	r1, fp
 8007ac6:	f7f8 fd9f 	bl	8000608 <__aeabi_dmul>
 8007aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007acc:	9d01      	ldr	r5, [sp, #4]
 8007ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f7f9 f846 	bl	8000b68 <__aeabi_d2iz>
 8007adc:	4606      	mov	r6, r0
 8007ade:	f7f8 fd29 	bl	8000534 <__aeabi_i2d>
 8007ae2:	3630      	adds	r6, #48	; 0x30
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f8 fbd4 	bl	8000298 <__aeabi_dsub>
 8007af0:	f805 6b01 	strb.w	r6, [r5], #1
 8007af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af6:	429d      	cmp	r5, r3
 8007af8:	4680      	mov	r8, r0
 8007afa:	4689      	mov	r9, r1
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	d124      	bne.n	8007b4c <_dtoa_r+0x60c>
 8007b02:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <_dtoa_r+0x630>)
 8007b04:	4650      	mov	r0, sl
 8007b06:	4659      	mov	r1, fp
 8007b08:	f7f8 fbc8 	bl	800029c <__adddf3>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f9 f808 	bl	8000b28 <__aeabi_dcmpgt>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d173      	bne.n	8007c04 <_dtoa_r+0x6c4>
 8007b1c:	4652      	mov	r2, sl
 8007b1e:	465b      	mov	r3, fp
 8007b20:	4913      	ldr	r1, [pc, #76]	; (8007b70 <_dtoa_r+0x630>)
 8007b22:	2000      	movs	r0, #0
 8007b24:	f7f8 fbb8 	bl	8000298 <__aeabi_dsub>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f8 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f43f af35 	beq.w	80079a4 <_dtoa_r+0x464>
 8007b3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b3c:	1e6b      	subs	r3, r5, #1
 8007b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b44:	2b30      	cmp	r3, #48	; 0x30
 8007b46:	d0f8      	beq.n	8007b3a <_dtoa_r+0x5fa>
 8007b48:	9700      	str	r7, [sp, #0]
 8007b4a:	e049      	b.n	8007be0 <_dtoa_r+0x6a0>
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <_dtoa_r+0x624>)
 8007b4e:	f7f8 fd5b 	bl	8000608 <__aeabi_dmul>
 8007b52:	4680      	mov	r8, r0
 8007b54:	4689      	mov	r9, r1
 8007b56:	e7bd      	b.n	8007ad4 <_dtoa_r+0x594>
 8007b58:	08009718 	.word	0x08009718
 8007b5c:	080096f0 	.word	0x080096f0
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	40240000 	.word	0x40240000
 8007b68:	401c0000 	.word	0x401c0000
 8007b6c:	40140000 	.word	0x40140000
 8007b70:	3fe00000 	.word	0x3fe00000
 8007b74:	9d01      	ldr	r5, [sp, #4]
 8007b76:	4656      	mov	r6, sl
 8007b78:	465f      	mov	r7, fp
 8007b7a:	4642      	mov	r2, r8
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 fe6b 	bl	800085c <__aeabi_ddiv>
 8007b86:	f7f8 ffef 	bl	8000b68 <__aeabi_d2iz>
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	f7f8 fcd2 	bl	8000534 <__aeabi_i2d>
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	f7f8 fd38 	bl	8000608 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ba4:	f7f8 fb78 	bl	8000298 <__aeabi_dsub>
 8007ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8007bac:	9e01      	ldr	r6, [sp, #4]
 8007bae:	9f03      	ldr	r7, [sp, #12]
 8007bb0:	1bae      	subs	r6, r5, r6
 8007bb2:	42b7      	cmp	r7, r6
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	d135      	bne.n	8007c26 <_dtoa_r+0x6e6>
 8007bba:	f7f8 fb6f 	bl	800029c <__adddf3>
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	f7f8 ffaf 	bl	8000b28 <__aeabi_dcmpgt>
 8007bca:	b9d0      	cbnz	r0, 8007c02 <_dtoa_r+0x6c2>
 8007bcc:	4642      	mov	r2, r8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 ff80 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bd8:	b110      	cbz	r0, 8007be0 <_dtoa_r+0x6a0>
 8007bda:	f01a 0f01 	tst.w	sl, #1
 8007bde:	d110      	bne.n	8007c02 <_dtoa_r+0x6c2>
 8007be0:	4620      	mov	r0, r4
 8007be2:	ee18 1a10 	vmov	r1, s16
 8007be6:	f000 fbc5 	bl	8008374 <_Bfree>
 8007bea:	2300      	movs	r3, #0
 8007bec:	9800      	ldr	r0, [sp, #0]
 8007bee:	702b      	strb	r3, [r5, #0]
 8007bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	6018      	str	r0, [r3, #0]
 8007bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f43f acf1 	beq.w	80075e0 <_dtoa_r+0xa0>
 8007bfe:	601d      	str	r5, [r3, #0]
 8007c00:	e4ee      	b.n	80075e0 <_dtoa_r+0xa0>
 8007c02:	9f00      	ldr	r7, [sp, #0]
 8007c04:	462b      	mov	r3, r5
 8007c06:	461d      	mov	r5, r3
 8007c08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c0c:	2a39      	cmp	r2, #57	; 0x39
 8007c0e:	d106      	bne.n	8007c1e <_dtoa_r+0x6de>
 8007c10:	9a01      	ldr	r2, [sp, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d1f7      	bne.n	8007c06 <_dtoa_r+0x6c6>
 8007c16:	9901      	ldr	r1, [sp, #4]
 8007c18:	2230      	movs	r2, #48	; 0x30
 8007c1a:	3701      	adds	r7, #1
 8007c1c:	700a      	strb	r2, [r1, #0]
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	3201      	adds	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e790      	b.n	8007b48 <_dtoa_r+0x608>
 8007c26:	4ba6      	ldr	r3, [pc, #664]	; (8007ec0 <_dtoa_r+0x980>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f7f8 fced 	bl	8000608 <__aeabi_dmul>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	4606      	mov	r6, r0
 8007c34:	460f      	mov	r7, r1
 8007c36:	f7f8 ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d09d      	beq.n	8007b7a <_dtoa_r+0x63a>
 8007c3e:	e7cf      	b.n	8007be0 <_dtoa_r+0x6a0>
 8007c40:	9a08      	ldr	r2, [sp, #32]
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	f000 80d7 	beq.w	8007df6 <_dtoa_r+0x8b6>
 8007c48:	9a06      	ldr	r2, [sp, #24]
 8007c4a:	2a01      	cmp	r2, #1
 8007c4c:	f300 80ba 	bgt.w	8007dc4 <_dtoa_r+0x884>
 8007c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	f000 80b2 	beq.w	8007dbc <_dtoa_r+0x87c>
 8007c58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c5c:	9e07      	ldr	r6, [sp, #28]
 8007c5e:	9d04      	ldr	r5, [sp, #16]
 8007c60:	9a04      	ldr	r2, [sp, #16]
 8007c62:	441a      	add	r2, r3
 8007c64:	9204      	str	r2, [sp, #16]
 8007c66:	9a05      	ldr	r2, [sp, #20]
 8007c68:	2101      	movs	r1, #1
 8007c6a:	441a      	add	r2, r3
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	9205      	str	r2, [sp, #20]
 8007c70:	f000 fc38 	bl	80084e4 <__i2b>
 8007c74:	4607      	mov	r7, r0
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	dd0c      	ble.n	8007c94 <_dtoa_r+0x754>
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dd09      	ble.n	8007c94 <_dtoa_r+0x754>
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	9a04      	ldr	r2, [sp, #16]
 8007c84:	bfa8      	it	ge
 8007c86:	462b      	movge	r3, r5
 8007c88:	1ad2      	subs	r2, r2, r3
 8007c8a:	9204      	str	r2, [sp, #16]
 8007c8c:	9a05      	ldr	r2, [sp, #20]
 8007c8e:	1aed      	subs	r5, r5, r3
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	9305      	str	r3, [sp, #20]
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	b31b      	cbz	r3, 8007ce0 <_dtoa_r+0x7a0>
 8007c98:	9b08      	ldr	r3, [sp, #32]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80af 	beq.w	8007dfe <_dtoa_r+0x8be>
 8007ca0:	2e00      	cmp	r6, #0
 8007ca2:	dd13      	ble.n	8007ccc <_dtoa_r+0x78c>
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fcdb 	bl	8008664 <__pow5mult>
 8007cae:	ee18 2a10 	vmov	r2, s16
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 fc2a 	bl	8008510 <__multiply>
 8007cbc:	ee18 1a10 	vmov	r1, s16
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 fb56 	bl	8008374 <_Bfree>
 8007cc8:	ee08 8a10 	vmov	s16, r8
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	1b9a      	subs	r2, r3, r6
 8007cd0:	d006      	beq.n	8007ce0 <_dtoa_r+0x7a0>
 8007cd2:	ee18 1a10 	vmov	r1, s16
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 fcc4 	bl	8008664 <__pow5mult>
 8007cdc:	ee08 0a10 	vmov	s16, r0
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 fbfe 	bl	80084e4 <__i2b>
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	4606      	mov	r6, r0
 8007cee:	f340 8088 	ble.w	8007e02 <_dtoa_r+0x8c2>
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	4601      	mov	r1, r0
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 fcb4 	bl	8008664 <__pow5mult>
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	4606      	mov	r6, r0
 8007d02:	f340 8081 	ble.w	8007e08 <_dtoa_r+0x8c8>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	6933      	ldr	r3, [r6, #16]
 8007d0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d10:	6918      	ldr	r0, [r3, #16]
 8007d12:	f000 fb97 	bl	8008444 <__hi0bits>
 8007d16:	f1c0 0020 	rsb	r0, r0, #32
 8007d1a:	9b05      	ldr	r3, [sp, #20]
 8007d1c:	4418      	add	r0, r3
 8007d1e:	f010 001f 	ands.w	r0, r0, #31
 8007d22:	f000 8092 	beq.w	8007e4a <_dtoa_r+0x90a>
 8007d26:	f1c0 0320 	rsb	r3, r0, #32
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	f340 808a 	ble.w	8007e44 <_dtoa_r+0x904>
 8007d30:	f1c0 001c 	rsb	r0, r0, #28
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	4403      	add	r3, r0
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	4403      	add	r3, r0
 8007d3e:	4405      	add	r5, r0
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	9b04      	ldr	r3, [sp, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dd07      	ble.n	8007d58 <_dtoa_r+0x818>
 8007d48:	ee18 1a10 	vmov	r1, s16
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fce2 	bl	8008718 <__lshift>
 8007d54:	ee08 0a10 	vmov	s16, r0
 8007d58:	9b05      	ldr	r3, [sp, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	dd05      	ble.n	8007d6a <_dtoa_r+0x82a>
 8007d5e:	4631      	mov	r1, r6
 8007d60:	461a      	mov	r2, r3
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fcd8 	bl	8008718 <__lshift>
 8007d68:	4606      	mov	r6, r0
 8007d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d06e      	beq.n	8007e4e <_dtoa_r+0x90e>
 8007d70:	ee18 0a10 	vmov	r0, s16
 8007d74:	4631      	mov	r1, r6
 8007d76:	f000 fd3f 	bl	80087f8 <__mcmp>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	da67      	bge.n	8007e4e <_dtoa_r+0x90e>
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	ee18 1a10 	vmov	r1, s16
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	220a      	movs	r2, #10
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 fb13 	bl	80083b8 <__multadd>
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	ee08 0a10 	vmov	s16, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 81b1 	beq.w	8008100 <_dtoa_r+0xbc0>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4639      	mov	r1, r7
 8007da2:	220a      	movs	r2, #10
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fb07 	bl	80083b8 <__multadd>
 8007daa:	9b02      	ldr	r3, [sp, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	4607      	mov	r7, r0
 8007db0:	f300 808e 	bgt.w	8007ed0 <_dtoa_r+0x990>
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	dc51      	bgt.n	8007e5e <_dtoa_r+0x91e>
 8007dba:	e089      	b.n	8007ed0 <_dtoa_r+0x990>
 8007dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dc2:	e74b      	b.n	8007c5c <_dtoa_r+0x71c>
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	1e5e      	subs	r6, r3, #1
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	42b3      	cmp	r3, r6
 8007dcc:	bfbf      	itttt	lt
 8007dce:	9b07      	ldrlt	r3, [sp, #28]
 8007dd0:	9607      	strlt	r6, [sp, #28]
 8007dd2:	1af2      	sublt	r2, r6, r3
 8007dd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dd6:	bfb6      	itet	lt
 8007dd8:	189b      	addlt	r3, r3, r2
 8007dda:	1b9e      	subge	r6, r3, r6
 8007ddc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	bfb8      	it	lt
 8007de2:	2600      	movlt	r6, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bfb7      	itett	lt
 8007de8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007dec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007df0:	1a9d      	sublt	r5, r3, r2
 8007df2:	2300      	movlt	r3, #0
 8007df4:	e734      	b.n	8007c60 <_dtoa_r+0x720>
 8007df6:	9e07      	ldr	r6, [sp, #28]
 8007df8:	9d04      	ldr	r5, [sp, #16]
 8007dfa:	9f08      	ldr	r7, [sp, #32]
 8007dfc:	e73b      	b.n	8007c76 <_dtoa_r+0x736>
 8007dfe:	9a07      	ldr	r2, [sp, #28]
 8007e00:	e767      	b.n	8007cd2 <_dtoa_r+0x792>
 8007e02:	9b06      	ldr	r3, [sp, #24]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	dc18      	bgt.n	8007e3a <_dtoa_r+0x8fa>
 8007e08:	f1ba 0f00 	cmp.w	sl, #0
 8007e0c:	d115      	bne.n	8007e3a <_dtoa_r+0x8fa>
 8007e0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e12:	b993      	cbnz	r3, 8007e3a <_dtoa_r+0x8fa>
 8007e14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e18:	0d1b      	lsrs	r3, r3, #20
 8007e1a:	051b      	lsls	r3, r3, #20
 8007e1c:	b183      	cbz	r3, 8007e40 <_dtoa_r+0x900>
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9b05      	ldr	r3, [sp, #20]
 8007e26:	3301      	adds	r3, #1
 8007e28:	9305      	str	r3, [sp, #20]
 8007e2a:	f04f 0801 	mov.w	r8, #1
 8007e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f47f af6a 	bne.w	8007d0a <_dtoa_r+0x7ca>
 8007e36:	2001      	movs	r0, #1
 8007e38:	e76f      	b.n	8007d1a <_dtoa_r+0x7da>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	e7f6      	b.n	8007e2e <_dtoa_r+0x8ee>
 8007e40:	4698      	mov	r8, r3
 8007e42:	e7f4      	b.n	8007e2e <_dtoa_r+0x8ee>
 8007e44:	f43f af7d 	beq.w	8007d42 <_dtoa_r+0x802>
 8007e48:	4618      	mov	r0, r3
 8007e4a:	301c      	adds	r0, #28
 8007e4c:	e772      	b.n	8007d34 <_dtoa_r+0x7f4>
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dc37      	bgt.n	8007ec4 <_dtoa_r+0x984>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	dd34      	ble.n	8007ec4 <_dtoa_r+0x984>
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	9302      	str	r3, [sp, #8]
 8007e5e:	9b02      	ldr	r3, [sp, #8]
 8007e60:	b96b      	cbnz	r3, 8007e7e <_dtoa_r+0x93e>
 8007e62:	4631      	mov	r1, r6
 8007e64:	2205      	movs	r2, #5
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 faa6 	bl	80083b8 <__multadd>
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	4606      	mov	r6, r0
 8007e70:	ee18 0a10 	vmov	r0, s16
 8007e74:	f000 fcc0 	bl	80087f8 <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f73f adbb 	bgt.w	80079f4 <_dtoa_r+0x4b4>
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	9d01      	ldr	r5, [sp, #4]
 8007e82:	43db      	mvns	r3, r3
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 fa71 	bl	8008374 <_Bfree>
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	f43f aea4 	beq.w	8007be0 <_dtoa_r+0x6a0>
 8007e98:	f1b8 0f00 	cmp.w	r8, #0
 8007e9c:	d005      	beq.n	8007eaa <_dtoa_r+0x96a>
 8007e9e:	45b8      	cmp	r8, r7
 8007ea0:	d003      	beq.n	8007eaa <_dtoa_r+0x96a>
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fa65 	bl	8008374 <_Bfree>
 8007eaa:	4639      	mov	r1, r7
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fa61 	bl	8008374 <_Bfree>
 8007eb2:	e695      	b.n	8007be0 <_dtoa_r+0x6a0>
 8007eb4:	2600      	movs	r6, #0
 8007eb6:	4637      	mov	r7, r6
 8007eb8:	e7e1      	b.n	8007e7e <_dtoa_r+0x93e>
 8007eba:	9700      	str	r7, [sp, #0]
 8007ebc:	4637      	mov	r7, r6
 8007ebe:	e599      	b.n	80079f4 <_dtoa_r+0x4b4>
 8007ec0:	40240000 	.word	0x40240000
 8007ec4:	9b08      	ldr	r3, [sp, #32]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80ca 	beq.w	8008060 <_dtoa_r+0xb20>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	9302      	str	r3, [sp, #8]
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	dd05      	ble.n	8007ee0 <_dtoa_r+0x9a0>
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fc1d 	bl	8008718 <__lshift>
 8007ede:	4607      	mov	r7, r0
 8007ee0:	f1b8 0f00 	cmp.w	r8, #0
 8007ee4:	d05b      	beq.n	8007f9e <_dtoa_r+0xa5e>
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fa03 	bl	80082f4 <_Balloc>
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b928      	cbnz	r0, 8007efe <_dtoa_r+0x9be>
 8007ef2:	4b87      	ldr	r3, [pc, #540]	; (8008110 <_dtoa_r+0xbd0>)
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007efa:	f7ff bb3b 	b.w	8007574 <_dtoa_r+0x34>
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	3202      	adds	r2, #2
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	f107 010c 	add.w	r1, r7, #12
 8007f08:	300c      	adds	r0, #12
 8007f0a:	f7fe fc76 	bl	80067fa <memcpy>
 8007f0e:	2201      	movs	r2, #1
 8007f10:	4629      	mov	r1, r5
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fc00 	bl	8008718 <__lshift>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	f103 0901 	add.w	r9, r3, #1
 8007f1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	f00a 0301 	and.w	r3, sl, #1
 8007f2a:	46b8      	mov	r8, r7
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	4607      	mov	r7, r0
 8007f30:	4631      	mov	r1, r6
 8007f32:	ee18 0a10 	vmov	r0, s16
 8007f36:	f7ff fa75 	bl	8007424 <quorem>
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	9002      	str	r0, [sp, #8]
 8007f3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f42:	ee18 0a10 	vmov	r0, s16
 8007f46:	f000 fc57 	bl	80087f8 <__mcmp>
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	9003      	str	r0, [sp, #12]
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fc6d 	bl	8008830 <__mdiff>
 8007f56:	68c2      	ldr	r2, [r0, #12]
 8007f58:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	bb02      	cbnz	r2, 8007fa2 <_dtoa_r+0xa62>
 8007f60:	4601      	mov	r1, r0
 8007f62:	ee18 0a10 	vmov	r0, s16
 8007f66:	f000 fc47 	bl	80087f8 <__mcmp>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4620      	mov	r0, r4
 8007f70:	9207      	str	r2, [sp, #28]
 8007f72:	f000 f9ff 	bl	8008374 <_Bfree>
 8007f76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f7a:	ea43 0102 	orr.w	r1, r3, r2
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	430b      	orrs	r3, r1
 8007f82:	464d      	mov	r5, r9
 8007f84:	d10f      	bne.n	8007fa6 <_dtoa_r+0xa66>
 8007f86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f8a:	d02a      	beq.n	8007fe2 <_dtoa_r+0xaa2>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	dd02      	ble.n	8007f98 <_dtoa_r+0xa58>
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f98:	f88b a000 	strb.w	sl, [fp]
 8007f9c:	e775      	b.n	8007e8a <_dtoa_r+0x94a>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	e7ba      	b.n	8007f18 <_dtoa_r+0x9d8>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	e7e2      	b.n	8007f6c <_dtoa_r+0xa2c>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	db04      	blt.n	8007fb6 <_dtoa_r+0xa76>
 8007fac:	9906      	ldr	r1, [sp, #24]
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	9904      	ldr	r1, [sp, #16]
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	d122      	bne.n	8007ffc <_dtoa_r+0xabc>
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	ddee      	ble.n	8007f98 <_dtoa_r+0xa58>
 8007fba:	ee18 1a10 	vmov	r1, s16
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 fba9 	bl	8008718 <__lshift>
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	ee08 0a10 	vmov	s16, r0
 8007fcc:	f000 fc14 	bl	80087f8 <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	dc03      	bgt.n	8007fdc <_dtoa_r+0xa9c>
 8007fd4:	d1e0      	bne.n	8007f98 <_dtoa_r+0xa58>
 8007fd6:	f01a 0f01 	tst.w	sl, #1
 8007fda:	d0dd      	beq.n	8007f98 <_dtoa_r+0xa58>
 8007fdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fe0:	d1d7      	bne.n	8007f92 <_dtoa_r+0xa52>
 8007fe2:	2339      	movs	r3, #57	; 0x39
 8007fe4:	f88b 3000 	strb.w	r3, [fp]
 8007fe8:	462b      	mov	r3, r5
 8007fea:	461d      	mov	r5, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ff2:	2a39      	cmp	r2, #57	; 0x39
 8007ff4:	d071      	beq.n	80080da <_dtoa_r+0xb9a>
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	e746      	b.n	8007e8a <_dtoa_r+0x94a>
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	dd07      	ble.n	8008010 <_dtoa_r+0xad0>
 8008000:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008004:	d0ed      	beq.n	8007fe2 <_dtoa_r+0xaa2>
 8008006:	f10a 0301 	add.w	r3, sl, #1
 800800a:	f88b 3000 	strb.w	r3, [fp]
 800800e:	e73c      	b.n	8007e8a <_dtoa_r+0x94a>
 8008010:	9b05      	ldr	r3, [sp, #20]
 8008012:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008016:	4599      	cmp	r9, r3
 8008018:	d047      	beq.n	80080aa <_dtoa_r+0xb6a>
 800801a:	ee18 1a10 	vmov	r1, s16
 800801e:	2300      	movs	r3, #0
 8008020:	220a      	movs	r2, #10
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f9c8 	bl	80083b8 <__multadd>
 8008028:	45b8      	cmp	r8, r7
 800802a:	ee08 0a10 	vmov	s16, r0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	f04f 020a 	mov.w	r2, #10
 8008036:	4641      	mov	r1, r8
 8008038:	4620      	mov	r0, r4
 800803a:	d106      	bne.n	800804a <_dtoa_r+0xb0a>
 800803c:	f000 f9bc 	bl	80083b8 <__multadd>
 8008040:	4680      	mov	r8, r0
 8008042:	4607      	mov	r7, r0
 8008044:	f109 0901 	add.w	r9, r9, #1
 8008048:	e772      	b.n	8007f30 <_dtoa_r+0x9f0>
 800804a:	f000 f9b5 	bl	80083b8 <__multadd>
 800804e:	4639      	mov	r1, r7
 8008050:	4680      	mov	r8, r0
 8008052:	2300      	movs	r3, #0
 8008054:	220a      	movs	r2, #10
 8008056:	4620      	mov	r0, r4
 8008058:	f000 f9ae 	bl	80083b8 <__multadd>
 800805c:	4607      	mov	r7, r0
 800805e:	e7f1      	b.n	8008044 <_dtoa_r+0xb04>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	9d01      	ldr	r5, [sp, #4]
 8008066:	ee18 0a10 	vmov	r0, s16
 800806a:	4631      	mov	r1, r6
 800806c:	f7ff f9da 	bl	8007424 <quorem>
 8008070:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	f805 ab01 	strb.w	sl, [r5], #1
 800807a:	1aea      	subs	r2, r5, r3
 800807c:	9b02      	ldr	r3, [sp, #8]
 800807e:	4293      	cmp	r3, r2
 8008080:	dd09      	ble.n	8008096 <_dtoa_r+0xb56>
 8008082:	ee18 1a10 	vmov	r1, s16
 8008086:	2300      	movs	r3, #0
 8008088:	220a      	movs	r2, #10
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f994 	bl	80083b8 <__multadd>
 8008090:	ee08 0a10 	vmov	s16, r0
 8008094:	e7e7      	b.n	8008066 <_dtoa_r+0xb26>
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bfc8      	it	gt
 800809c:	461d      	movgt	r5, r3
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	bfd8      	it	le
 80080a2:	2501      	movle	r5, #1
 80080a4:	441d      	add	r5, r3
 80080a6:	f04f 0800 	mov.w	r8, #0
 80080aa:	ee18 1a10 	vmov	r1, s16
 80080ae:	2201      	movs	r2, #1
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fb31 	bl	8008718 <__lshift>
 80080b6:	4631      	mov	r1, r6
 80080b8:	ee08 0a10 	vmov	s16, r0
 80080bc:	f000 fb9c 	bl	80087f8 <__mcmp>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	dc91      	bgt.n	8007fe8 <_dtoa_r+0xaa8>
 80080c4:	d102      	bne.n	80080cc <_dtoa_r+0xb8c>
 80080c6:	f01a 0f01 	tst.w	sl, #1
 80080ca:	d18d      	bne.n	8007fe8 <_dtoa_r+0xaa8>
 80080cc:	462b      	mov	r3, r5
 80080ce:	461d      	mov	r5, r3
 80080d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080d4:	2a30      	cmp	r2, #48	; 0x30
 80080d6:	d0fa      	beq.n	80080ce <_dtoa_r+0xb8e>
 80080d8:	e6d7      	b.n	8007e8a <_dtoa_r+0x94a>
 80080da:	9a01      	ldr	r2, [sp, #4]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d184      	bne.n	8007fea <_dtoa_r+0xaaa>
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	2331      	movs	r3, #49	; 0x31
 80080e8:	7013      	strb	r3, [r2, #0]
 80080ea:	e6ce      	b.n	8007e8a <_dtoa_r+0x94a>
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <_dtoa_r+0xbd4>)
 80080ee:	f7ff ba95 	b.w	800761c <_dtoa_r+0xdc>
 80080f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f47f aa6e 	bne.w	80075d6 <_dtoa_r+0x96>
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <_dtoa_r+0xbd8>)
 80080fc:	f7ff ba8e 	b.w	800761c <_dtoa_r+0xdc>
 8008100:	9b02      	ldr	r3, [sp, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dcae      	bgt.n	8008064 <_dtoa_r+0xb24>
 8008106:	9b06      	ldr	r3, [sp, #24]
 8008108:	2b02      	cmp	r3, #2
 800810a:	f73f aea8 	bgt.w	8007e5e <_dtoa_r+0x91e>
 800810e:	e7a9      	b.n	8008064 <_dtoa_r+0xb24>
 8008110:	08009683 	.word	0x08009683
 8008114:	080095e0 	.word	0x080095e0
 8008118:	08009604 	.word	0x08009604

0800811c <__sflush_r>:
 800811c:	898a      	ldrh	r2, [r1, #12]
 800811e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008122:	4605      	mov	r5, r0
 8008124:	0710      	lsls	r0, r2, #28
 8008126:	460c      	mov	r4, r1
 8008128:	d458      	bmi.n	80081dc <__sflush_r+0xc0>
 800812a:	684b      	ldr	r3, [r1, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dc05      	bgt.n	800813c <__sflush_r+0x20>
 8008130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	dc02      	bgt.n	800813c <__sflush_r+0x20>
 8008136:	2000      	movs	r0, #0
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800813e:	2e00      	cmp	r6, #0
 8008140:	d0f9      	beq.n	8008136 <__sflush_r+0x1a>
 8008142:	2300      	movs	r3, #0
 8008144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008148:	682f      	ldr	r7, [r5, #0]
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	d032      	beq.n	80081b4 <__sflush_r+0x98>
 800814e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	075a      	lsls	r2, r3, #29
 8008154:	d505      	bpl.n	8008162 <__sflush_r+0x46>
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800815c:	b10b      	cbz	r3, 8008162 <__sflush_r+0x46>
 800815e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	2300      	movs	r3, #0
 8008164:	4602      	mov	r2, r0
 8008166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008168:	6a21      	ldr	r1, [r4, #32]
 800816a:	4628      	mov	r0, r5
 800816c:	47b0      	blx	r6
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	d106      	bne.n	8008182 <__sflush_r+0x66>
 8008174:	6829      	ldr	r1, [r5, #0]
 8008176:	291d      	cmp	r1, #29
 8008178:	d82c      	bhi.n	80081d4 <__sflush_r+0xb8>
 800817a:	4a2a      	ldr	r2, [pc, #168]	; (8008224 <__sflush_r+0x108>)
 800817c:	40ca      	lsrs	r2, r1
 800817e:	07d6      	lsls	r6, r2, #31
 8008180:	d528      	bpl.n	80081d4 <__sflush_r+0xb8>
 8008182:	2200      	movs	r2, #0
 8008184:	6062      	str	r2, [r4, #4]
 8008186:	04d9      	lsls	r1, r3, #19
 8008188:	6922      	ldr	r2, [r4, #16]
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	d504      	bpl.n	8008198 <__sflush_r+0x7c>
 800818e:	1c42      	adds	r2, r0, #1
 8008190:	d101      	bne.n	8008196 <__sflush_r+0x7a>
 8008192:	682b      	ldr	r3, [r5, #0]
 8008194:	b903      	cbnz	r3, 8008198 <__sflush_r+0x7c>
 8008196:	6560      	str	r0, [r4, #84]	; 0x54
 8008198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800819a:	602f      	str	r7, [r5, #0]
 800819c:	2900      	cmp	r1, #0
 800819e:	d0ca      	beq.n	8008136 <__sflush_r+0x1a>
 80081a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <__sflush_r+0x92>
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 fc3d 	bl	8008a28 <_free_r>
 80081ae:	2000      	movs	r0, #0
 80081b0:	6360      	str	r0, [r4, #52]	; 0x34
 80081b2:	e7c1      	b.n	8008138 <__sflush_r+0x1c>
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	2301      	movs	r3, #1
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b0      	blx	r6
 80081bc:	1c41      	adds	r1, r0, #1
 80081be:	d1c7      	bne.n	8008150 <__sflush_r+0x34>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0c4      	beq.n	8008150 <__sflush_r+0x34>
 80081c6:	2b1d      	cmp	r3, #29
 80081c8:	d001      	beq.n	80081ce <__sflush_r+0xb2>
 80081ca:	2b16      	cmp	r3, #22
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0xb6>
 80081ce:	602f      	str	r7, [r5, #0]
 80081d0:	e7b1      	b.n	8008136 <__sflush_r+0x1a>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	e7ad      	b.n	8008138 <__sflush_r+0x1c>
 80081dc:	690f      	ldr	r7, [r1, #16]
 80081de:	2f00      	cmp	r7, #0
 80081e0:	d0a9      	beq.n	8008136 <__sflush_r+0x1a>
 80081e2:	0793      	lsls	r3, r2, #30
 80081e4:	680e      	ldr	r6, [r1, #0]
 80081e6:	bf08      	it	eq
 80081e8:	694b      	ldreq	r3, [r1, #20]
 80081ea:	600f      	str	r7, [r1, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2300      	movne	r3, #0
 80081f0:	eba6 0807 	sub.w	r8, r6, r7
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	dd9c      	ble.n	8008136 <__sflush_r+0x1a>
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008200:	4643      	mov	r3, r8
 8008202:	463a      	mov	r2, r7
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	2800      	cmp	r0, #0
 800820a:	dc06      	bgt.n	800821a <__sflush_r+0xfe>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e78e      	b.n	8008138 <__sflush_r+0x1c>
 800821a:	4407      	add	r7, r0
 800821c:	eba8 0800 	sub.w	r8, r8, r0
 8008220:	e7e9      	b.n	80081f6 <__sflush_r+0xda>
 8008222:	bf00      	nop
 8008224:	20400001 	.word	0x20400001

08008228 <_fflush_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	690b      	ldr	r3, [r1, #16]
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	b913      	cbnz	r3, 8008238 <_fflush_r+0x10>
 8008232:	2500      	movs	r5, #0
 8008234:	4628      	mov	r0, r5
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	b118      	cbz	r0, 8008242 <_fflush_r+0x1a>
 800823a:	6983      	ldr	r3, [r0, #24]
 800823c:	b90b      	cbnz	r3, 8008242 <_fflush_r+0x1a>
 800823e:	f7fe fa17 	bl	8006670 <__sinit>
 8008242:	4b14      	ldr	r3, [pc, #80]	; (8008294 <_fflush_r+0x6c>)
 8008244:	429c      	cmp	r4, r3
 8008246:	d11b      	bne.n	8008280 <_fflush_r+0x58>
 8008248:	686c      	ldr	r4, [r5, #4]
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0ef      	beq.n	8008232 <_fflush_r+0xa>
 8008252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008254:	07d0      	lsls	r0, r2, #31
 8008256:	d404      	bmi.n	8008262 <_fflush_r+0x3a>
 8008258:	0599      	lsls	r1, r3, #22
 800825a:	d402      	bmi.n	8008262 <_fflush_r+0x3a>
 800825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825e:	f7fe faca 	bl	80067f6 <__retarget_lock_acquire_recursive>
 8008262:	4628      	mov	r0, r5
 8008264:	4621      	mov	r1, r4
 8008266:	f7ff ff59 	bl	800811c <__sflush_r>
 800826a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826c:	07da      	lsls	r2, r3, #31
 800826e:	4605      	mov	r5, r0
 8008270:	d4e0      	bmi.n	8008234 <_fflush_r+0xc>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	d4dd      	bmi.n	8008234 <_fflush_r+0xc>
 8008278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827a:	f7fe fabd 	bl	80067f8 <__retarget_lock_release_recursive>
 800827e:	e7d9      	b.n	8008234 <_fflush_r+0xc>
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <_fflush_r+0x70>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d101      	bne.n	800828a <_fflush_r+0x62>
 8008286:	68ac      	ldr	r4, [r5, #8]
 8008288:	e7df      	b.n	800824a <_fflush_r+0x22>
 800828a:	4b04      	ldr	r3, [pc, #16]	; (800829c <_fflush_r+0x74>)
 800828c:	429c      	cmp	r4, r3
 800828e:	bf08      	it	eq
 8008290:	68ec      	ldreq	r4, [r5, #12]
 8008292:	e7da      	b.n	800824a <_fflush_r+0x22>
 8008294:	0800958c 	.word	0x0800958c
 8008298:	080095ac 	.word	0x080095ac
 800829c:	0800956c 	.word	0x0800956c

080082a0 <_localeconv_r>:
 80082a0:	4800      	ldr	r0, [pc, #0]	; (80082a4 <_localeconv_r+0x4>)
 80082a2:	4770      	bx	lr
 80082a4:	20000178 	.word	0x20000178

080082a8 <_lseek_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_lseek_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 fe44 	bl	8001f44 <_lseek>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_lseek_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_lseek_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20004384 	.word	0x20004384

080082cc <malloc>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <malloc+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f7fe bac9 	b.w	8006868 <_malloc_r>
 80082d6:	bf00      	nop
 80082d8:	20000024 	.word	0x20000024

080082dc <__malloc_lock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__malloc_lock+0x8>)
 80082de:	f7fe ba8a 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 80082e2:	bf00      	nop
 80082e4:	20004378 	.word	0x20004378

080082e8 <__malloc_unlock>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__malloc_unlock+0x8>)
 80082ea:	f7fe ba85 	b.w	80067f8 <__retarget_lock_release_recursive>
 80082ee:	bf00      	nop
 80082f0:	20004378 	.word	0x20004378

080082f4 <_Balloc>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	b976      	cbnz	r6, 800831c <_Balloc+0x28>
 80082fe:	2010      	movs	r0, #16
 8008300:	f7ff ffe4 	bl	80082cc <malloc>
 8008304:	4602      	mov	r2, r0
 8008306:	6260      	str	r0, [r4, #36]	; 0x24
 8008308:	b920      	cbnz	r0, 8008314 <_Balloc+0x20>
 800830a:	4b18      	ldr	r3, [pc, #96]	; (800836c <_Balloc+0x78>)
 800830c:	4818      	ldr	r0, [pc, #96]	; (8008370 <_Balloc+0x7c>)
 800830e:	2166      	movs	r1, #102	; 0x66
 8008310:	f000 fd44 	bl	8008d9c <__assert_func>
 8008314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008318:	6006      	str	r6, [r0, #0]
 800831a:	60c6      	str	r6, [r0, #12]
 800831c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800831e:	68f3      	ldr	r3, [r6, #12]
 8008320:	b183      	cbz	r3, 8008344 <_Balloc+0x50>
 8008322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800832a:	b9b8      	cbnz	r0, 800835c <_Balloc+0x68>
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f605 	lsl.w	r6, r1, r5
 8008332:	1d72      	adds	r2, r6, #5
 8008334:	0092      	lsls	r2, r2, #2
 8008336:	4620      	mov	r0, r4
 8008338:	f000 fb60 	bl	80089fc <_calloc_r>
 800833c:	b160      	cbz	r0, 8008358 <_Balloc+0x64>
 800833e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008342:	e00e      	b.n	8008362 <_Balloc+0x6e>
 8008344:	2221      	movs	r2, #33	; 0x21
 8008346:	2104      	movs	r1, #4
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fb57 	bl	80089fc <_calloc_r>
 800834e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008350:	60f0      	str	r0, [r6, #12]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e4      	bne.n	8008322 <_Balloc+0x2e>
 8008358:	2000      	movs	r0, #0
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	6802      	ldr	r2, [r0, #0]
 800835e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008362:	2300      	movs	r3, #0
 8008364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008368:	e7f7      	b.n	800835a <_Balloc+0x66>
 800836a:	bf00      	nop
 800836c:	08009611 	.word	0x08009611
 8008370:	08009694 	.word	0x08009694

08008374 <_Bfree>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008378:	4605      	mov	r5, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b976      	cbnz	r6, 800839c <_Bfree+0x28>
 800837e:	2010      	movs	r0, #16
 8008380:	f7ff ffa4 	bl	80082cc <malloc>
 8008384:	4602      	mov	r2, r0
 8008386:	6268      	str	r0, [r5, #36]	; 0x24
 8008388:	b920      	cbnz	r0, 8008394 <_Bfree+0x20>
 800838a:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <_Bfree+0x3c>)
 800838c:	4809      	ldr	r0, [pc, #36]	; (80083b4 <_Bfree+0x40>)
 800838e:	218a      	movs	r1, #138	; 0x8a
 8008390:	f000 fd04 	bl	8008d9c <__assert_func>
 8008394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008398:	6006      	str	r6, [r0, #0]
 800839a:	60c6      	str	r6, [r0, #12]
 800839c:	b13c      	cbz	r4, 80083ae <_Bfree+0x3a>
 800839e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083a0:	6862      	ldr	r2, [r4, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083a8:	6021      	str	r1, [r4, #0]
 80083aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	08009611 	.word	0x08009611
 80083b4:	08009694 	.word	0x08009694

080083b8 <__multadd>:
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	690d      	ldr	r5, [r1, #16]
 80083be:	4607      	mov	r7, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	461e      	mov	r6, r3
 80083c4:	f101 0c14 	add.w	ip, r1, #20
 80083c8:	2000      	movs	r0, #0
 80083ca:	f8dc 3000 	ldr.w	r3, [ip]
 80083ce:	b299      	uxth	r1, r3
 80083d0:	fb02 6101 	mla	r1, r2, r1, r6
 80083d4:	0c1e      	lsrs	r6, r3, #16
 80083d6:	0c0b      	lsrs	r3, r1, #16
 80083d8:	fb02 3306 	mla	r3, r2, r6, r3
 80083dc:	b289      	uxth	r1, r1
 80083de:	3001      	adds	r0, #1
 80083e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083e4:	4285      	cmp	r5, r0
 80083e6:	f84c 1b04 	str.w	r1, [ip], #4
 80083ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083ee:	dcec      	bgt.n	80083ca <__multadd+0x12>
 80083f0:	b30e      	cbz	r6, 8008436 <__multadd+0x7e>
 80083f2:	68a3      	ldr	r3, [r4, #8]
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	dc19      	bgt.n	800842c <__multadd+0x74>
 80083f8:	6861      	ldr	r1, [r4, #4]
 80083fa:	4638      	mov	r0, r7
 80083fc:	3101      	adds	r1, #1
 80083fe:	f7ff ff79 	bl	80082f4 <_Balloc>
 8008402:	4680      	mov	r8, r0
 8008404:	b928      	cbnz	r0, 8008412 <__multadd+0x5a>
 8008406:	4602      	mov	r2, r0
 8008408:	4b0c      	ldr	r3, [pc, #48]	; (800843c <__multadd+0x84>)
 800840a:	480d      	ldr	r0, [pc, #52]	; (8008440 <__multadd+0x88>)
 800840c:	21b5      	movs	r1, #181	; 0xb5
 800840e:	f000 fcc5 	bl	8008d9c <__assert_func>
 8008412:	6922      	ldr	r2, [r4, #16]
 8008414:	3202      	adds	r2, #2
 8008416:	f104 010c 	add.w	r1, r4, #12
 800841a:	0092      	lsls	r2, r2, #2
 800841c:	300c      	adds	r0, #12
 800841e:	f7fe f9ec 	bl	80067fa <memcpy>
 8008422:	4621      	mov	r1, r4
 8008424:	4638      	mov	r0, r7
 8008426:	f7ff ffa5 	bl	8008374 <_Bfree>
 800842a:	4644      	mov	r4, r8
 800842c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008430:	3501      	adds	r5, #1
 8008432:	615e      	str	r6, [r3, #20]
 8008434:	6125      	str	r5, [r4, #16]
 8008436:	4620      	mov	r0, r4
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	08009683 	.word	0x08009683
 8008440:	08009694 	.word	0x08009694

08008444 <__hi0bits>:
 8008444:	0c03      	lsrs	r3, r0, #16
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	b9d3      	cbnz	r3, 8008480 <__hi0bits+0x3c>
 800844a:	0400      	lsls	r0, r0, #16
 800844c:	2310      	movs	r3, #16
 800844e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008452:	bf04      	itt	eq
 8008454:	0200      	lsleq	r0, r0, #8
 8008456:	3308      	addeq	r3, #8
 8008458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800845c:	bf04      	itt	eq
 800845e:	0100      	lsleq	r0, r0, #4
 8008460:	3304      	addeq	r3, #4
 8008462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008466:	bf04      	itt	eq
 8008468:	0080      	lsleq	r0, r0, #2
 800846a:	3302      	addeq	r3, #2
 800846c:	2800      	cmp	r0, #0
 800846e:	db05      	blt.n	800847c <__hi0bits+0x38>
 8008470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008474:	f103 0301 	add.w	r3, r3, #1
 8008478:	bf08      	it	eq
 800847a:	2320      	moveq	r3, #32
 800847c:	4618      	mov	r0, r3
 800847e:	4770      	bx	lr
 8008480:	2300      	movs	r3, #0
 8008482:	e7e4      	b.n	800844e <__hi0bits+0xa>

08008484 <__lo0bits>:
 8008484:	6803      	ldr	r3, [r0, #0]
 8008486:	f013 0207 	ands.w	r2, r3, #7
 800848a:	4601      	mov	r1, r0
 800848c:	d00b      	beq.n	80084a6 <__lo0bits+0x22>
 800848e:	07da      	lsls	r2, r3, #31
 8008490:	d423      	bmi.n	80084da <__lo0bits+0x56>
 8008492:	0798      	lsls	r0, r3, #30
 8008494:	bf49      	itett	mi
 8008496:	085b      	lsrmi	r3, r3, #1
 8008498:	089b      	lsrpl	r3, r3, #2
 800849a:	2001      	movmi	r0, #1
 800849c:	600b      	strmi	r3, [r1, #0]
 800849e:	bf5c      	itt	pl
 80084a0:	600b      	strpl	r3, [r1, #0]
 80084a2:	2002      	movpl	r0, #2
 80084a4:	4770      	bx	lr
 80084a6:	b298      	uxth	r0, r3
 80084a8:	b9a8      	cbnz	r0, 80084d6 <__lo0bits+0x52>
 80084aa:	0c1b      	lsrs	r3, r3, #16
 80084ac:	2010      	movs	r0, #16
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	b90a      	cbnz	r2, 80084b6 <__lo0bits+0x32>
 80084b2:	3008      	adds	r0, #8
 80084b4:	0a1b      	lsrs	r3, r3, #8
 80084b6:	071a      	lsls	r2, r3, #28
 80084b8:	bf04      	itt	eq
 80084ba:	091b      	lsreq	r3, r3, #4
 80084bc:	3004      	addeq	r0, #4
 80084be:	079a      	lsls	r2, r3, #30
 80084c0:	bf04      	itt	eq
 80084c2:	089b      	lsreq	r3, r3, #2
 80084c4:	3002      	addeq	r0, #2
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d403      	bmi.n	80084d2 <__lo0bits+0x4e>
 80084ca:	085b      	lsrs	r3, r3, #1
 80084cc:	f100 0001 	add.w	r0, r0, #1
 80084d0:	d005      	beq.n	80084de <__lo0bits+0x5a>
 80084d2:	600b      	str	r3, [r1, #0]
 80084d4:	4770      	bx	lr
 80084d6:	4610      	mov	r0, r2
 80084d8:	e7e9      	b.n	80084ae <__lo0bits+0x2a>
 80084da:	2000      	movs	r0, #0
 80084dc:	4770      	bx	lr
 80084de:	2020      	movs	r0, #32
 80084e0:	4770      	bx	lr
	...

080084e4 <__i2b>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	460c      	mov	r4, r1
 80084e8:	2101      	movs	r1, #1
 80084ea:	f7ff ff03 	bl	80082f4 <_Balloc>
 80084ee:	4602      	mov	r2, r0
 80084f0:	b928      	cbnz	r0, 80084fe <__i2b+0x1a>
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <__i2b+0x24>)
 80084f4:	4805      	ldr	r0, [pc, #20]	; (800850c <__i2b+0x28>)
 80084f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084fa:	f000 fc4f 	bl	8008d9c <__assert_func>
 80084fe:	2301      	movs	r3, #1
 8008500:	6144      	str	r4, [r0, #20]
 8008502:	6103      	str	r3, [r0, #16]
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop
 8008508:	08009683 	.word	0x08009683
 800850c:	08009694 	.word	0x08009694

08008510 <__multiply>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4691      	mov	r9, r2
 8008516:	690a      	ldr	r2, [r1, #16]
 8008518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800851c:	429a      	cmp	r2, r3
 800851e:	bfb8      	it	lt
 8008520:	460b      	movlt	r3, r1
 8008522:	460c      	mov	r4, r1
 8008524:	bfbc      	itt	lt
 8008526:	464c      	movlt	r4, r9
 8008528:	4699      	movlt	r9, r3
 800852a:	6927      	ldr	r7, [r4, #16]
 800852c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008530:	68a3      	ldr	r3, [r4, #8]
 8008532:	6861      	ldr	r1, [r4, #4]
 8008534:	eb07 060a 	add.w	r6, r7, sl
 8008538:	42b3      	cmp	r3, r6
 800853a:	b085      	sub	sp, #20
 800853c:	bfb8      	it	lt
 800853e:	3101      	addlt	r1, #1
 8008540:	f7ff fed8 	bl	80082f4 <_Balloc>
 8008544:	b930      	cbnz	r0, 8008554 <__multiply+0x44>
 8008546:	4602      	mov	r2, r0
 8008548:	4b44      	ldr	r3, [pc, #272]	; (800865c <__multiply+0x14c>)
 800854a:	4845      	ldr	r0, [pc, #276]	; (8008660 <__multiply+0x150>)
 800854c:	f240 115d 	movw	r1, #349	; 0x15d
 8008550:	f000 fc24 	bl	8008d9c <__assert_func>
 8008554:	f100 0514 	add.w	r5, r0, #20
 8008558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800855c:	462b      	mov	r3, r5
 800855e:	2200      	movs	r2, #0
 8008560:	4543      	cmp	r3, r8
 8008562:	d321      	bcc.n	80085a8 <__multiply+0x98>
 8008564:	f104 0314 	add.w	r3, r4, #20
 8008568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800856c:	f109 0314 	add.w	r3, r9, #20
 8008570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008574:	9202      	str	r2, [sp, #8]
 8008576:	1b3a      	subs	r2, r7, r4
 8008578:	3a15      	subs	r2, #21
 800857a:	f022 0203 	bic.w	r2, r2, #3
 800857e:	3204      	adds	r2, #4
 8008580:	f104 0115 	add.w	r1, r4, #21
 8008584:	428f      	cmp	r7, r1
 8008586:	bf38      	it	cc
 8008588:	2204      	movcc	r2, #4
 800858a:	9201      	str	r2, [sp, #4]
 800858c:	9a02      	ldr	r2, [sp, #8]
 800858e:	9303      	str	r3, [sp, #12]
 8008590:	429a      	cmp	r2, r3
 8008592:	d80c      	bhi.n	80085ae <__multiply+0x9e>
 8008594:	2e00      	cmp	r6, #0
 8008596:	dd03      	ble.n	80085a0 <__multiply+0x90>
 8008598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800859c:	2b00      	cmp	r3, #0
 800859e:	d05a      	beq.n	8008656 <__multiply+0x146>
 80085a0:	6106      	str	r6, [r0, #16]
 80085a2:	b005      	add	sp, #20
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	f843 2b04 	str.w	r2, [r3], #4
 80085ac:	e7d8      	b.n	8008560 <__multiply+0x50>
 80085ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80085b2:	f1ba 0f00 	cmp.w	sl, #0
 80085b6:	d024      	beq.n	8008602 <__multiply+0xf2>
 80085b8:	f104 0e14 	add.w	lr, r4, #20
 80085bc:	46a9      	mov	r9, r5
 80085be:	f04f 0c00 	mov.w	ip, #0
 80085c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085c6:	f8d9 1000 	ldr.w	r1, [r9]
 80085ca:	fa1f fb82 	uxth.w	fp, r2
 80085ce:	b289      	uxth	r1, r1
 80085d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80085d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085d8:	f8d9 2000 	ldr.w	r2, [r9]
 80085dc:	4461      	add	r1, ip
 80085de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80085e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085ea:	b289      	uxth	r1, r1
 80085ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085f0:	4577      	cmp	r7, lr
 80085f2:	f849 1b04 	str.w	r1, [r9], #4
 80085f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085fa:	d8e2      	bhi.n	80085c2 <__multiply+0xb2>
 80085fc:	9a01      	ldr	r2, [sp, #4]
 80085fe:	f845 c002 	str.w	ip, [r5, r2]
 8008602:	9a03      	ldr	r2, [sp, #12]
 8008604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008608:	3304      	adds	r3, #4
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	d020      	beq.n	8008652 <__multiply+0x142>
 8008610:	6829      	ldr	r1, [r5, #0]
 8008612:	f104 0c14 	add.w	ip, r4, #20
 8008616:	46ae      	mov	lr, r5
 8008618:	f04f 0a00 	mov.w	sl, #0
 800861c:	f8bc b000 	ldrh.w	fp, [ip]
 8008620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008624:	fb09 220b 	mla	r2, r9, fp, r2
 8008628:	4492      	add	sl, r2
 800862a:	b289      	uxth	r1, r1
 800862c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008630:	f84e 1b04 	str.w	r1, [lr], #4
 8008634:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008638:	f8be 1000 	ldrh.w	r1, [lr]
 800863c:	0c12      	lsrs	r2, r2, #16
 800863e:	fb09 1102 	mla	r1, r9, r2, r1
 8008642:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008646:	4567      	cmp	r7, ip
 8008648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800864c:	d8e6      	bhi.n	800861c <__multiply+0x10c>
 800864e:	9a01      	ldr	r2, [sp, #4]
 8008650:	50a9      	str	r1, [r5, r2]
 8008652:	3504      	adds	r5, #4
 8008654:	e79a      	b.n	800858c <__multiply+0x7c>
 8008656:	3e01      	subs	r6, #1
 8008658:	e79c      	b.n	8008594 <__multiply+0x84>
 800865a:	bf00      	nop
 800865c:	08009683 	.word	0x08009683
 8008660:	08009694 	.word	0x08009694

08008664 <__pow5mult>:
 8008664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008668:	4615      	mov	r5, r2
 800866a:	f012 0203 	ands.w	r2, r2, #3
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	d007      	beq.n	8008684 <__pow5mult+0x20>
 8008674:	4c25      	ldr	r4, [pc, #148]	; (800870c <__pow5mult+0xa8>)
 8008676:	3a01      	subs	r2, #1
 8008678:	2300      	movs	r3, #0
 800867a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800867e:	f7ff fe9b 	bl	80083b8 <__multadd>
 8008682:	4607      	mov	r7, r0
 8008684:	10ad      	asrs	r5, r5, #2
 8008686:	d03d      	beq.n	8008704 <__pow5mult+0xa0>
 8008688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800868a:	b97c      	cbnz	r4, 80086ac <__pow5mult+0x48>
 800868c:	2010      	movs	r0, #16
 800868e:	f7ff fe1d 	bl	80082cc <malloc>
 8008692:	4602      	mov	r2, r0
 8008694:	6270      	str	r0, [r6, #36]	; 0x24
 8008696:	b928      	cbnz	r0, 80086a4 <__pow5mult+0x40>
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <__pow5mult+0xac>)
 800869a:	481e      	ldr	r0, [pc, #120]	; (8008714 <__pow5mult+0xb0>)
 800869c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086a0:	f000 fb7c 	bl	8008d9c <__assert_func>
 80086a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086a8:	6004      	str	r4, [r0, #0]
 80086aa:	60c4      	str	r4, [r0, #12]
 80086ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086b4:	b94c      	cbnz	r4, 80086ca <__pow5mult+0x66>
 80086b6:	f240 2171 	movw	r1, #625	; 0x271
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ff12 	bl	80084e4 <__i2b>
 80086c0:	2300      	movs	r3, #0
 80086c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80086c6:	4604      	mov	r4, r0
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	07eb      	lsls	r3, r5, #31
 80086d0:	d50a      	bpl.n	80086e8 <__pow5mult+0x84>
 80086d2:	4639      	mov	r1, r7
 80086d4:	4622      	mov	r2, r4
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7ff ff1a 	bl	8008510 <__multiply>
 80086dc:	4639      	mov	r1, r7
 80086de:	4680      	mov	r8, r0
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff fe47 	bl	8008374 <_Bfree>
 80086e6:	4647      	mov	r7, r8
 80086e8:	106d      	asrs	r5, r5, #1
 80086ea:	d00b      	beq.n	8008704 <__pow5mult+0xa0>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	b938      	cbnz	r0, 8008700 <__pow5mult+0x9c>
 80086f0:	4622      	mov	r2, r4
 80086f2:	4621      	mov	r1, r4
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff ff0b 	bl	8008510 <__multiply>
 80086fa:	6020      	str	r0, [r4, #0]
 80086fc:	f8c0 9000 	str.w	r9, [r0]
 8008700:	4604      	mov	r4, r0
 8008702:	e7e4      	b.n	80086ce <__pow5mult+0x6a>
 8008704:	4638      	mov	r0, r7
 8008706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870a:	bf00      	nop
 800870c:	080097e0 	.word	0x080097e0
 8008710:	08009611 	.word	0x08009611
 8008714:	08009694 	.word	0x08009694

08008718 <__lshift>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	6849      	ldr	r1, [r1, #4]
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	4607      	mov	r7, r0
 800872a:	4691      	mov	r9, r2
 800872c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008730:	f108 0601 	add.w	r6, r8, #1
 8008734:	42b3      	cmp	r3, r6
 8008736:	db0b      	blt.n	8008750 <__lshift+0x38>
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff fddb 	bl	80082f4 <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b948      	cbnz	r0, 8008756 <__lshift+0x3e>
 8008742:	4602      	mov	r2, r0
 8008744:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <__lshift+0xd8>)
 8008746:	482b      	ldr	r0, [pc, #172]	; (80087f4 <__lshift+0xdc>)
 8008748:	f240 11d9 	movw	r1, #473	; 0x1d9
 800874c:	f000 fb26 	bl	8008d9c <__assert_func>
 8008750:	3101      	adds	r1, #1
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	e7ee      	b.n	8008734 <__lshift+0x1c>
 8008756:	2300      	movs	r3, #0
 8008758:	f100 0114 	add.w	r1, r0, #20
 800875c:	f100 0210 	add.w	r2, r0, #16
 8008760:	4618      	mov	r0, r3
 8008762:	4553      	cmp	r3, sl
 8008764:	db37      	blt.n	80087d6 <__lshift+0xbe>
 8008766:	6920      	ldr	r0, [r4, #16]
 8008768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800876c:	f104 0314 	add.w	r3, r4, #20
 8008770:	f019 091f 	ands.w	r9, r9, #31
 8008774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800877c:	d02f      	beq.n	80087de <__lshift+0xc6>
 800877e:	f1c9 0e20 	rsb	lr, r9, #32
 8008782:	468a      	mov	sl, r1
 8008784:	f04f 0c00 	mov.w	ip, #0
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	fa02 f209 	lsl.w	r2, r2, r9
 800878e:	ea42 020c 	orr.w	r2, r2, ip
 8008792:	f84a 2b04 	str.w	r2, [sl], #4
 8008796:	f853 2b04 	ldr.w	r2, [r3], #4
 800879a:	4298      	cmp	r0, r3
 800879c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087a0:	d8f2      	bhi.n	8008788 <__lshift+0x70>
 80087a2:	1b03      	subs	r3, r0, r4
 80087a4:	3b15      	subs	r3, #21
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	3304      	adds	r3, #4
 80087ac:	f104 0215 	add.w	r2, r4, #21
 80087b0:	4290      	cmp	r0, r2
 80087b2:	bf38      	it	cc
 80087b4:	2304      	movcc	r3, #4
 80087b6:	f841 c003 	str.w	ip, [r1, r3]
 80087ba:	f1bc 0f00 	cmp.w	ip, #0
 80087be:	d001      	beq.n	80087c4 <__lshift+0xac>
 80087c0:	f108 0602 	add.w	r6, r8, #2
 80087c4:	3e01      	subs	r6, #1
 80087c6:	4638      	mov	r0, r7
 80087c8:	612e      	str	r6, [r5, #16]
 80087ca:	4621      	mov	r1, r4
 80087cc:	f7ff fdd2 	bl	8008374 <_Bfree>
 80087d0:	4628      	mov	r0, r5
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087da:	3301      	adds	r3, #1
 80087dc:	e7c1      	b.n	8008762 <__lshift+0x4a>
 80087de:	3904      	subs	r1, #4
 80087e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087e8:	4298      	cmp	r0, r3
 80087ea:	d8f9      	bhi.n	80087e0 <__lshift+0xc8>
 80087ec:	e7ea      	b.n	80087c4 <__lshift+0xac>
 80087ee:	bf00      	nop
 80087f0:	08009683 	.word	0x08009683
 80087f4:	08009694 	.word	0x08009694

080087f8 <__mcmp>:
 80087f8:	b530      	push	{r4, r5, lr}
 80087fa:	6902      	ldr	r2, [r0, #16]
 80087fc:	690c      	ldr	r4, [r1, #16]
 80087fe:	1b12      	subs	r2, r2, r4
 8008800:	d10e      	bne.n	8008820 <__mcmp+0x28>
 8008802:	f100 0314 	add.w	r3, r0, #20
 8008806:	3114      	adds	r1, #20
 8008808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800880c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008818:	42a5      	cmp	r5, r4
 800881a:	d003      	beq.n	8008824 <__mcmp+0x2c>
 800881c:	d305      	bcc.n	800882a <__mcmp+0x32>
 800881e:	2201      	movs	r2, #1
 8008820:	4610      	mov	r0, r2
 8008822:	bd30      	pop	{r4, r5, pc}
 8008824:	4283      	cmp	r3, r0
 8008826:	d3f3      	bcc.n	8008810 <__mcmp+0x18>
 8008828:	e7fa      	b.n	8008820 <__mcmp+0x28>
 800882a:	f04f 32ff 	mov.w	r2, #4294967295
 800882e:	e7f7      	b.n	8008820 <__mcmp+0x28>

08008830 <__mdiff>:
 8008830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	4606      	mov	r6, r0
 8008838:	4611      	mov	r1, r2
 800883a:	4620      	mov	r0, r4
 800883c:	4690      	mov	r8, r2
 800883e:	f7ff ffdb 	bl	80087f8 <__mcmp>
 8008842:	1e05      	subs	r5, r0, #0
 8008844:	d110      	bne.n	8008868 <__mdiff+0x38>
 8008846:	4629      	mov	r1, r5
 8008848:	4630      	mov	r0, r6
 800884a:	f7ff fd53 	bl	80082f4 <_Balloc>
 800884e:	b930      	cbnz	r0, 800885e <__mdiff+0x2e>
 8008850:	4b3a      	ldr	r3, [pc, #232]	; (800893c <__mdiff+0x10c>)
 8008852:	4602      	mov	r2, r0
 8008854:	f240 2132 	movw	r1, #562	; 0x232
 8008858:	4839      	ldr	r0, [pc, #228]	; (8008940 <__mdiff+0x110>)
 800885a:	f000 fa9f 	bl	8008d9c <__assert_func>
 800885e:	2301      	movs	r3, #1
 8008860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008868:	bfa4      	itt	ge
 800886a:	4643      	movge	r3, r8
 800886c:	46a0      	movge	r8, r4
 800886e:	4630      	mov	r0, r6
 8008870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008874:	bfa6      	itte	ge
 8008876:	461c      	movge	r4, r3
 8008878:	2500      	movge	r5, #0
 800887a:	2501      	movlt	r5, #1
 800887c:	f7ff fd3a 	bl	80082f4 <_Balloc>
 8008880:	b920      	cbnz	r0, 800888c <__mdiff+0x5c>
 8008882:	4b2e      	ldr	r3, [pc, #184]	; (800893c <__mdiff+0x10c>)
 8008884:	4602      	mov	r2, r0
 8008886:	f44f 7110 	mov.w	r1, #576	; 0x240
 800888a:	e7e5      	b.n	8008858 <__mdiff+0x28>
 800888c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008890:	6926      	ldr	r6, [r4, #16]
 8008892:	60c5      	str	r5, [r0, #12]
 8008894:	f104 0914 	add.w	r9, r4, #20
 8008898:	f108 0514 	add.w	r5, r8, #20
 800889c:	f100 0e14 	add.w	lr, r0, #20
 80088a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088a8:	f108 0210 	add.w	r2, r8, #16
 80088ac:	46f2      	mov	sl, lr
 80088ae:	2100      	movs	r1, #0
 80088b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80088b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088b8:	fa1f f883 	uxth.w	r8, r3
 80088bc:	fa11 f18b 	uxtah	r1, r1, fp
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	eba1 0808 	sub.w	r8, r1, r8
 80088c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088ce:	fa1f f888 	uxth.w	r8, r8
 80088d2:	1419      	asrs	r1, r3, #16
 80088d4:	454e      	cmp	r6, r9
 80088d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088da:	f84a 3b04 	str.w	r3, [sl], #4
 80088de:	d8e7      	bhi.n	80088b0 <__mdiff+0x80>
 80088e0:	1b33      	subs	r3, r6, r4
 80088e2:	3b15      	subs	r3, #21
 80088e4:	f023 0303 	bic.w	r3, r3, #3
 80088e8:	3304      	adds	r3, #4
 80088ea:	3415      	adds	r4, #21
 80088ec:	42a6      	cmp	r6, r4
 80088ee:	bf38      	it	cc
 80088f0:	2304      	movcc	r3, #4
 80088f2:	441d      	add	r5, r3
 80088f4:	4473      	add	r3, lr
 80088f6:	469e      	mov	lr, r3
 80088f8:	462e      	mov	r6, r5
 80088fa:	4566      	cmp	r6, ip
 80088fc:	d30e      	bcc.n	800891c <__mdiff+0xec>
 80088fe:	f10c 0203 	add.w	r2, ip, #3
 8008902:	1b52      	subs	r2, r2, r5
 8008904:	f022 0203 	bic.w	r2, r2, #3
 8008908:	3d03      	subs	r5, #3
 800890a:	45ac      	cmp	ip, r5
 800890c:	bf38      	it	cc
 800890e:	2200      	movcc	r2, #0
 8008910:	441a      	add	r2, r3
 8008912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008916:	b17b      	cbz	r3, 8008938 <__mdiff+0x108>
 8008918:	6107      	str	r7, [r0, #16]
 800891a:	e7a3      	b.n	8008864 <__mdiff+0x34>
 800891c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008920:	fa11 f288 	uxtah	r2, r1, r8
 8008924:	1414      	asrs	r4, r2, #16
 8008926:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800892a:	b292      	uxth	r2, r2
 800892c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008930:	f84e 2b04 	str.w	r2, [lr], #4
 8008934:	1421      	asrs	r1, r4, #16
 8008936:	e7e0      	b.n	80088fa <__mdiff+0xca>
 8008938:	3f01      	subs	r7, #1
 800893a:	e7ea      	b.n	8008912 <__mdiff+0xe2>
 800893c:	08009683 	.word	0x08009683
 8008940:	08009694 	.word	0x08009694

08008944 <__d2b>:
 8008944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008948:	4689      	mov	r9, r1
 800894a:	2101      	movs	r1, #1
 800894c:	ec57 6b10 	vmov	r6, r7, d0
 8008950:	4690      	mov	r8, r2
 8008952:	f7ff fccf 	bl	80082f4 <_Balloc>
 8008956:	4604      	mov	r4, r0
 8008958:	b930      	cbnz	r0, 8008968 <__d2b+0x24>
 800895a:	4602      	mov	r2, r0
 800895c:	4b25      	ldr	r3, [pc, #148]	; (80089f4 <__d2b+0xb0>)
 800895e:	4826      	ldr	r0, [pc, #152]	; (80089f8 <__d2b+0xb4>)
 8008960:	f240 310a 	movw	r1, #778	; 0x30a
 8008964:	f000 fa1a 	bl	8008d9c <__assert_func>
 8008968:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800896c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008970:	bb35      	cbnz	r5, 80089c0 <__d2b+0x7c>
 8008972:	2e00      	cmp	r6, #0
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	d028      	beq.n	80089ca <__d2b+0x86>
 8008978:	4668      	mov	r0, sp
 800897a:	9600      	str	r6, [sp, #0]
 800897c:	f7ff fd82 	bl	8008484 <__lo0bits>
 8008980:	9900      	ldr	r1, [sp, #0]
 8008982:	b300      	cbz	r0, 80089c6 <__d2b+0x82>
 8008984:	9a01      	ldr	r2, [sp, #4]
 8008986:	f1c0 0320 	rsb	r3, r0, #32
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	430b      	orrs	r3, r1
 8008990:	40c2      	lsrs	r2, r0
 8008992:	6163      	str	r3, [r4, #20]
 8008994:	9201      	str	r2, [sp, #4]
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	61a3      	str	r3, [r4, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	bf14      	ite	ne
 800899e:	2202      	movne	r2, #2
 80089a0:	2201      	moveq	r2, #1
 80089a2:	6122      	str	r2, [r4, #16]
 80089a4:	b1d5      	cbz	r5, 80089dc <__d2b+0x98>
 80089a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089aa:	4405      	add	r5, r0
 80089ac:	f8c9 5000 	str.w	r5, [r9]
 80089b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089b4:	f8c8 0000 	str.w	r0, [r8]
 80089b8:	4620      	mov	r0, r4
 80089ba:	b003      	add	sp, #12
 80089bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089c4:	e7d5      	b.n	8008972 <__d2b+0x2e>
 80089c6:	6161      	str	r1, [r4, #20]
 80089c8:	e7e5      	b.n	8008996 <__d2b+0x52>
 80089ca:	a801      	add	r0, sp, #4
 80089cc:	f7ff fd5a 	bl	8008484 <__lo0bits>
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	6163      	str	r3, [r4, #20]
 80089d4:	2201      	movs	r2, #1
 80089d6:	6122      	str	r2, [r4, #16]
 80089d8:	3020      	adds	r0, #32
 80089da:	e7e3      	b.n	80089a4 <__d2b+0x60>
 80089dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089e4:	f8c9 0000 	str.w	r0, [r9]
 80089e8:	6918      	ldr	r0, [r3, #16]
 80089ea:	f7ff fd2b 	bl	8008444 <__hi0bits>
 80089ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089f2:	e7df      	b.n	80089b4 <__d2b+0x70>
 80089f4:	08009683 	.word	0x08009683
 80089f8:	08009694 	.word	0x08009694

080089fc <_calloc_r>:
 80089fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089fe:	fba1 2402 	umull	r2, r4, r1, r2
 8008a02:	b94c      	cbnz	r4, 8008a18 <_calloc_r+0x1c>
 8008a04:	4611      	mov	r1, r2
 8008a06:	9201      	str	r2, [sp, #4]
 8008a08:	f7fd ff2e 	bl	8006868 <_malloc_r>
 8008a0c:	9a01      	ldr	r2, [sp, #4]
 8008a0e:	4605      	mov	r5, r0
 8008a10:	b930      	cbnz	r0, 8008a20 <_calloc_r+0x24>
 8008a12:	4628      	mov	r0, r5
 8008a14:	b003      	add	sp, #12
 8008a16:	bd30      	pop	{r4, r5, pc}
 8008a18:	220c      	movs	r2, #12
 8008a1a:	6002      	str	r2, [r0, #0]
 8008a1c:	2500      	movs	r5, #0
 8008a1e:	e7f8      	b.n	8008a12 <_calloc_r+0x16>
 8008a20:	4621      	mov	r1, r4
 8008a22:	f7fd fef8 	bl	8006816 <memset>
 8008a26:	e7f4      	b.n	8008a12 <_calloc_r+0x16>

08008a28 <_free_r>:
 8008a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d044      	beq.n	8008ab8 <_free_r+0x90>
 8008a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a32:	9001      	str	r0, [sp, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f1a1 0404 	sub.w	r4, r1, #4
 8008a3a:	bfb8      	it	lt
 8008a3c:	18e4      	addlt	r4, r4, r3
 8008a3e:	f7ff fc4d 	bl	80082dc <__malloc_lock>
 8008a42:	4a1e      	ldr	r2, [pc, #120]	; (8008abc <_free_r+0x94>)
 8008a44:	9801      	ldr	r0, [sp, #4]
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	b933      	cbnz	r3, 8008a58 <_free_r+0x30>
 8008a4a:	6063      	str	r3, [r4, #4]
 8008a4c:	6014      	str	r4, [r2, #0]
 8008a4e:	b003      	add	sp, #12
 8008a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a54:	f7ff bc48 	b.w	80082e8 <__malloc_unlock>
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d908      	bls.n	8008a6e <_free_r+0x46>
 8008a5c:	6825      	ldr	r5, [r4, #0]
 8008a5e:	1961      	adds	r1, r4, r5
 8008a60:	428b      	cmp	r3, r1
 8008a62:	bf01      	itttt	eq
 8008a64:	6819      	ldreq	r1, [r3, #0]
 8008a66:	685b      	ldreq	r3, [r3, #4]
 8008a68:	1949      	addeq	r1, r1, r5
 8008a6a:	6021      	streq	r1, [r4, #0]
 8008a6c:	e7ed      	b.n	8008a4a <_free_r+0x22>
 8008a6e:	461a      	mov	r2, r3
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	b10b      	cbz	r3, 8008a78 <_free_r+0x50>
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	d9fa      	bls.n	8008a6e <_free_r+0x46>
 8008a78:	6811      	ldr	r1, [r2, #0]
 8008a7a:	1855      	adds	r5, r2, r1
 8008a7c:	42a5      	cmp	r5, r4
 8008a7e:	d10b      	bne.n	8008a98 <_free_r+0x70>
 8008a80:	6824      	ldr	r4, [r4, #0]
 8008a82:	4421      	add	r1, r4
 8008a84:	1854      	adds	r4, r2, r1
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	6011      	str	r1, [r2, #0]
 8008a8a:	d1e0      	bne.n	8008a4e <_free_r+0x26>
 8008a8c:	681c      	ldr	r4, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	6053      	str	r3, [r2, #4]
 8008a92:	4421      	add	r1, r4
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	e7da      	b.n	8008a4e <_free_r+0x26>
 8008a98:	d902      	bls.n	8008aa0 <_free_r+0x78>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	e7d6      	b.n	8008a4e <_free_r+0x26>
 8008aa0:	6825      	ldr	r5, [r4, #0]
 8008aa2:	1961      	adds	r1, r4, r5
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	bf04      	itt	eq
 8008aa8:	6819      	ldreq	r1, [r3, #0]
 8008aaa:	685b      	ldreq	r3, [r3, #4]
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	bf04      	itt	eq
 8008ab0:	1949      	addeq	r1, r1, r5
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	6054      	str	r4, [r2, #4]
 8008ab6:	e7ca      	b.n	8008a4e <_free_r+0x26>
 8008ab8:	b003      	add	sp, #12
 8008aba:	bd30      	pop	{r4, r5, pc}
 8008abc:	2000437c 	.word	0x2000437c

08008ac0 <__ssputs_r>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	688e      	ldr	r6, [r1, #8]
 8008ac6:	429e      	cmp	r6, r3
 8008ac8:	4682      	mov	sl, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4690      	mov	r8, r2
 8008ace:	461f      	mov	r7, r3
 8008ad0:	d838      	bhi.n	8008b44 <__ssputs_r+0x84>
 8008ad2:	898a      	ldrh	r2, [r1, #12]
 8008ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ad8:	d032      	beq.n	8008b40 <__ssputs_r+0x80>
 8008ada:	6825      	ldr	r5, [r4, #0]
 8008adc:	6909      	ldr	r1, [r1, #16]
 8008ade:	eba5 0901 	sub.w	r9, r5, r1
 8008ae2:	6965      	ldr	r5, [r4, #20]
 8008ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aec:	3301      	adds	r3, #1
 8008aee:	444b      	add	r3, r9
 8008af0:	106d      	asrs	r5, r5, #1
 8008af2:	429d      	cmp	r5, r3
 8008af4:	bf38      	it	cc
 8008af6:	461d      	movcc	r5, r3
 8008af8:	0553      	lsls	r3, r2, #21
 8008afa:	d531      	bpl.n	8008b60 <__ssputs_r+0xa0>
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7fd feb3 	bl	8006868 <_malloc_r>
 8008b02:	4606      	mov	r6, r0
 8008b04:	b950      	cbnz	r0, 8008b1c <__ssputs_r+0x5c>
 8008b06:	230c      	movs	r3, #12
 8008b08:	f8ca 3000 	str.w	r3, [sl]
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1c:	6921      	ldr	r1, [r4, #16]
 8008b1e:	464a      	mov	r2, r9
 8008b20:	f7fd fe6b 	bl	80067fa <memcpy>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	6126      	str	r6, [r4, #16]
 8008b32:	6165      	str	r5, [r4, #20]
 8008b34:	444e      	add	r6, r9
 8008b36:	eba5 0509 	sub.w	r5, r5, r9
 8008b3a:	6026      	str	r6, [r4, #0]
 8008b3c:	60a5      	str	r5, [r4, #8]
 8008b3e:	463e      	mov	r6, r7
 8008b40:	42be      	cmp	r6, r7
 8008b42:	d900      	bls.n	8008b46 <__ssputs_r+0x86>
 8008b44:	463e      	mov	r6, r7
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	4632      	mov	r2, r6
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	f000 f968 	bl	8008e20 <memmove>
 8008b50:	68a3      	ldr	r3, [r4, #8]
 8008b52:	1b9b      	subs	r3, r3, r6
 8008b54:	60a3      	str	r3, [r4, #8]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	4433      	add	r3, r6
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7db      	b.n	8008b18 <__ssputs_r+0x58>
 8008b60:	462a      	mov	r2, r5
 8008b62:	f000 f977 	bl	8008e54 <_realloc_r>
 8008b66:	4606      	mov	r6, r0
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1e1      	bne.n	8008b30 <__ssputs_r+0x70>
 8008b6c:	6921      	ldr	r1, [r4, #16]
 8008b6e:	4650      	mov	r0, sl
 8008b70:	f7ff ff5a 	bl	8008a28 <_free_r>
 8008b74:	e7c7      	b.n	8008b06 <__ssputs_r+0x46>
	...

08008b78 <_svfiprintf_r>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	4698      	mov	r8, r3
 8008b7e:	898b      	ldrh	r3, [r1, #12]
 8008b80:	061b      	lsls	r3, r3, #24
 8008b82:	b09d      	sub	sp, #116	; 0x74
 8008b84:	4607      	mov	r7, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	4614      	mov	r4, r2
 8008b8a:	d50e      	bpl.n	8008baa <_svfiprintf_r+0x32>
 8008b8c:	690b      	ldr	r3, [r1, #16]
 8008b8e:	b963      	cbnz	r3, 8008baa <_svfiprintf_r+0x32>
 8008b90:	2140      	movs	r1, #64	; 0x40
 8008b92:	f7fd fe69 	bl	8006868 <_malloc_r>
 8008b96:	6028      	str	r0, [r5, #0]
 8008b98:	6128      	str	r0, [r5, #16]
 8008b9a:	b920      	cbnz	r0, 8008ba6 <_svfiprintf_r+0x2e>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e0d1      	b.n	8008d4a <_svfiprintf_r+0x1d2>
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	616b      	str	r3, [r5, #20]
 8008baa:	2300      	movs	r3, #0
 8008bac:	9309      	str	r3, [sp, #36]	; 0x24
 8008bae:	2320      	movs	r3, #32
 8008bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb8:	2330      	movs	r3, #48	; 0x30
 8008bba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d64 <_svfiprintf_r+0x1ec>
 8008bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc2:	f04f 0901 	mov.w	r9, #1
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	469a      	mov	sl, r3
 8008bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bce:	b10a      	cbz	r2, 8008bd4 <_svfiprintf_r+0x5c>
 8008bd0:	2a25      	cmp	r2, #37	; 0x25
 8008bd2:	d1f9      	bne.n	8008bc8 <_svfiprintf_r+0x50>
 8008bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd8:	d00b      	beq.n	8008bf2 <_svfiprintf_r+0x7a>
 8008bda:	465b      	mov	r3, fp
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ff6d 	bl	8008ac0 <__ssputs_r>
 8008be6:	3001      	adds	r0, #1
 8008be8:	f000 80aa 	beq.w	8008d40 <_svfiprintf_r+0x1c8>
 8008bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bee:	445a      	add	r2, fp
 8008bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80a2 	beq.w	8008d40 <_svfiprintf_r+0x1c8>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c06:	f10a 0a01 	add.w	sl, sl, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	9307      	str	r3, [sp, #28]
 8008c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c12:	931a      	str	r3, [sp, #104]	; 0x68
 8008c14:	4654      	mov	r4, sl
 8008c16:	2205      	movs	r2, #5
 8008c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1c:	4851      	ldr	r0, [pc, #324]	; (8008d64 <_svfiprintf_r+0x1ec>)
 8008c1e:	f7f7 fae7 	bl	80001f0 <memchr>
 8008c22:	9a04      	ldr	r2, [sp, #16]
 8008c24:	b9d8      	cbnz	r0, 8008c5e <_svfiprintf_r+0xe6>
 8008c26:	06d0      	lsls	r0, r2, #27
 8008c28:	bf44      	itt	mi
 8008c2a:	2320      	movmi	r3, #32
 8008c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c30:	0711      	lsls	r1, r2, #28
 8008c32:	bf44      	itt	mi
 8008c34:	232b      	movmi	r3, #43	; 0x2b
 8008c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c40:	d015      	beq.n	8008c6e <_svfiprintf_r+0xf6>
 8008c42:	9a07      	ldr	r2, [sp, #28]
 8008c44:	4654      	mov	r4, sl
 8008c46:	2000      	movs	r0, #0
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c52:	3b30      	subs	r3, #48	; 0x30
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d94e      	bls.n	8008cf6 <_svfiprintf_r+0x17e>
 8008c58:	b1b0      	cbz	r0, 8008c88 <_svfiprintf_r+0x110>
 8008c5a:	9207      	str	r2, [sp, #28]
 8008c5c:	e014      	b.n	8008c88 <_svfiprintf_r+0x110>
 8008c5e:	eba0 0308 	sub.w	r3, r0, r8
 8008c62:	fa09 f303 	lsl.w	r3, r9, r3
 8008c66:	4313      	orrs	r3, r2
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	46a2      	mov	sl, r4
 8008c6c:	e7d2      	b.n	8008c14 <_svfiprintf_r+0x9c>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	9103      	str	r1, [sp, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfbb      	ittet	lt
 8008c7a:	425b      	neglt	r3, r3
 8008c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c80:	9307      	strge	r3, [sp, #28]
 8008c82:	9307      	strlt	r3, [sp, #28]
 8008c84:	bfb8      	it	lt
 8008c86:	9204      	strlt	r2, [sp, #16]
 8008c88:	7823      	ldrb	r3, [r4, #0]
 8008c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c8c:	d10c      	bne.n	8008ca8 <_svfiprintf_r+0x130>
 8008c8e:	7863      	ldrb	r3, [r4, #1]
 8008c90:	2b2a      	cmp	r3, #42	; 0x2a
 8008c92:	d135      	bne.n	8008d00 <_svfiprintf_r+0x188>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfb8      	it	lt
 8008ca0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca4:	3402      	adds	r4, #2
 8008ca6:	9305      	str	r3, [sp, #20]
 8008ca8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d74 <_svfiprintf_r+0x1fc>
 8008cac:	7821      	ldrb	r1, [r4, #0]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f7f7 fa9d 	bl	80001f0 <memchr>
 8008cb6:	b140      	cbz	r0, 8008cca <_svfiprintf_r+0x152>
 8008cb8:	2340      	movs	r3, #64	; 0x40
 8008cba:	eba0 000a 	sub.w	r0, r0, sl
 8008cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	4303      	orrs	r3, r0
 8008cc6:	3401      	adds	r4, #1
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cce:	4826      	ldr	r0, [pc, #152]	; (8008d68 <_svfiprintf_r+0x1f0>)
 8008cd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd4:	2206      	movs	r2, #6
 8008cd6:	f7f7 fa8b 	bl	80001f0 <memchr>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d038      	beq.n	8008d50 <_svfiprintf_r+0x1d8>
 8008cde:	4b23      	ldr	r3, [pc, #140]	; (8008d6c <_svfiprintf_r+0x1f4>)
 8008ce0:	bb1b      	cbnz	r3, 8008d2a <_svfiprintf_r+0x1b2>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	3307      	adds	r3, #7
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	3308      	adds	r3, #8
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf0:	4433      	add	r3, r6
 8008cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf4:	e767      	b.n	8008bc6 <_svfiprintf_r+0x4e>
 8008cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	e7a5      	b.n	8008c4c <_svfiprintf_r+0xd4>
 8008d00:	2300      	movs	r3, #0
 8008d02:	3401      	adds	r4, #1
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	4619      	mov	r1, r3
 8008d08:	f04f 0c0a 	mov.w	ip, #10
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d12:	3a30      	subs	r2, #48	; 0x30
 8008d14:	2a09      	cmp	r2, #9
 8008d16:	d903      	bls.n	8008d20 <_svfiprintf_r+0x1a8>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0c5      	beq.n	8008ca8 <_svfiprintf_r+0x130>
 8008d1c:	9105      	str	r1, [sp, #20]
 8008d1e:	e7c3      	b.n	8008ca8 <_svfiprintf_r+0x130>
 8008d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d24:	4604      	mov	r4, r0
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7f0      	b.n	8008d0c <_svfiprintf_r+0x194>
 8008d2a:	ab03      	add	r3, sp, #12
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <_svfiprintf_r+0x1f8>)
 8008d32:	a904      	add	r1, sp, #16
 8008d34:	4638      	mov	r0, r7
 8008d36:	f7fd feab 	bl	8006a90 <_printf_float>
 8008d3a:	1c42      	adds	r2, r0, #1
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	d1d6      	bne.n	8008cee <_svfiprintf_r+0x176>
 8008d40:	89ab      	ldrh	r3, [r5, #12]
 8008d42:	065b      	lsls	r3, r3, #25
 8008d44:	f53f af2c 	bmi.w	8008ba0 <_svfiprintf_r+0x28>
 8008d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4a:	b01d      	add	sp, #116	; 0x74
 8008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	462a      	mov	r2, r5
 8008d56:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <_svfiprintf_r+0x1f8>)
 8008d58:	a904      	add	r1, sp, #16
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	f7fe f93c 	bl	8006fd8 <_printf_i>
 8008d60:	e7eb      	b.n	8008d3a <_svfiprintf_r+0x1c2>
 8008d62:	bf00      	nop
 8008d64:	080097ec 	.word	0x080097ec
 8008d68:	080097f6 	.word	0x080097f6
 8008d6c:	08006a91 	.word	0x08006a91
 8008d70:	08008ac1 	.word	0x08008ac1
 8008d74:	080097f2 	.word	0x080097f2

08008d78 <_read_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d07      	ldr	r5, [pc, #28]	; (8008d98 <_read_r+0x20>)
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	602a      	str	r2, [r5, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f7f9 f87c 	bl	8001e84 <_read>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_read_r+0x1e>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_read_r+0x1e>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20004384 	.word	0x20004384

08008d9c <__assert_func>:
 8008d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d9e:	4614      	mov	r4, r2
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <__assert_func+0x2c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4605      	mov	r5, r0
 8008da8:	68d8      	ldr	r0, [r3, #12]
 8008daa:	b14c      	cbz	r4, 8008dc0 <__assert_func+0x24>
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <__assert_func+0x30>)
 8008dae:	9100      	str	r1, [sp, #0]
 8008db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008db4:	4906      	ldr	r1, [pc, #24]	; (8008dd0 <__assert_func+0x34>)
 8008db6:	462b      	mov	r3, r5
 8008db8:	f000 f80e 	bl	8008dd8 <fiprintf>
 8008dbc:	f000 faa0 	bl	8009300 <abort>
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <__assert_func+0x38>)
 8008dc2:	461c      	mov	r4, r3
 8008dc4:	e7f3      	b.n	8008dae <__assert_func+0x12>
 8008dc6:	bf00      	nop
 8008dc8:	20000024 	.word	0x20000024
 8008dcc:	080097fd 	.word	0x080097fd
 8008dd0:	0800980a 	.word	0x0800980a
 8008dd4:	08009838 	.word	0x08009838

08008dd8 <fiprintf>:
 8008dd8:	b40e      	push	{r1, r2, r3}
 8008dda:	b503      	push	{r0, r1, lr}
 8008ddc:	4601      	mov	r1, r0
 8008dde:	ab03      	add	r3, sp, #12
 8008de0:	4805      	ldr	r0, [pc, #20]	; (8008df8 <fiprintf+0x20>)
 8008de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de6:	6800      	ldr	r0, [r0, #0]
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	f000 f88b 	bl	8008f04 <_vfiprintf_r>
 8008dee:	b002      	add	sp, #8
 8008df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df4:	b003      	add	sp, #12
 8008df6:	4770      	bx	lr
 8008df8:	20000024 	.word	0x20000024

08008dfc <__ascii_mbtowc>:
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	b901      	cbnz	r1, 8008e02 <__ascii_mbtowc+0x6>
 8008e00:	a901      	add	r1, sp, #4
 8008e02:	b142      	cbz	r2, 8008e16 <__ascii_mbtowc+0x1a>
 8008e04:	b14b      	cbz	r3, 8008e1a <__ascii_mbtowc+0x1e>
 8008e06:	7813      	ldrb	r3, [r2, #0]
 8008e08:	600b      	str	r3, [r1, #0]
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	1e10      	subs	r0, r2, #0
 8008e0e:	bf18      	it	ne
 8008e10:	2001      	movne	r0, #1
 8008e12:	b002      	add	sp, #8
 8008e14:	4770      	bx	lr
 8008e16:	4610      	mov	r0, r2
 8008e18:	e7fb      	b.n	8008e12 <__ascii_mbtowc+0x16>
 8008e1a:	f06f 0001 	mvn.w	r0, #1
 8008e1e:	e7f8      	b.n	8008e12 <__ascii_mbtowc+0x16>

08008e20 <memmove>:
 8008e20:	4288      	cmp	r0, r1
 8008e22:	b510      	push	{r4, lr}
 8008e24:	eb01 0402 	add.w	r4, r1, r2
 8008e28:	d902      	bls.n	8008e30 <memmove+0x10>
 8008e2a:	4284      	cmp	r4, r0
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	d807      	bhi.n	8008e40 <memmove+0x20>
 8008e30:	1e43      	subs	r3, r0, #1
 8008e32:	42a1      	cmp	r1, r4
 8008e34:	d008      	beq.n	8008e48 <memmove+0x28>
 8008e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e3e:	e7f8      	b.n	8008e32 <memmove+0x12>
 8008e40:	4402      	add	r2, r0
 8008e42:	4601      	mov	r1, r0
 8008e44:	428a      	cmp	r2, r1
 8008e46:	d100      	bne.n	8008e4a <memmove+0x2a>
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e52:	e7f7      	b.n	8008e44 <memmove+0x24>

08008e54 <_realloc_r>:
 8008e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	460e      	mov	r6, r1
 8008e5e:	b921      	cbnz	r1, 8008e6a <_realloc_r+0x16>
 8008e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e64:	4611      	mov	r1, r2
 8008e66:	f7fd bcff 	b.w	8006868 <_malloc_r>
 8008e6a:	b92a      	cbnz	r2, 8008e78 <_realloc_r+0x24>
 8008e6c:	f7ff fddc 	bl	8008a28 <_free_r>
 8008e70:	4625      	mov	r5, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	f000 faae 	bl	80093d8 <_malloc_usable_size_r>
 8008e7c:	4284      	cmp	r4, r0
 8008e7e:	4607      	mov	r7, r0
 8008e80:	d802      	bhi.n	8008e88 <_realloc_r+0x34>
 8008e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e86:	d812      	bhi.n	8008eae <_realloc_r+0x5a>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f7fd fcec 	bl	8006868 <_malloc_r>
 8008e90:	4605      	mov	r5, r0
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d0ed      	beq.n	8008e72 <_realloc_r+0x1e>
 8008e96:	42bc      	cmp	r4, r7
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	bf28      	it	cs
 8008e9e:	463a      	movcs	r2, r7
 8008ea0:	f7fd fcab 	bl	80067fa <memcpy>
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f7ff fdbe 	bl	8008a28 <_free_r>
 8008eac:	e7e1      	b.n	8008e72 <_realloc_r+0x1e>
 8008eae:	4635      	mov	r5, r6
 8008eb0:	e7df      	b.n	8008e72 <_realloc_r+0x1e>

08008eb2 <__sfputc_r>:
 8008eb2:	6893      	ldr	r3, [r2, #8]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	b410      	push	{r4}
 8008eba:	6093      	str	r3, [r2, #8]
 8008ebc:	da08      	bge.n	8008ed0 <__sfputc_r+0x1e>
 8008ebe:	6994      	ldr	r4, [r2, #24]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	db01      	blt.n	8008ec8 <__sfputc_r+0x16>
 8008ec4:	290a      	cmp	r1, #10
 8008ec6:	d103      	bne.n	8008ed0 <__sfputc_r+0x1e>
 8008ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ecc:	f000 b94a 	b.w	8009164 <__swbuf_r>
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	1c58      	adds	r0, r3, #1
 8008ed4:	6010      	str	r0, [r2, #0]
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	4608      	mov	r0, r1
 8008eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <__sfputs_r>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	18d5      	adds	r5, r2, r3
 8008eea:	42ac      	cmp	r4, r5
 8008eec:	d101      	bne.n	8008ef2 <__sfputs_r+0x12>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e007      	b.n	8008f02 <__sfputs_r+0x22>
 8008ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef6:	463a      	mov	r2, r7
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff ffda 	bl	8008eb2 <__sfputc_r>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d1f3      	bne.n	8008eea <__sfputs_r+0xa>
 8008f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f04 <_vfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	460d      	mov	r5, r1
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	4698      	mov	r8, r3
 8008f10:	4606      	mov	r6, r0
 8008f12:	b118      	cbz	r0, 8008f1c <_vfiprintf_r+0x18>
 8008f14:	6983      	ldr	r3, [r0, #24]
 8008f16:	b90b      	cbnz	r3, 8008f1c <_vfiprintf_r+0x18>
 8008f18:	f7fd fbaa 	bl	8006670 <__sinit>
 8008f1c:	4b89      	ldr	r3, [pc, #548]	; (8009144 <_vfiprintf_r+0x240>)
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	d11b      	bne.n	8008f5a <_vfiprintf_r+0x56>
 8008f22:	6875      	ldr	r5, [r6, #4]
 8008f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f26:	07d9      	lsls	r1, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_vfiprintf_r+0x32>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_vfiprintf_r+0x32>
 8008f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f32:	f7fd fc60 	bl	80067f6 <__retarget_lock_acquire_recursive>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	d501      	bpl.n	8008f40 <_vfiprintf_r+0x3c>
 8008f3c:	692b      	ldr	r3, [r5, #16]
 8008f3e:	b9eb      	cbnz	r3, 8008f7c <_vfiprintf_r+0x78>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 f96e 	bl	8009224 <__swsetup_r>
 8008f48:	b1c0      	cbz	r0, 8008f7c <_vfiprintf_r+0x78>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07dc      	lsls	r4, r3, #31
 8008f4e:	d50e      	bpl.n	8008f6e <_vfiprintf_r+0x6a>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	; (8009148 <_vfiprintf_r+0x244>)
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	d101      	bne.n	8008f64 <_vfiprintf_r+0x60>
 8008f60:	68b5      	ldr	r5, [r6, #8]
 8008f62:	e7df      	b.n	8008f24 <_vfiprintf_r+0x20>
 8008f64:	4b79      	ldr	r3, [pc, #484]	; (800914c <_vfiprintf_r+0x248>)
 8008f66:	429d      	cmp	r5, r3
 8008f68:	bf08      	it	eq
 8008f6a:	68f5      	ldreq	r5, [r6, #12]
 8008f6c:	e7da      	b.n	8008f24 <_vfiprintf_r+0x20>
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	0598      	lsls	r0, r3, #22
 8008f72:	d4ed      	bmi.n	8008f50 <_vfiprintf_r+0x4c>
 8008f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f76:	f7fd fc3f 	bl	80067f8 <__retarget_lock_release_recursive>
 8008f7a:	e7e9      	b.n	8008f50 <_vfiprintf_r+0x4c>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f80:	2320      	movs	r3, #32
 8008f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8a:	2330      	movs	r3, #48	; 0x30
 8008f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009150 <_vfiprintf_r+0x24c>
 8008f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f94:	f04f 0901 	mov.w	r9, #1
 8008f98:	4623      	mov	r3, r4
 8008f9a:	469a      	mov	sl, r3
 8008f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_vfiprintf_r+0xa2>
 8008fa2:	2a25      	cmp	r2, #37	; 0x25
 8008fa4:	d1f9      	bne.n	8008f9a <_vfiprintf_r+0x96>
 8008fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8008faa:	d00b      	beq.n	8008fc4 <_vfiprintf_r+0xc0>
 8008fac:	465b      	mov	r3, fp
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ff94 	bl	8008ee0 <__sfputs_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f000 80aa 	beq.w	8009112 <_vfiprintf_r+0x20e>
 8008fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc0:	445a      	add	r2, fp
 8008fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80a2 	beq.w	8009112 <_vfiprintf_r+0x20e>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd8:	f10a 0a01 	add.w	sl, sl, #1
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	9307      	str	r3, [sp, #28]
 8008fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2205      	movs	r2, #5
 8008fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fee:	4858      	ldr	r0, [pc, #352]	; (8009150 <_vfiprintf_r+0x24c>)
 8008ff0:	f7f7 f8fe 	bl	80001f0 <memchr>
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	b9d8      	cbnz	r0, 8009030 <_vfiprintf_r+0x12c>
 8008ff8:	06d1      	lsls	r1, r2, #27
 8008ffa:	bf44      	itt	mi
 8008ffc:	2320      	movmi	r3, #32
 8008ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009002:	0713      	lsls	r3, r2, #28
 8009004:	bf44      	itt	mi
 8009006:	232b      	movmi	r3, #43	; 0x2b
 8009008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800900c:	f89a 3000 	ldrb.w	r3, [sl]
 8009010:	2b2a      	cmp	r3, #42	; 0x2a
 8009012:	d015      	beq.n	8009040 <_vfiprintf_r+0x13c>
 8009014:	9a07      	ldr	r2, [sp, #28]
 8009016:	4654      	mov	r4, sl
 8009018:	2000      	movs	r0, #0
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	4621      	mov	r1, r4
 8009020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009024:	3b30      	subs	r3, #48	; 0x30
 8009026:	2b09      	cmp	r3, #9
 8009028:	d94e      	bls.n	80090c8 <_vfiprintf_r+0x1c4>
 800902a:	b1b0      	cbz	r0, 800905a <_vfiprintf_r+0x156>
 800902c:	9207      	str	r2, [sp, #28]
 800902e:	e014      	b.n	800905a <_vfiprintf_r+0x156>
 8009030:	eba0 0308 	sub.w	r3, r0, r8
 8009034:	fa09 f303 	lsl.w	r3, r9, r3
 8009038:	4313      	orrs	r3, r2
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	46a2      	mov	sl, r4
 800903e:	e7d2      	b.n	8008fe6 <_vfiprintf_r+0xe2>
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	1d19      	adds	r1, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfbb      	ittet	lt
 800904c:	425b      	neglt	r3, r3
 800904e:	f042 0202 	orrlt.w	r2, r2, #2
 8009052:	9307      	strge	r3, [sp, #28]
 8009054:	9307      	strlt	r3, [sp, #28]
 8009056:	bfb8      	it	lt
 8009058:	9204      	strlt	r2, [sp, #16]
 800905a:	7823      	ldrb	r3, [r4, #0]
 800905c:	2b2e      	cmp	r3, #46	; 0x2e
 800905e:	d10c      	bne.n	800907a <_vfiprintf_r+0x176>
 8009060:	7863      	ldrb	r3, [r4, #1]
 8009062:	2b2a      	cmp	r3, #42	; 0x2a
 8009064:	d135      	bne.n	80090d2 <_vfiprintf_r+0x1ce>
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	9203      	str	r2, [sp, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	f04f 33ff 	movlt.w	r3, #4294967295
 8009076:	3402      	adds	r4, #2
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009160 <_vfiprintf_r+0x25c>
 800907e:	7821      	ldrb	r1, [r4, #0]
 8009080:	2203      	movs	r2, #3
 8009082:	4650      	mov	r0, sl
 8009084:	f7f7 f8b4 	bl	80001f0 <memchr>
 8009088:	b140      	cbz	r0, 800909c <_vfiprintf_r+0x198>
 800908a:	2340      	movs	r3, #64	; 0x40
 800908c:	eba0 000a 	sub.w	r0, r0, sl
 8009090:	fa03 f000 	lsl.w	r0, r3, r0
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	4303      	orrs	r3, r0
 8009098:	3401      	adds	r4, #1
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	482c      	ldr	r0, [pc, #176]	; (8009154 <_vfiprintf_r+0x250>)
 80090a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a6:	2206      	movs	r2, #6
 80090a8:	f7f7 f8a2 	bl	80001f0 <memchr>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d03f      	beq.n	8009130 <_vfiprintf_r+0x22c>
 80090b0:	4b29      	ldr	r3, [pc, #164]	; (8009158 <_vfiprintf_r+0x254>)
 80090b2:	bb1b      	cbnz	r3, 80090fc <_vfiprintf_r+0x1f8>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	3307      	adds	r3, #7
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	3308      	adds	r3, #8
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c2:	443b      	add	r3, r7
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	e767      	b.n	8008f98 <_vfiprintf_r+0x94>
 80090c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090cc:	460c      	mov	r4, r1
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7a5      	b.n	800901e <_vfiprintf_r+0x11a>
 80090d2:	2300      	movs	r3, #0
 80090d4:	3401      	adds	r4, #1
 80090d6:	9305      	str	r3, [sp, #20]
 80090d8:	4619      	mov	r1, r3
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4620      	mov	r0, r4
 80090e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e4:	3a30      	subs	r2, #48	; 0x30
 80090e6:	2a09      	cmp	r2, #9
 80090e8:	d903      	bls.n	80090f2 <_vfiprintf_r+0x1ee>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0c5      	beq.n	800907a <_vfiprintf_r+0x176>
 80090ee:	9105      	str	r1, [sp, #20]
 80090f0:	e7c3      	b.n	800907a <_vfiprintf_r+0x176>
 80090f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f6:	4604      	mov	r4, r0
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7f0      	b.n	80090de <_vfiprintf_r+0x1da>
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	462a      	mov	r2, r5
 8009102:	4b16      	ldr	r3, [pc, #88]	; (800915c <_vfiprintf_r+0x258>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4630      	mov	r0, r6
 8009108:	f7fd fcc2 	bl	8006a90 <_printf_float>
 800910c:	4607      	mov	r7, r0
 800910e:	1c78      	adds	r0, r7, #1
 8009110:	d1d6      	bne.n	80090c0 <_vfiprintf_r+0x1bc>
 8009112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009114:	07d9      	lsls	r1, r3, #31
 8009116:	d405      	bmi.n	8009124 <_vfiprintf_r+0x220>
 8009118:	89ab      	ldrh	r3, [r5, #12]
 800911a:	059a      	lsls	r2, r3, #22
 800911c:	d402      	bmi.n	8009124 <_vfiprintf_r+0x220>
 800911e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009120:	f7fd fb6a 	bl	80067f8 <__retarget_lock_release_recursive>
 8009124:	89ab      	ldrh	r3, [r5, #12]
 8009126:	065b      	lsls	r3, r3, #25
 8009128:	f53f af12 	bmi.w	8008f50 <_vfiprintf_r+0x4c>
 800912c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912e:	e711      	b.n	8008f54 <_vfiprintf_r+0x50>
 8009130:	ab03      	add	r3, sp, #12
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	462a      	mov	r2, r5
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <_vfiprintf_r+0x258>)
 8009138:	a904      	add	r1, sp, #16
 800913a:	4630      	mov	r0, r6
 800913c:	f7fd ff4c 	bl	8006fd8 <_printf_i>
 8009140:	e7e4      	b.n	800910c <_vfiprintf_r+0x208>
 8009142:	bf00      	nop
 8009144:	0800958c 	.word	0x0800958c
 8009148:	080095ac 	.word	0x080095ac
 800914c:	0800956c 	.word	0x0800956c
 8009150:	080097ec 	.word	0x080097ec
 8009154:	080097f6 	.word	0x080097f6
 8009158:	08006a91 	.word	0x08006a91
 800915c:	08008ee1 	.word	0x08008ee1
 8009160:	080097f2 	.word	0x080097f2

08009164 <__swbuf_r>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	460e      	mov	r6, r1
 8009168:	4614      	mov	r4, r2
 800916a:	4605      	mov	r5, r0
 800916c:	b118      	cbz	r0, 8009176 <__swbuf_r+0x12>
 800916e:	6983      	ldr	r3, [r0, #24]
 8009170:	b90b      	cbnz	r3, 8009176 <__swbuf_r+0x12>
 8009172:	f7fd fa7d 	bl	8006670 <__sinit>
 8009176:	4b21      	ldr	r3, [pc, #132]	; (80091fc <__swbuf_r+0x98>)
 8009178:	429c      	cmp	r4, r3
 800917a:	d12b      	bne.n	80091d4 <__swbuf_r+0x70>
 800917c:	686c      	ldr	r4, [r5, #4]
 800917e:	69a3      	ldr	r3, [r4, #24]
 8009180:	60a3      	str	r3, [r4, #8]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	071a      	lsls	r2, r3, #28
 8009186:	d52f      	bpl.n	80091e8 <__swbuf_r+0x84>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	b36b      	cbz	r3, 80091e8 <__swbuf_r+0x84>
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	1ac0      	subs	r0, r0, r3
 8009192:	6963      	ldr	r3, [r4, #20]
 8009194:	b2f6      	uxtb	r6, r6
 8009196:	4283      	cmp	r3, r0
 8009198:	4637      	mov	r7, r6
 800919a:	dc04      	bgt.n	80091a6 <__swbuf_r+0x42>
 800919c:	4621      	mov	r1, r4
 800919e:	4628      	mov	r0, r5
 80091a0:	f7ff f842 	bl	8008228 <_fflush_r>
 80091a4:	bb30      	cbnz	r0, 80091f4 <__swbuf_r+0x90>
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	60a3      	str	r3, [r4, #8]
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	6022      	str	r2, [r4, #0]
 80091b2:	701e      	strb	r6, [r3, #0]
 80091b4:	6963      	ldr	r3, [r4, #20]
 80091b6:	3001      	adds	r0, #1
 80091b8:	4283      	cmp	r3, r0
 80091ba:	d004      	beq.n	80091c6 <__swbuf_r+0x62>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	07db      	lsls	r3, r3, #31
 80091c0:	d506      	bpl.n	80091d0 <__swbuf_r+0x6c>
 80091c2:	2e0a      	cmp	r6, #10
 80091c4:	d104      	bne.n	80091d0 <__swbuf_r+0x6c>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f7ff f82d 	bl	8008228 <_fflush_r>
 80091ce:	b988      	cbnz	r0, 80091f4 <__swbuf_r+0x90>
 80091d0:	4638      	mov	r0, r7
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <__swbuf_r+0x9c>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d101      	bne.n	80091de <__swbuf_r+0x7a>
 80091da:	68ac      	ldr	r4, [r5, #8]
 80091dc:	e7cf      	b.n	800917e <__swbuf_r+0x1a>
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <__swbuf_r+0xa0>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	bf08      	it	eq
 80091e4:	68ec      	ldreq	r4, [r5, #12]
 80091e6:	e7ca      	b.n	800917e <__swbuf_r+0x1a>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f81a 	bl	8009224 <__swsetup_r>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d0cb      	beq.n	800918c <__swbuf_r+0x28>
 80091f4:	f04f 37ff 	mov.w	r7, #4294967295
 80091f8:	e7ea      	b.n	80091d0 <__swbuf_r+0x6c>
 80091fa:	bf00      	nop
 80091fc:	0800958c 	.word	0x0800958c
 8009200:	080095ac 	.word	0x080095ac
 8009204:	0800956c 	.word	0x0800956c

08009208 <__ascii_wctomb>:
 8009208:	b149      	cbz	r1, 800921e <__ascii_wctomb+0x16>
 800920a:	2aff      	cmp	r2, #255	; 0xff
 800920c:	bf85      	ittet	hi
 800920e:	238a      	movhi	r3, #138	; 0x8a
 8009210:	6003      	strhi	r3, [r0, #0]
 8009212:	700a      	strbls	r2, [r1, #0]
 8009214:	f04f 30ff 	movhi.w	r0, #4294967295
 8009218:	bf98      	it	ls
 800921a:	2001      	movls	r0, #1
 800921c:	4770      	bx	lr
 800921e:	4608      	mov	r0, r1
 8009220:	4770      	bx	lr
	...

08009224 <__swsetup_r>:
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <__swsetup_r+0xcc>)
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	681d      	ldr	r5, [r3, #0]
 800922a:	4606      	mov	r6, r0
 800922c:	460c      	mov	r4, r1
 800922e:	b125      	cbz	r5, 800923a <__swsetup_r+0x16>
 8009230:	69ab      	ldr	r3, [r5, #24]
 8009232:	b913      	cbnz	r3, 800923a <__swsetup_r+0x16>
 8009234:	4628      	mov	r0, r5
 8009236:	f7fd fa1b 	bl	8006670 <__sinit>
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <__swsetup_r+0xd0>)
 800923c:	429c      	cmp	r4, r3
 800923e:	d10f      	bne.n	8009260 <__swsetup_r+0x3c>
 8009240:	686c      	ldr	r4, [r5, #4]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009248:	0719      	lsls	r1, r3, #28
 800924a:	d42c      	bmi.n	80092a6 <__swsetup_r+0x82>
 800924c:	06dd      	lsls	r5, r3, #27
 800924e:	d411      	bmi.n	8009274 <__swsetup_r+0x50>
 8009250:	2309      	movs	r3, #9
 8009252:	6033      	str	r3, [r6, #0]
 8009254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	e03e      	b.n	80092de <__swsetup_r+0xba>
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <__swsetup_r+0xd4>)
 8009262:	429c      	cmp	r4, r3
 8009264:	d101      	bne.n	800926a <__swsetup_r+0x46>
 8009266:	68ac      	ldr	r4, [r5, #8]
 8009268:	e7eb      	b.n	8009242 <__swsetup_r+0x1e>
 800926a:	4b24      	ldr	r3, [pc, #144]	; (80092fc <__swsetup_r+0xd8>)
 800926c:	429c      	cmp	r4, r3
 800926e:	bf08      	it	eq
 8009270:	68ec      	ldreq	r4, [r5, #12]
 8009272:	e7e6      	b.n	8009242 <__swsetup_r+0x1e>
 8009274:	0758      	lsls	r0, r3, #29
 8009276:	d512      	bpl.n	800929e <__swsetup_r+0x7a>
 8009278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927a:	b141      	cbz	r1, 800928e <__swsetup_r+0x6a>
 800927c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009280:	4299      	cmp	r1, r3
 8009282:	d002      	beq.n	800928a <__swsetup_r+0x66>
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff fbcf 	bl	8008a28 <_free_r>
 800928a:	2300      	movs	r3, #0
 800928c:	6363      	str	r3, [r4, #52]	; 0x34
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	2300      	movs	r3, #0
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f043 0308 	orr.w	r3, r3, #8
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	b94b      	cbnz	r3, 80092be <__swsetup_r+0x9a>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b4:	d003      	beq.n	80092be <__swsetup_r+0x9a>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 f84d 	bl	8009358 <__smakebuf_r>
 80092be:	89a0      	ldrh	r0, [r4, #12]
 80092c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092c4:	f010 0301 	ands.w	r3, r0, #1
 80092c8:	d00a      	beq.n	80092e0 <__swsetup_r+0xbc>
 80092ca:	2300      	movs	r3, #0
 80092cc:	60a3      	str	r3, [r4, #8]
 80092ce:	6963      	ldr	r3, [r4, #20]
 80092d0:	425b      	negs	r3, r3
 80092d2:	61a3      	str	r3, [r4, #24]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	b943      	cbnz	r3, 80092ea <__swsetup_r+0xc6>
 80092d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092dc:	d1ba      	bne.n	8009254 <__swsetup_r+0x30>
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	0781      	lsls	r1, r0, #30
 80092e2:	bf58      	it	pl
 80092e4:	6963      	ldrpl	r3, [r4, #20]
 80092e6:	60a3      	str	r3, [r4, #8]
 80092e8:	e7f4      	b.n	80092d4 <__swsetup_r+0xb0>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e7f7      	b.n	80092de <__swsetup_r+0xba>
 80092ee:	bf00      	nop
 80092f0:	20000024 	.word	0x20000024
 80092f4:	0800958c 	.word	0x0800958c
 80092f8:	080095ac 	.word	0x080095ac
 80092fc:	0800956c 	.word	0x0800956c

08009300 <abort>:
 8009300:	b508      	push	{r3, lr}
 8009302:	2006      	movs	r0, #6
 8009304:	f000 f898 	bl	8009438 <raise>
 8009308:	2001      	movs	r0, #1
 800930a:	f7f8 fdb1 	bl	8001e70 <_exit>

0800930e <__swhatbuf_r>:
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	460e      	mov	r6, r1
 8009312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009316:	2900      	cmp	r1, #0
 8009318:	b096      	sub	sp, #88	; 0x58
 800931a:	4614      	mov	r4, r2
 800931c:	461d      	mov	r5, r3
 800931e:	da08      	bge.n	8009332 <__swhatbuf_r+0x24>
 8009320:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	061a      	lsls	r2, r3, #24
 800932a:	d410      	bmi.n	800934e <__swhatbuf_r+0x40>
 800932c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009330:	e00e      	b.n	8009350 <__swhatbuf_r+0x42>
 8009332:	466a      	mov	r2, sp
 8009334:	f000 f89c 	bl	8009470 <_fstat_r>
 8009338:	2800      	cmp	r0, #0
 800933a:	dbf1      	blt.n	8009320 <__swhatbuf_r+0x12>
 800933c:	9a01      	ldr	r2, [sp, #4]
 800933e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009342:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009346:	425a      	negs	r2, r3
 8009348:	415a      	adcs	r2, r3
 800934a:	602a      	str	r2, [r5, #0]
 800934c:	e7ee      	b.n	800932c <__swhatbuf_r+0x1e>
 800934e:	2340      	movs	r3, #64	; 0x40
 8009350:	2000      	movs	r0, #0
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	b016      	add	sp, #88	; 0x58
 8009356:	bd70      	pop	{r4, r5, r6, pc}

08009358 <__smakebuf_r>:
 8009358:	898b      	ldrh	r3, [r1, #12]
 800935a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800935c:	079d      	lsls	r5, r3, #30
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	d507      	bpl.n	8009374 <__smakebuf_r+0x1c>
 8009364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	2301      	movs	r3, #1
 800936e:	6163      	str	r3, [r4, #20]
 8009370:	b002      	add	sp, #8
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	ab01      	add	r3, sp, #4
 8009376:	466a      	mov	r2, sp
 8009378:	f7ff ffc9 	bl	800930e <__swhatbuf_r>
 800937c:	9900      	ldr	r1, [sp, #0]
 800937e:	4605      	mov	r5, r0
 8009380:	4630      	mov	r0, r6
 8009382:	f7fd fa71 	bl	8006868 <_malloc_r>
 8009386:	b948      	cbnz	r0, 800939c <__smakebuf_r+0x44>
 8009388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938c:	059a      	lsls	r2, r3, #22
 800938e:	d4ef      	bmi.n	8009370 <__smakebuf_r+0x18>
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	e7e3      	b.n	8009364 <__smakebuf_r+0xc>
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <__smakebuf_r+0x7c>)
 800939e:	62b3      	str	r3, [r6, #40]	; 0x28
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	6020      	str	r0, [r4, #0]
 80093a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	9b00      	ldr	r3, [sp, #0]
 80093ac:	6163      	str	r3, [r4, #20]
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	6120      	str	r0, [r4, #16]
 80093b2:	b15b      	cbz	r3, 80093cc <__smakebuf_r+0x74>
 80093b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b8:	4630      	mov	r0, r6
 80093ba:	f000 f86b 	bl	8009494 <_isatty_r>
 80093be:	b128      	cbz	r0, 80093cc <__smakebuf_r+0x74>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f023 0303 	bic.w	r3, r3, #3
 80093c6:	f043 0301 	orr.w	r3, r3, #1
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	89a0      	ldrh	r0, [r4, #12]
 80093ce:	4305      	orrs	r5, r0
 80093d0:	81a5      	strh	r5, [r4, #12]
 80093d2:	e7cd      	b.n	8009370 <__smakebuf_r+0x18>
 80093d4:	08006609 	.word	0x08006609

080093d8 <_malloc_usable_size_r>:
 80093d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093dc:	1f18      	subs	r0, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfbc      	itt	lt
 80093e2:	580b      	ldrlt	r3, [r1, r0]
 80093e4:	18c0      	addlt	r0, r0, r3
 80093e6:	4770      	bx	lr

080093e8 <_raise_r>:
 80093e8:	291f      	cmp	r1, #31
 80093ea:	b538      	push	{r3, r4, r5, lr}
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	d904      	bls.n	80093fc <_raise_r+0x14>
 80093f2:	2316      	movs	r3, #22
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093fe:	b112      	cbz	r2, 8009406 <_raise_r+0x1e>
 8009400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009404:	b94b      	cbnz	r3, 800941a <_raise_r+0x32>
 8009406:	4620      	mov	r0, r4
 8009408:	f000 f830 	bl	800946c <_getpid_r>
 800940c:	462a      	mov	r2, r5
 800940e:	4601      	mov	r1, r0
 8009410:	4620      	mov	r0, r4
 8009412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009416:	f000 b817 	b.w	8009448 <_kill_r>
 800941a:	2b01      	cmp	r3, #1
 800941c:	d00a      	beq.n	8009434 <_raise_r+0x4c>
 800941e:	1c59      	adds	r1, r3, #1
 8009420:	d103      	bne.n	800942a <_raise_r+0x42>
 8009422:	2316      	movs	r3, #22
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	2001      	movs	r0, #1
 8009428:	e7e7      	b.n	80093fa <_raise_r+0x12>
 800942a:	2400      	movs	r4, #0
 800942c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009430:	4628      	mov	r0, r5
 8009432:	4798      	blx	r3
 8009434:	2000      	movs	r0, #0
 8009436:	e7e0      	b.n	80093fa <_raise_r+0x12>

08009438 <raise>:
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <raise+0xc>)
 800943a:	4601      	mov	r1, r0
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f7ff bfd3 	b.w	80093e8 <_raise_r>
 8009442:	bf00      	nop
 8009444:	20000024 	.word	0x20000024

08009448 <_kill_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_kill_r+0x20>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f7f8 fcfb 	bl	8001e50 <_kill>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d102      	bne.n	8009464 <_kill_r+0x1c>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b103      	cbz	r3, 8009464 <_kill_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20004384 	.word	0x20004384

0800946c <_getpid_r>:
 800946c:	f7f8 bce8 	b.w	8001e40 <_getpid>

08009470 <_fstat_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d07      	ldr	r5, [pc, #28]	; (8009490 <_fstat_r+0x20>)
 8009474:	2300      	movs	r3, #0
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	4611      	mov	r1, r2
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	f7f8 fd46 	bl	8001f0e <_fstat>
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	d102      	bne.n	800948c <_fstat_r+0x1c>
 8009486:	682b      	ldr	r3, [r5, #0]
 8009488:	b103      	cbz	r3, 800948c <_fstat_r+0x1c>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	bd38      	pop	{r3, r4, r5, pc}
 800948e:	bf00      	nop
 8009490:	20004384 	.word	0x20004384

08009494 <_isatty_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_isatty_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f8 fd45 	bl	8001f2e <_isatty>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_isatty_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_isatty_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20004384 	.word	0x20004384

080094b4 <_sbrk>:
 80094b4:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <_sbrk+0x14>)
 80094b6:	6811      	ldr	r1, [r2, #0]
 80094b8:	4603      	mov	r3, r0
 80094ba:	b909      	cbnz	r1, 80094c0 <_sbrk+0xc>
 80094bc:	4903      	ldr	r1, [pc, #12]	; (80094cc <_sbrk+0x18>)
 80094be:	6011      	str	r1, [r2, #0]
 80094c0:	6810      	ldr	r0, [r2, #0]
 80094c2:	4403      	add	r3, r0
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	4770      	bx	lr
 80094c8:	20004388 	.word	0x20004388
 80094cc:	20004390 	.word	0x20004390

080094d0 <_init>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr

080094dc <_fini>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	bf00      	nop
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr
